<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm | Jiyuan Liu</title>
    <link>http://localhost:1313/tags/algorithm/</link>
      <atom:link href="http://localhost:1313/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <description>Algorithm</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Thu, 24 Apr 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu_fd2be5a69becaf9e.png</url>
      <title>Algorithm</title>
      <link>http://localhost:1313/tags/algorithm/</link>
    </image>
    
    <item>
      <title>Math Derivation for SAVER Imputation</title>
      <link>http://localhost:1313/post/19b.scrnaseq_impute_saver/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19b.scrnaseq_impute_saver/</guid>
      <description>&lt;h2 id=&#34;-goal&#34;&gt;‚úÖ Goal:&lt;/h2&gt;
 
$$
 \hat{\lambda}_{gc} = \frac{Y_{gc} + \hat{\alpha}_{gc}}{s_c + \hat{\beta}_{gc}} = \frac{s_c}{s_c + \hat{\beta}_{gc}} \cdot \frac{Y_{gc}}{s_c} + \frac{\hat{\beta}_{gc}}{s_c + \hat{\beta}_{gc}} \cdot \hat{\mu}_{gc} 
$$


&lt;p&gt;&lt;strong&gt;Gamma distribution gives:&lt;/strong&gt;&lt;/p&gt;
 
$$ \hat{\alpha}_{gc} = \hat{\beta}_{gc} \hat{\mu}_{gc} \quad \text{(1)} $$


&lt;h2 id=&#34;-step-by-step-proof&#34;&gt;üîÅ Step-by-Step Proof:&lt;/h2&gt;
&lt;p&gt;We start with:&lt;/p&gt;
 
$$ \hat{\lambda}_{gc} = \frac{Y_{gc} + \hat{\alpha}_{gc}}{s_c + \hat{\beta}_{gc}} \quad \text{(2)} $$


&lt;p&gt;Substitute  $\hat{\alpha}_{gc} = \hat{\beta}_{gc} \hat{\mu}_{gc}$ 
 from equation (1):&lt;/p&gt;
 
$$ = \frac{Y_{gc} + \hat{\beta}_{gc} \hat{\mu}_{gc}}{s_c + \hat{\beta}_{gc}} \quad \text{(3)} $$


&lt;p&gt;Split the numerator:&lt;/p&gt;
 
$$ = \frac{Y_{gc}}{s_c + \hat{\beta}_{gc}} + \frac{\hat{\beta}_{gc} \hat{\mu}_{gc}}{s_c + \hat{\beta}_{gc}} \quad \text{(4)} $$


&lt;p&gt;Now multiply and divide the first term by  $s_c$ 
:&lt;/p&gt;
 
$$ = \left(\frac{s_c}{s_c + \hat{\beta}_{gc}} \cdot \frac{Y_{gc}}{s_c}\right) + \left(\frac{\hat{\beta}_{gc}}{s_c + \hat{\beta}_{gc}} \cdot \hat{\mu}_{gc}\right) \quad \text{(5)} $$


&lt;p&gt;Which gives:&lt;/p&gt;
 
$$ \hat{\lambda}_{gc} = \frac{s_c}{s_c + \hat{\beta}_{gc}} \cdot \frac{Y_{gc}}{s_c} + \frac{\hat{\beta}_{gc}}{s_c + \hat{\beta}_{gc}} \cdot \hat{\mu}_{gc} \quad \text{(6)} $$


&lt;p&gt;‚úÖ &lt;strong&gt;Proved.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;-summary&#34;&gt;üîç Summary:&lt;/h2&gt;
&lt;p&gt;This is a weighted average of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\frac{Y_{gc}}{s_c}$ 
: observed normalized expression&lt;/li&gt;
&lt;li&gt; $\hat{\mu}_{gc}$ 
: predicted expression from prior&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With weights proportional to data confidence ( $s_c$ 
) and prior confidence ( $\hat{\beta}_{gc}$ 
).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üìä Conjugate Priors-- Bypassing Marginals in Bayesian Inference</title>
      <link>http://localhost:1313/post/19a.conjugate_prior_bayes/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19a.conjugate_prior_bayes/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Conjugate priors are a powerful concept in Bayesian statistics that allow us to simplify the process of updating our beliefs about a parameter given new data. Using conjugate priors allows you to bypass computing marginal distributions because the posterior has the same functional form as the prior, making the normalization constant analytically tractable.&lt;/p&gt;
&lt;h4 id=&#34;standard-bayes-theorem&#34;&gt;Standard Bayes&amp;rsquo; Theorem&lt;/h4&gt;
 $$P(\theta|D) = \frac{P(D|\theta)P(\theta)}{P(D)}$$ 

&lt;p&gt;where the marginal likelihood is:&lt;/p&gt;
 $$P(D) = \int P(D|\theta)P(\theta)d\theta$$ 

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;
&lt;p&gt;Computing  $P(D)$ 
 often requires intractable integrals, especially in high dimensions.&lt;/p&gt;
&lt;h4 id=&#34;conjugate-prior-solution&#34;&gt;Conjugate Prior Solution&lt;/h4&gt;
&lt;p&gt;When the prior  $P(\theta)$ 
 is conjugate to the likelihood  $P(D|\theta)$ 
, we have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prior:&lt;/strong&gt;  $P(\theta) \propto f(\theta; \alpha_0)$ 
 (some parametric form)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Likelihood:&lt;/strong&gt;  $P(D|\theta) \propto g(\theta; D)$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Posterior:&lt;/strong&gt;  $P(\theta|D) \propto f(\theta; \alpha_n)$ 
 (same form as prior)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where  $\alpha_n = h(\alpha_0, D)$ 
 is a simple update function. Specifically, since we know the posterior belongs to the same family as the prior, we can write:&lt;/p&gt;
 $$P(\theta|D) = \frac{f(\theta; \alpha_n)}{Z(\alpha_n)}$$ 

&lt;p&gt;where  $Z(\alpha_n)$ 
 is the normalization constant for the known distribution family, which has a closed form.&lt;/p&gt;
&lt;h2 id=&#34;example-beta-binomial-conjugacy&#34;&gt;Example: Beta-Binomial Conjugacy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prior:&lt;/strong&gt;  $P(\theta) = \text{Beta}(\alpha, \beta)$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Likelihood:&lt;/strong&gt;  $P(D|\theta) = \text{Binomial}(n, \theta)$ 
 with  $s$ 
 successes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Posterior:&lt;/strong&gt;  $P(\theta|D) = \text{Beta}(\alpha + s, \beta + n - s)$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We never need to compute:&lt;/p&gt;
 $$P(D) = \int_0^1 \binom{n}{s}\theta^s(1-\theta)^{n-s} \cdot \frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)} d\theta$$ 

&lt;p&gt;Instead, we directly get the posterior parameters and use the known Beta normalization. This explains why conjugate priors are so powerful&amp;ndash; they let us skip the hardest part of Bayesian computation. Let me break down what&amp;rsquo;s happening:&lt;/p&gt;
&lt;h4 id=&#34;the-hard-way-without-conjugate-priors&#34;&gt;The Hard Way (Without Conjugate Priors)&lt;/h4&gt;
&lt;p&gt;To get the posterior, we&amp;rsquo;d normally need to compute this integral:&lt;/p&gt;
 $$P(D) = \int_0^1 \binom{n}{s}\theta^s(1-\theta)^{n-s} \cdot \frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)} d\theta$$ 

&lt;p&gt;This integral combines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\binom{n}{s}\theta^s(1-\theta)^{n-s}$ 
 (binomial likelihood)&lt;/li&gt;
&lt;li&gt; $\frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)}$ 
 (Beta prior)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-this-integral-is-nasty&#34;&gt;Why This Integral is Nasty&lt;/h4&gt;
&lt;p&gt;Even though this particular integral has a closed form, in general such integrals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;May not have analytical solutions&lt;/li&gt;
&lt;li&gt;Require numerical integration (expensive, approximate)&lt;/li&gt;
&lt;li&gt;Get exponentially harder in higher dimensions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-conjugate-prior-shortcut&#34;&gt;The Conjugate Prior Shortcut&lt;/h4&gt;
&lt;p&gt;Instead of computing that integral, we use the conjugate relationship:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Recognize the pattern:&lt;/strong&gt;
 $$\theta^s(1-\theta)^{n-s} \times \theta^{\alpha-1}(1-\theta)^{\beta-1} = \theta^{(s+\alpha)-1}(1-\theta)^{(n-s+\beta)-1} \quad (1)$$
&lt;/p&gt;
&lt;p&gt;This looks like a Beta distribution with parameters  $(\alpha + s, \beta + n - s)$ 
&lt;/p&gt;
&lt;p&gt;We derive below in &lt;a href=&#34;#math-derivation&#34;&gt;next section&lt;/a&gt; how this leads to the marginal likelihood:&lt;/p&gt;
 $$P(D) = \frac{B(\alpha+s, \beta+n-s)}{B(\alpha, \beta)} \binom{n}{s} \quad (2)$$ 

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write the posterior directly:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We substitute equation (1) and (2) in Standard Bayes&amp;rsquo; Theorem to get the posterior distribution:&lt;/p&gt;
 $$P(\theta|D) = \text{Beta}(\alpha + s, \beta + n - s) = \frac{\theta^{\alpha+s-1}(1-\theta)^{\beta+n-s-1}}{B(\alpha+s, \beta+n-s)}$$ 

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But for getting the posterior distribution, we don&amp;rsquo;t even need  $P(D)$ 
 - we just need the updated parameters!&lt;/p&gt;
&lt;h4 id=&#34;interim-summary&#34;&gt;Interim Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Without conjugacy:&lt;/em&gt; Solve a potentially intractable integral&lt;/li&gt;
&lt;li&gt;&lt;em&gt;With conjugacy:&lt;/em&gt; Simple parameter update:  $(\alpha, \beta) \rightarrow (\alpha + s, \beta + n - s)$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The normalization &amp;ldquo;just works&amp;rdquo; because we&amp;rsquo;re staying within the same distributional family where normalization constants are known.&lt;/p&gt;
&lt;h2 id=&#34;math-derivation&#34;&gt;Math Derivation&lt;a id=&#34;math-derivation&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a &lt;strong&gt;step-by-step derivation of the marginal likelihood integral for the Beta-Binomial conjugate prior relationship&lt;/strong&gt;. This shows how we can transform a potentially difficult integral into a simple ratio of Beta functions, which is the essence of why conjugate priors are so powerful in Bayesian inference.&lt;/p&gt;
&lt;h3 id=&#34;starting-point-the-marginal-likelihood-integral&#34;&gt;Starting Point: The Marginal Likelihood Integral&lt;/h3&gt;
 $$P(D) = \int_0^1 \binom{n}{s}\theta^s(1-\theta)^{n-s} \cdot \frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)} d\theta \quad (1)$$ 

&lt;h3 id=&#34;step-1-factor-out-constants&#34;&gt;Step 1: Factor Out Constants&lt;/h3&gt;
&lt;p&gt;The binomial coefficient  $\binom{n}{s}$ 
 and  $\frac{1}{B(\alpha,\beta)}$ 
 don&amp;rsquo;t depend on  $\theta$ 
, so we can pull them outside the integral:&lt;/p&gt;
 $$P(D) = \binom{n}{s} \cdot \frac{1}{B(\alpha,\beta)} \int_0^1 \theta^s(1-\theta)^{n-s} \cdot \theta^{\alpha-1}(1-\theta)^{\beta-1} d\theta \quad (2)$$ 

&lt;h3 id=&#34;step-2-combine-the-powers&#34;&gt;Step 2: Combine the Powers&lt;/h3&gt;
&lt;p&gt;Using the exponent rule  $x^a \cdot x^b = x^{a+b}$ 
:&lt;/p&gt;
 $$P(D) = \binom{n}{s} \cdot \frac{1}{B(\alpha,\beta)} \int_0^1 \theta^{s+\alpha-1}(1-\theta)^{n-s+\beta-1} d\theta \quad (3)$$ 

&lt;h3 id=&#34;step-3-recognize-the-beta-function-integral&#34;&gt;Step 3: Recognize the Beta Function Integral&lt;/h3&gt;
&lt;p&gt;The integral  $\int_0^1 \theta^{a-1}(1-\theta)^{b-1} d\theta$ 
 is exactly the definition of the Beta function  $B(a,b)$ 
.&lt;/p&gt;
&lt;p&gt;In our case, we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $a = s + \alpha$ 
&lt;/li&gt;
&lt;li&gt; $b = n - s + \beta$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So:
 $$\int_0^1 \theta^{s+\alpha-1}(1-\theta)^{n-s+\beta-1} d\theta = B(s+\alpha, n-s+\beta) = B(\alpha+s, \beta+n-s) \quad (4)$$ 
&lt;/p&gt;
&lt;h3 id=&#34;step-4-substitute-back&#34;&gt;Step 4: Substitute Back&lt;/h3&gt;
 $$P(D) = \binom{n}{s} \cdot \frac{1}{B(\alpha,\beta)} \cdot B(\alpha+s, \beta+n-s) \quad (5)$$ 

&lt;h3 id=&#34;final-result&#34;&gt;Final Result&lt;/h3&gt;
&lt;p&gt;Rearranging:
 $$P(D) = \frac{B(\alpha+s, \beta+n-s)}{B(\alpha,\beta)} \binom{n}{s} \quad (6)$$ 
&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is why conjugate priors are so computationally elegant: they transform intractable integrals into simple ratios of known functions. Specifically for the Beta-Binomial case:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;We avoided numerical integration&lt;/strong&gt; - instead of computing a potentially difficult integral, we used the known relationship between integrals and Beta functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Both Beta functions have closed forms&lt;/strong&gt; -  $B(a,b) = \frac{\Gamma(a)\Gamma(b)}{\Gamma(a+b)}$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This gives us the exact marginal likelihood&lt;/strong&gt; - no approximation needed&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ EM algorithm, EM with max a posterior, full Bayesian inferences (variational Bayesian) which might be used in auto-coder</title>
      <link>http://localhost:1313/post/19.ememwithmapvariationalbayesian/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19.ememwithmapvariationalbayesian/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ what makes neural network so powerful and popular</title>
      <link>http://localhost:1313/post/18.what_make_neural_network_powerful_popular/</link>
      <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/18.what_make_neural_network_powerful_popular/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Smooth tests of goodness of Fit used in Stijn Hawinkel ‚Äôs plos one paper</title>
      <link>http://localhost:1313/post/17.smooth.tests.of.goodness.of.fit/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/17.smooth.tests.of.goodness.of.fit/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ how good is negative binomial, why AI works for biology</title>
      <link>http://localhost:1313/post/16.how.good.is.negative.binominal/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/16.how.good.is.negative.binominal/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Seurat to analysis large sample size of bulk RNAseq. Discuss Wixcox is better for clinical samples</title>
      <link>http://localhost:1313/post/15.use.seurat.for.bulk.rnaseq/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/15.use.seurat.for.bulk.rnaseq/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Spatial genomics presentation</title>
      <link>http://localhost:1313/post/14.spatial_genomics_presentation/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/14.spatial_genomics_presentation/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Bayesian abundance statistics in PRCC</title>
      <link>http://localhost:1313/post/13.yolov8/</link>
      <pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/13.yolov8/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Yolov8</title>
      <link>http://localhost:1313/post/12.basian_abundance_statistics/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/12.basian_abundance_statistics/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Velocity reasoning and discussion</title>
      <link>http://localhost:1313/post/11.velocity_reasoning/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11.velocity_reasoning/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ CCA reasoning and integration discussion</title>
      <link>http://localhost:1313/post/10.cca_reasoning/</link>
      <pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/10.cca_reasoning/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ sctransfrom reasoning</title>
      <link>http://localhost:1313/post/09.sctransform/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/09.sctransform/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Clinical relevance evaluation in PRCC</title>
      <link>http://localhost:1313/post/08.clinical_relevance/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/08.clinical_relevance/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Expressive cord diagram in PRCC</title>
      <link>http://localhost:1313/post/07.cord_diagram/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/07.cord_diagram/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Determine whether it‚Äôs noise or true stem like cells in PRCC</title>
      <link>http://localhost:1313/post/06.noise_or_true_stem_cell/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/06.noise_or_true_stem_cell/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ quantify xenograft and host gene expression from the same sample</title>
      <link>http://localhost:1313/post/05.xensoft_caki_paper/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/05.xensoft_caki_paper/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ counteract treatment-specific background in differential expressed gene analysis (huangcong paper)</title>
      <link>http://localhost:1313/post/04.huangcong_oncogene/</link>
      <pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/04.huangcong_oncogene/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ A snakemake pipline-- quantify hERV, transgenes and genome from well-based single-cell RNAseq</title>
      <link>http://localhost:1313/post/03.well-based_scrnaseq_herv_quantification/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/03.well-based_scrnaseq_herv_quantification/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see &lt;a href=&#34;https://github.com/jliu678/snakemake-pipline_quantify-hERV-trangene_well-based-scRNAseq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-hervs-and-transgenes&#34;&gt;What are hERVs and transgenes&lt;/h2&gt;
&lt;p&gt;Human Endogenous Retroviruses (hERVs) are ancient viral sequences embedded in the human genome. The roles of hERVs in gene regulation, immunity, development and cancer are under intense research. Transgenes including GFP, CRE, Luciferase, rtTA/Tet-On/Tet-Off and epitopically expressed genes are common targets to be quantified in sample from transgenic mouse models.&lt;/p&gt;
&lt;h2 id=&#34;how-to-quantify-them-from-well-based-scrnaseq&#34;&gt;How to quantify them from Well-based scRNAseq&lt;/h2&gt;
&lt;p&gt;The EM algorithm is well-suited for quantifying them as elucidated in &lt;a href=&#34;aaaaaaaaa&#34;&gt;my previous blog&lt;/a&gt;. Briefly, EM algorithm is advantageous in dealing with  multimaping, which is commonly seen for hERV and transgene quantification, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mathematically, EM is well suitable for estimating parameters in Gaussian Mixture Models, which is similar to the model describing multimapping&lt;/li&gt;
&lt;li&gt;biologically, EM can takes into consideration the mapping probability and mapping bias, though Starsolo dose not use bias correction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Starsolo&lt;/a&gt; is particularly handy for this task because it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implements EM algorithm&lt;/li&gt;
&lt;li&gt;follows CellRanger logic for cell barcode whitelisting and UMI deduplication to produce nearly identical gene counts in the same format as the CellRanger does&lt;/li&gt;
&lt;li&gt;is the foundation of alignment in CellRanger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-resembling-cellranger-helps&#34;&gt;Why resembling CellRanger helps&lt;/h2&gt;
&lt;p&gt;The similarity of STARsolo with CellRanger is important. While CellRanger is not a gold standard, a substantial and growing body of biological interpretations is derived from data processed by it. Aligning with CellRanger enables more meaningful comparisons with such datasets. This is particularly crucial when data integration is required, as no current method can fully correct for technical artifacts without distorting true biological signals.&lt;/p&gt;
&lt;h2 id=&#34;snakemake-workflow-management&#34;&gt;Snakemake Workflow Management&lt;/h2&gt;
&lt;p&gt;Snakemake is used to manage a workflow as illustrated below. Briefly, I generated star index and wrangled all fastqs belonging to the same end reading and the same sample into one fastq file. The combined fastqs and star index were input to starsolo in rule &lt;code&gt;star_mapping&lt;/code&gt;. After making sure both input fastq wrangling and rule &lt;code&gt;star_mapping&lt;/code&gt; were done, I moved the input fastqs to a specified directory to safely carry out cleaning up.
&lt;figure class=&#34;ma0 w-75&#34;&gt;&lt;img src=&#34;http://localhost:1313/post/03.well-based_scrnaseq_herv_quantification/dag.svg&#34;&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Compared with that for 10x scRNAseq, the Snakemake file to quantify hERV, transgenes and genome from well-based single-cell RNAseq data has more details to pay attention to. Below discussed the key unique lines of the Snakemake file for well-based single-cell RNAseq, and please see the common parts of the Snakemake files for both well-based and 10x scRNAseq data in &lt;a href=&#34;10xscrnaseq&#34;&gt;my previous blog&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;align-and-count-genes-herv-and-transgenes&#34;&gt;Align and count genes, hERV and transgenes&lt;/h3&gt;
&lt;p&gt;Rule &lt;code&gt;star_mapping&lt;/code&gt; calls STARsolo with a detailed configuration for single-cell RNA-seq analysis, using a customized CB/UMI structure and enabling EM-based handling of multimappers.&lt;/p&gt;
&lt;p&gt;The soloType for seqWell(well-based scRNAseq) is &lt;code&gt;CB_UMI_Complex&lt;/code&gt; as excerpted below from &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;star-solo github&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- soloType input options:
    - CB_UMI_Simple   ... (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium.
    - CB_UMI_Complex  ... one UMI of fixed length, but multiple Cell Barcodes of varying length, as well as adapters sequences are allowed in read2 only, e.g. inDrop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Microwell-seq uses three separate barcodes with adaptors aside them rather than a single barcode. Generating their three white lists requires reading through the methods in &lt;a href=&#34;https://doi.org/10.1016/j.cell.2018.02.001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mapping the Mouse Cell Atlas by Microwell-Seq&lt;/a&gt;. NOTE the results only showed 5&amp;rsquo; to 3&amp;rsquo; strands, while barcodes 2 and 3 were presented on the 3&amp;rsquo; to 5&amp;rsquo; strands and reversed when being transcribed onto the beads, we have to take the complement and reverse the resultant sequence. Below successfully accomplished the three white lists step by step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download table S1 of paper &lt;a href=&#34;https://doi.org/10.1016/j.cell.2018.02.001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mapping the Mouse Cell Atlas by Microwell-Seq&lt;/a&gt; containing the sequences of well-specific barcodes. The 1st barcode is one of A1-96; the 2nd barcode is one of B1-96; the 3rd barcode is one of C1-96&lt;/li&gt;
&lt;li&gt;Take A1 &lt;code&gt;TTTAGGGATAACAGGGTAATAAGCAGTGGTATCAACGCAGAGTACGTTTTAGGCGACTCACTACAGGG&lt;/code&gt; as example. We first remove adaptor whose sequence can be seen in the &lt;a href=&#34;https://teichlab.github.io/scg_lib_structs/methods_html/Microwell-seq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Step-by-step generation of Indexed-Beads-seqA:
&amp;quot; section of Microwell-seq github introduction&lt;/a&gt;, which is the sequences beside [barcode1] in &lt;code&gt;5&#39;-TTTAGGGATAACAGGGTAATAAGCAGTGGTATCAACGCAGAGTACGT[barcode1]CGACTCACTACAGGG -3&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After removing adaptor the barcode inside A1 is &amp;ldquo;TTTTAGG&amp;rdquo;. That is all for A1.&lt;/li&gt;
&lt;li&gt;But for B1-96 and C1-96 barcodes, we need remove adaptor as above and further get the reverse complementary of them. Please note the direction of sequence listed in the table S1 downloaded above and that of the adaptor in  &lt;a href=&#34;https://teichlab.github.io/scg_lib_structs/methods_html/Microwell-seq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Step-by-step generation of Indexed-Beads-seqA:&amp;rdquo; section of Microwell-seq github introduction&lt;/a&gt;. Also check directions of the raw reads in &lt;a href=&#34;https://trace.ncbi.nlm.nih.gov/Traces/?view=run_browser&amp;amp;page_size=10&amp;amp;acc=SRR9843415&amp;amp;display=reads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sra of GSM3980130: Adult-Cervix1; Homo sapiens; RNA-Seq (SRR9843415)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;soloCBposition&lt;/code&gt; and &lt;code&gt;soloUMIposition&lt;/code&gt; of Starsolo needs input in this pattern (0_0_0_5) to know the start and end of barcodes and UMI. See &lt;a href=&#34;https://teichlab.github.io/scg_lib_structs/methods_html/Microwell-seq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Library sequencing:&amp;rdquo; section of Microwell-seq github introduction&lt;/a&gt; and &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#complex-barcodes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Complex barcodes:&amp;rdquo; section of Star-Solo github introduction&lt;/a&gt;. For example: 0_0_0_5 means the barcode starts at bp 0 and ends at bp 5.&lt;/li&gt;
&lt;li&gt;Because there are 3 seperate barcodes, the wl option in &amp;ldquo;config.yaml&amp;rdquo; needs to specify 3 different files corresponding to the 3 barcode segments.&lt;/li&gt;
&lt;li&gt;Importantly, in the &lt;code&gt;--readFilesIn&lt;/code&gt; option, the 1st file has to be cDNA read, and the 2nd file has to be the barcode (cell+UMI) read.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of the configurations are copied from the &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STARsolo guide on github&lt;/a&gt;. That gives&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r1.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r2.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{star_index}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;star_index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mapped_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;star mapping...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;4:00:00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;STAR --genomeDir &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input.idx}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --runThreadN &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{threads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloType CB_UMI_Complex &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBposition 0_0_0_5 0_21_0_26 0_42_0_47 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloUMIposition 0_48_0_53 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBwhitelist &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[wl]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --clipAdapterType CellRanger4 --outFilterScoreMin 10 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBmatchWLtype 1MM_multi &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloUMIfiltering MultiGeneUMI_CR --soloUMIdedup 1MM_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloFeatures Gene GeneFull SJ --soloCellFilter EmptyDrops_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloMultiMappers EM &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --readFilesIn &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[1]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --readFilesCommand &amp;#39;gunzip -c&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --outFileNamePrefix &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>üß¨ Quantify hERV and transgenes from Bulk-RNAseq</title>
      <link>http://localhost:1313/post/01.bulkrnaseq_allow_herv_quantification/</link>
      <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/01.bulkrnaseq_allow_herv_quantification/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see source codes in &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt; that can be deploied in Cloud Cluster Computational platform and local desktops, and allows for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;batch computaion with tunable batch size&lt;/li&gt;
&lt;li&gt;automatic environment setting up&lt;/li&gt;
&lt;li&gt;file preprocessing&lt;/li&gt;
&lt;li&gt;QC&lt;/li&gt;
&lt;li&gt;index buidling, alignment and feature counting by either &lt;code&gt;subread&lt;/code&gt; or &lt;code&gt;salmon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The github repo also contains &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/example_usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usage examples using &lt;code&gt;SLURM&lt;/code&gt; or &lt;code&gt;LSF&lt;/code&gt; job scheduler&lt;/a&gt; and &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/utils&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;handy utility tools&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-hervs-and-transgenes&#34;&gt;What are hERVs and transgenes&lt;/h2&gt;
&lt;p&gt;Human Endogenous Retroviruses (hERVs) are ancient viral sequences embedded in the human genome. The roles of hERVs in gene regulation, immunity, development and cancer are under intense research. Transgenes including GFP, CRE, Luciferase, rtTA/Tet-On/Tet-Off and epitopically expressed genes are common targets to be quantified in sample from transgenic mouse models.&lt;/p&gt;
&lt;h2 id=&#34;how-to-quantify-them&#34;&gt;How to quantify them&lt;/h2&gt;
&lt;p&gt;To quantify them, we of course need modify fasta and gtf files to include the their sequencing and annotation. Also, because their sequencing reads are frequently repetitive or overlaping with host genome, we need a feature quantification algorithm to handle multimapping commonly seen for HERV and transgenes.&lt;/p&gt;
&lt;h3 id=&#34;their-fasta-and-gtf&#34;&gt;Their fasta and gtf&lt;/h3&gt;
&lt;p&gt;The transgenes can be included as chromosomes in fasta as below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; EGFP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCG
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GACCCTGAAGTTCATCTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACG
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CGAGCTGTACAAGTAA
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The transgenes are formated as below in gtf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EGFP    self    exon    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;720&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;EGFP&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cre     self    exon    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;1023&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cre&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ERT2    self    exon    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;931&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;ERT2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The hERV sequences are already in reference genome, but their gtf need be added as below. We will talk about &lt;strong&gt;&lt;a href=&#34;willbecomposedsoon&#34;&gt;how to generate the hERV gtf matching the latest reference genome in another blog&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr10   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3083835&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3085549&lt;/span&gt; 4.5     -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_dc1fbd39-e43b-4ac4-90ef-1da20b1d6249&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr10:LTR/ERVL-MaLR:ORR1A0:3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr10   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3114480&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3115385&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;       -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_c49d8024-0b45-46a9-bcaa-c44f7a305a03&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr10:LTR/ERVK:RLTR13F:8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr10   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3122665&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3123530&lt;/span&gt; 13.8    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_5154950a-1e53-4528-a5cf-37d121e3e1a4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr10:LTR/ERVK:RLTR13D6:11&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr11   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3055489&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3061982&lt;/span&gt; 25.9    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_f6a34047-357d-4ed5-9744-eaf4c862be26&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr11:LTR/ERVK:IAPLTR3-int:1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr11   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3139464&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3140302&lt;/span&gt; 11.7    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_ad8b23ab-de54-4f73-be4d-f8405ad13e66&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr11:LTR/ERVK:RLTR33:3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr11   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3410867&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3413285&lt;/span&gt; 16.9    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_ec06076e-c8d0-4a94-8cfa-358f352bb1e8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr11:LTR/ERV1:RLTR14-int:7&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr12   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3052672&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3059141&lt;/span&gt; 1.6     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_8ea0db28-2cd0-4d7e-b151-b5b6480ee320&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr12:LTR/ERVK:IAPEz-int:1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr12   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3065049&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3072337&lt;/span&gt; 27.3    -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_f3379b4a-cdfa-4b24-a4c9-5dacbdaf004c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr12:LTR/ERV1:MMERGLN-int:2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr12   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3084084&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3084938&lt;/span&gt; 5.8     -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_062a5737-d991-4220-9648-33c43ad467a2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr12:LTR/ERVK:IAPEz-int:4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;how-tools-deal-with-multimapping&#34;&gt;How tools deal with multimapping&lt;/h3&gt;
&lt;p&gt;Below list common feature count/qunatification tools emphasizing on the core algorithms they wrapped to deal with multimapping. &lt;a href=&#34;https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-017-4002-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;These common tools have similar quantification accuracy&lt;/a&gt;.&lt;/p&gt;














&lt;table class=&#34;table-auto w-full&#34;&gt;
  
    
    
    &lt;thead&gt;
      &lt;tr&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;Tool&lt;/th&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;Default(option)&lt;/th&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;Core algorithm&lt;/th&gt;  &lt;/tr&gt;
    &lt;/thead&gt;
  
  &lt;tbody&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;HTSeq-count&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;discard(&amp;ndash;nonunique=all/fraction)&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;fraction&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;featureCounts&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;discard(-M &amp;ndash;fraction)&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;fraction&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;RSEM&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;Salmon&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;(Bayesian) EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;kallisto&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;StringTie&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;TEtranscripts&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;Telescope&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM with MAP&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
  &lt;/tbody&gt;
  
    &lt;caption class=&#34;table-caption&#34;&gt;&lt;strong&gt;Table 1. Multimapping options and algorithms of tools&lt;/strong&gt;&lt;/caption&gt;
  
&lt;/table&gt;

&lt;p&gt;They by default may simply discard multimapping reads, which ignores most of hERVs. With carefully specified arguments, they either distribute read counts equally among certian features (fraction) or estimate using EM algorithm.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;why-em-algorithm-for-multimapping&#34;&gt;Why EM algorithm for multimapping&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Fraction&amp;rdquo; algorithm overlooked how likely the reads can match with reference sequences. The biological prior information, if reasonably exploited, can significantly improve the multimapping quantification. Beatifully, multimapping by nature is similar to the problem of Gaussian Mixtures and EM has been proved to resolve Gaussian Mixture Model (GMM) well.&lt;/p&gt;
&lt;h4 id=&#34;em-is-proved-to-resolve-gmm-well&#34;&gt;EM is proved to resolve GMM well&lt;/h4&gt;
&lt;p&gt;GMM describes a set of data points of which each comes from one of several Gaussian distributions, but we don&amp;rsquo;t know which one. This missing information makes direct estimation (like via maximum likelihood) of the Gaussian parameters hard. EM solve this by iterating below E and M steps until converge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;E-step (Expectation): Use initiallized parameter to compute the &lt;strong&gt;posterior probability (sounds like bayesian, but it is not in standard EM)&lt;/strong&gt; that each data point was generated by each Gaussian (i.e., the responsibility Œ≥ for each component).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M-step (Maximization): Update the parameters (œÄ, Œº, œÉ¬≤) by performing &lt;strong&gt;weighted MLE&lt;/strong&gt; using the expected values (responsibilities) computed in the E-step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multimapping-is-modeled-as-mixtures-of-distributions-that-account-for-mapping-bias&#34;&gt;Multimapping is modeled as mixtures of distributions that account for mapping bias&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nature.com/articles/nmeth.4197&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Salmon model &lt;/a&gt; describes a set of fragments (seqeuncing reads) of which each fragment &lt;em&gt;f&lt;/em&gt; originates from one of the several transcripts &lt;em&gt;t&lt;/em&gt; at a probability distribution  $P(t \mid f)$ 
, but we don&amp;rsquo;t know which one. Thus EM goes:&lt;/p&gt;
&lt;h5 id=&#34;e-step&#34;&gt;&lt;em&gt;E-Step&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;For each fragment  $f$ 
 and transcript  $t$ 
:&lt;/p&gt;

$$
P(t \mid f) = \frac{\alpha_t \cdot P(f \mid t)}{\sum_{t&#39;} \alpha_{t&#39;} \cdot P(f \mid t&#39;)}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\alpha_t$ 
: Current estimate of the relative abundance of transcript  $t$ 
.&lt;/li&gt;
&lt;li&gt; $P(f \mid t)$ 
: Probability of observing fragment  $f$ 
 given transcript  $t$ 
, incorporating bias corrections.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;bias-corrections&#34;&gt;&lt;em&gt;Bias Corrections&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;The fragment-transcript probability is modeled as:&lt;/p&gt;

$$
P(f \mid t) = P_{\text{len}}(l_f \mid t) \cdot P_{\text{pos}}(p_f \mid t) \cdot P_{\text{seq}}(s_f \mid t)
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $l_f$ 
: Length of fragment  $f$ 
.&lt;/li&gt;
&lt;li&gt; $p_f$ 
: Position of fragment  $f$ 
 on transcript  $t$ 
.&lt;/li&gt;
&lt;li&gt; $s_f$ 
: Sequence content of fragment  $f$ 
.&lt;/li&gt;
&lt;li&gt; $P_{\text{len}}$ 
: Probability of fragment length, modeling the empirical fragment length distribution.&lt;/li&gt;
&lt;li&gt; $P_{\text{pos}}$ 
: Positional bias model, capturing biases in fragment start locations.&lt;/li&gt;
&lt;li&gt; $P_{\text{seq}}$ 
: Sequence-specific bias model, correcting for nucleotide composition effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importantly, the bias models:  $P_{\text{len}}$ 
,  $P_{\text{pos}}$ 
 and  $P_{\text{seq}}$ 
 are not directly updated by the EM algorithm during transcript abundance estimation. Instead, these bias models are learned once, typically in a preprocessing or auxiliary phase before the EM iterations begin. The EM algorithm then uses the fixed values of these bias models to compute the probability  $P(f \mid t)$ 
 in the E-step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The only parameters updated by EM are the relative abundances  $\alpha_t$ 
 of the transcripts.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;m-step&#34;&gt;&lt;em&gt;M-Step&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;Update the abundance estimates:&lt;/p&gt;

$$
\alpha_t = \sum_f P(t \mid f)
$$


&lt;p&gt;Then normalize:&lt;/p&gt;

$$
\sum_t \alpha_t = 1
$$


&lt;hr&gt;
&lt;h2 id=&#34;quantificaiton-using-salmon&#34;&gt;Quantificaiton using Salmon&lt;/h2&gt;
&lt;p&gt;Now we see EM algorithm superior than fraction algorithms in quantifing multimappings since EM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is well suitable for estimating parameters in Gaussian Mixture Models, which is similar to the multimapping mathematical model&lt;/li&gt;
&lt;li&gt;takes multimapping mathematical models of mapping probability that accounts for the mapping bias&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We implemented Salmon since it allows both EM and full bayesian EM. We will talk about &lt;a href=&#34;donesoon&#34;&gt;EM (with MLE), EM with MAP and bayesian EM&lt;/a&gt; as well as &lt;a href=&#34;donesoon&#34;&gt;Frequentist vs Bayesian&lt;/a&gt; in other blogs.&lt;/p&gt;
&lt;p&gt;Please see source codes in &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt; that can be deploied in Cloud Cluster Computational platform and local desktops, and allows for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;batch computaion with tunable batch size&lt;/li&gt;
&lt;li&gt;automatic environment setting up&lt;/li&gt;
&lt;li&gt;file preprocessing&lt;/li&gt;
&lt;li&gt;QC&lt;/li&gt;
&lt;li&gt;index buidling, alignment and feature counting by either &lt;code&gt;subread&lt;/code&gt; or &lt;code&gt;salmon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The github repo also contains &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/example_usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usage examples using &lt;code&gt;SLURM&lt;/code&gt; or &lt;code&gt;LSF&lt;/code&gt; job scheduler&lt;/a&gt; and &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/utils&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;handy utility tools&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;excerpt-scripts&#34;&gt;Excerpt scripts&lt;/h3&gt;
&lt;p&gt;Below excerpt scripts call each needed analysis step specified as &lt;code&gt;ANALYSIS_STEP&lt;/code&gt; array, including file preprocessing, index buidling by &lt;code&gt;build_index()&lt;/code&gt;, QC by &lt;code&gt;qc_all()&lt;/code&gt;, alignment by &lt;code&gt;align_all()&lt;/code&gt; if using &lt;code&gt;subread&lt;/code&gt;, and feature counting by &lt;code&gt;count_all()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ANALYSIS_STEP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-ing...&amp;#34;&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;# for the first 2, do not run if they are in a child/forked process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			index&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CHILD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; build_index&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			convert&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CHILD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; get_pairs_all&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			qc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; qc_all &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			align&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; align_all &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			count&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; count_all &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;finished &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some of the core functions in the anylysis are below:&lt;/p&gt;
&lt;h4 id=&#34;build-index&#34;&gt;build index&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;salmon_build_index&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# supports multiple transcripts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# get dir name for the index, which is the transcript names seperated by a hyphen(-)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# eg. for erv.fa and line.fa, you get: erv-line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;salmon/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TRANSCRIPTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[*]%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;building salmon index @: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# salmon requires a decoy, which in this case is the entire reference genome&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;building decoys...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;^&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REF_GENOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; -f &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			sed -i.bak -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/&amp;gt;//g&amp;#39;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# salmon requires all the transcripts being quantified to be concat into one file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_gentrome.fa&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;building gentrome...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			cat &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TRANSCRIPTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REF_TRANSCRIPT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REF_GENOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fa&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# adding --gencode flag due to salmon doing some preprocessing for it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# this flag does nothing for none gencode files (I think)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon index -t &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.fa -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt; -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; --gencode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;build_index&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ALIGN_METHOD&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		subread&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; subread_build_index &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; salmon_build_index &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;qc&#34;&gt;QC&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fastp_qc&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# results stored in /tmp/{name of the source}/qc/* and all end in *.qc.fq.gz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if pair ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			./fastp -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fq.gz&amp;#34;&lt;/span&gt; -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;				-I &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fq.gz&amp;#34;&lt;/span&gt; -O &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;				-j &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.json&amp;#34;&lt;/span&gt; -h &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if single ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			./fastp -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fq.gz&amp;#34;&lt;/span&gt; -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;				-j &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.json&amp;#34;&lt;/span&gt; -h &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;qc_all&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# only supports fastp as of now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;QC_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;QC_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;qc-ing with &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$QC_METHOD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;, &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r r1 r2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# loop over pair file, csv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ALIGN_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$r1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;#if salmon quant already exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;qc-ing &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; and &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$QC_METHOD&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				fastp&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; fastp_qc &lt;span class=&#34;nv&#34;&gt;$r1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$r2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&#34;nv&#34;&gt;$PAIR_FILE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;quantification&#34;&gt;quantification&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;salmon_quant&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# get the same index_name as specified in &amp;#34;salmon_build_index()&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;salmon/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TRANSCRIPTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[*]%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;#salmon outputs into a dir, so we check for that instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;#results stored in results/salmon/*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/salmon/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir results/salmon/&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if pair ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			salmon quant -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; -l A -1 &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; -2 &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; --validateMappings -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/salmon/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;#sleep 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if single ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			salmon quant -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; -l A -r &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; --validateMappings -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/salmon/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;#sleep 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;salmon_count&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;, &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r r1 r2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon_quant &lt;span class=&#34;nv&#34;&gt;$r1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$r2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&#34;nv&#34;&gt;$PAIR_FILE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;count_all&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ALIGN_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ALIGN_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ALIGN_METHOD&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		subread&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; subread_count &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; salmon_count
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
