<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computational Blogs | Jiyuan Liu</title>
    <link>http://localhost:1313/post/</link>
      <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Computational Blogs</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 28 May 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu6671943710606299486.png</url>
      <title>Computational Blogs</title>
      <link>http://localhost:1313/post/</link>
    </image>
    
    <item>
      <title>üß¨ Dynamic RNA velocity model-- (1) math solutions</title>
      <link>http://localhost:1313/post/11d.velocity_dynamic_model_derivation/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11d.velocity_dynamic_model_derivation/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The steady‚Äëstate model‚Äôs reliance on true steady states is at odds with &lt;a href=&#34;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1010492&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;known biophysical behavior&lt;/a&gt;. The dynamic model removes this requirement to broaden RNA velocity‚Äôs applicability but inevitably introduces new assumptions that may not hold for every dataset. Effective use of the dynamic model therefore demands a clear understanding of its strengths and limitations. Our blog series toward this goal begins by delving into the mathematical foundations of the dynamic model.&lt;/p&gt;
&lt;h3 id=&#34;symbol-definitions&#34;&gt;Symbol definitions&lt;/h3&gt;
&lt;p&gt;Please refer to the &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0591-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nature Biotechnology paper&lt;/a&gt; for the definitions of the symbols used in this derivation.&lt;/p&gt;
&lt;h3 id=&#34;dynamic-solutions-for-rna-velocity-model&#34;&gt;Dynamic Solutions for RNA Velocity Model&lt;/h3&gt;
&lt;p&gt;To derive the solution for s(t) from the given system of differential equations, we will follow a two-step process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solve the first differential equation for u(t) using the initial condition u(t‚ÇÄ)=u‚ÇÄ.&lt;/li&gt;
&lt;li&gt;Substitute the expression for u(t) into the second differential equation and then solve for s(t) using the initial condition s(t‚ÇÄ)=s‚ÇÄ.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;step-1-solve-for-ut&#34;&gt;Step 1: Solve for u(t)&lt;/h4&gt;
&lt;p&gt;The first differential equation is:&lt;/p&gt;
  
$$
\frac{du(t)}{dt}=\alpha-\beta u(t)
$$  


&lt;p&gt;Rearrange it into the standard form for a first-order linear ODE:&lt;/p&gt;
  
$$
\frac{du(t)}{dt}+\beta u(t)=\alpha
$$  


&lt;p&gt;This is a linear first-order differential equation of the form $\frac{dy}{dx}+P(x)y=Q(x)$, where P(t)=Œ≤ and Q(t)=Œ±.
The integrating factor (IF) is $e^{\int P(t)dt}=e^{\int \beta dt}=e^{\beta t}$.&lt;/p&gt;
&lt;p&gt;Multiply the entire equation by the integrating factor:&lt;/p&gt;
  
$$
e^{\beta t}\frac{du(t)}{dt}+\beta u(t)e^{\beta t}=\alpha e^{\beta t}
$$  


&lt;p&gt;The left side is the derivative of the product $(u(t)e^{\beta t})$:&lt;/p&gt;
  
$$
\frac{d}{dt}(u(t)e^{\beta t})=\alpha e^{\beta t}
$$  


&lt;p&gt;Integrate both sides with respect to t:&lt;/p&gt;
  
$$
\int \frac{d}{dt}(u(t)e^{\beta t})dt=\int \alpha e^{\beta t}dt
$$
$$
u(t)e^{\beta t}=\frac{\alpha}{\beta}e^{\beta t}+C_1
$$  


&lt;p&gt;Now, solve for u(t):&lt;/p&gt;
  
$$
u(t)=\frac{\alpha}{\beta}+C_1e^{-\beta t}
$$  


&lt;p&gt;Use the initial condition u(t‚ÇÄ)=u‚ÇÄ to find C‚ÇÅ:&lt;/p&gt;
  
$$
u_0=\frac{\alpha}{\beta}+C_1e^{-\beta t_0}
$$
$$
C_1e^{-\beta t_0}=u_0-\frac{\alpha}{\beta}
$$
$$
C_1=(u_0-\frac{\alpha}{\beta})e^{\beta t_0}
$$  


&lt;p&gt;Substitute C‚ÇÅ back into the equation for u(t):&lt;/p&gt;
  
$$
u(t)=\frac{\alpha}{\beta}+(u_0-\frac{\alpha}{\beta})e^{\beta t_0}e^{-\beta t}
$$
$$
u(t)=\frac{\alpha}{\beta}+(u_0-\frac{\alpha}{\beta})e^{-\beta(t-t_0)}
$$  


&lt;h4 id=&#34;step-2-solve-for-st&#34;&gt;Step 2: Solve for s(t)&lt;/h4&gt;
&lt;p&gt;Now that we have u(t), we can solve the second differential equation:&lt;/p&gt;
  
$$
\frac{ds(t)}{dt}=\beta u(t)-\gamma s(t)
$$  


&lt;p&gt;Substitute the expression for u(t):&lt;/p&gt;
  
$$
\frac{ds(t)}{dt}=\beta[\frac{\alpha}{\beta}+(u_0-\frac{\alpha}{\beta})e^{-\beta(t-t_0)}]-\gamma s(t)
$$
$$
\frac{ds(t)}{dt}+\gamma s(t)=\alpha+(u_0\beta-\alpha)e^{-\beta(t-t_0)}
$$  


&lt;p&gt;This is again a linear first-order differential equation. The integrating factor is $e^{\gamma t}$.&lt;/p&gt;
&lt;p&gt;Multiply both sides by the integrating factor:&lt;/p&gt;
  
$$
\frac{d}{dt}(s(t)e^{\gamma t})=\alpha e^{\gamma t}+(u_0\beta-\alpha)e^{\gamma t}e^{-\beta(t-t_0)}
$$  


&lt;p&gt;Integrate both sides:&lt;/p&gt;
  
$$
s(t)e^{\gamma t}=\frac{\alpha}{\gamma}e^{\gamma t}+(u_0\beta-\alpha)\int e^{\gamma t}e^{-\beta(t-t_0)}dt+C_2
$$  


&lt;p&gt;Simplify the integral:&lt;/p&gt;
  
$$
s(t)e^{\gamma t}=\frac{\alpha}{\gamma}e^{\gamma t}+(u_0\beta-\alpha)e^{\beta t_0}\int e^{(\gamma-\beta)t}dt+C_2
$$
$$
s(t)e^{\gamma t}=\frac{\alpha}{\gamma}e^{\gamma t}+(u_0\beta-\alpha)e^{\beta t_0}\frac{e^{(\gamma-\beta)t}}{\gamma-\beta}+C_2
$$  


&lt;p&gt;Solve for s(t):&lt;/p&gt;
  
$$
s(t)=\frac{\alpha}{\gamma}+(u_0\beta-\alpha)e^{\beta t_0}\frac{e^{-\beta t}}{\gamma-\beta}+C_2e^{-\gamma t}
$$  


&lt;p&gt;Use the initial condition s(t‚ÇÄ)=s‚ÇÄ to find C‚ÇÇ:&lt;/p&gt;
  
$$
s_0=\frac{\alpha}{\gamma}+(u_0\beta-\alpha)\frac{e^{-\beta t_0+\beta t_0}}{\gamma-\beta}+C_2e^{-\gamma t_0}
$$
$$
C_2e^{-\gamma t_0}=s_0-\frac{\alpha}{\gamma}-(u_0\beta-\alpha)\frac{1}{\gamma-\beta}
$$
$$
C_2=[s_0-\frac{\alpha}{\gamma}-(u_0\beta-\alpha)\frac{1}{\gamma-\beta}]e^{\gamma t_0}
$$  


&lt;p&gt;The complete solution for s(t) is:&lt;/p&gt;
  
$$
s(t)=\frac{\alpha}{\gamma}+\frac{u_0\beta-\alpha}{\gamma-\beta}e^{-\beta(t-t_0)}+[s_0-\frac{\alpha}{\gamma}-\frac{u_0\beta-\alpha}{\gamma-\beta}]e^{-\gamma(t-t_0)}
$$  


&lt;h4 id=&#34;special-case-if-Œ≥Œ≤&#34;&gt;Special case: If Œ≥=Œ≤&lt;/h4&gt;
&lt;p&gt;If Œ≥=Œ≤, the integral becomes:&lt;/p&gt;
  
$$
\int(Œ≤u_0-Œ±)e^{(Œ≥-Œ≤)t+Œ≤t_0}dt=(Œ≤u_0-Œ±)e^{Œ≤t_0}\int dt=(Œ≤u_0-Œ±)e^{Œ≤t_0}t
$$  


&lt;p&gt;Then,&lt;/p&gt;
  
$$
s(t)e^{Œ≥t}=\frac{Œ±}{Œ≥}e^{Œ≥t}+(Œ≤u_0-Œ±)e^{Œ≤t_0}t+C_2
$$
$$
s(t)=\frac{Œ±}{Œ≥}+(Œ≤u_0-Œ±)te^{-Œ≥t+Œ≤t_0}+C_2e^{-Œ≥t}
$$  


&lt;p&gt;Since Œ≥=Œ≤:&lt;/p&gt;
  
$$
s(t)=\frac{Œ±}{Œ≥}+(Œ≥u_0-Œ±)te^{-Œ≥(t-t_0)}+C_2e^{-Œ≥t}
$$
$$
s(t)=\frac{Œ±}{Œ≥}+(Œ≥u_0-Œ±)(t_0+œÑ)e^{-Œ≥œÑ}+C_2e^{-Œ≥(t_0+œÑ)}
$$  


&lt;p&gt;This scenario is not covered by the target equation, which explicitly has a denominator (Œ≥‚àíŒ≤), implying Œ≥‚â†Œ≤.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Dynamic RNA velocity model-- (2) parameter inference</title>
      <link>http://localhost:1313/post/11e.velocity_dynamic_model_inference/scvelo_parameter_inference/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11e.velocity_dynamic_model_inference/scvelo_parameter_inference/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;To effectively apply the dynamic model for revealing RNA velocity in single-cell RNA-seq data, this second installment of our blog series takes a deep dive into its parameter inference using a two-stage EM algorithm. In this approach, latent time is initially assigned using an explicit formula, and then refined through standard optimization during the &amp;ldquo;Expectation&amp;rdquo; step of the final EM iteration.&lt;/p&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;section A) and B) derives the equations (9-11) in the &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0591-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scVelo paper&lt;/a&gt;, which together give the explicit formula for latent time  $\tau$ 
 in terms of unspliced RNA  $u$ 
, spliced RNA  $s$ 
, and kinetic parameters  $\alpha^{(k)}$ 
,  $\beta$ 
, and  $\gamma$ 
&lt;/li&gt;
&lt;li&gt;section C) explains why the explicit formula is less accurate than exact optimization&lt;/li&gt;
&lt;li&gt;section D) compares the EM implementation for scVelo parameter inference with classical Gaussian Mixture Model (GMM) EM algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;symbol-definitions&#34;&gt;Symbol definitions&lt;/h3&gt;
&lt;p&gt;Please refer to the &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0591-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scVelo paper&lt;/a&gt; for the definitions of the symbols used in this derivation.&lt;/p&gt;
&lt;h1 id=&#34;a-derive-equations-9-10-in-scvelo-paperhttpswwwnaturecomarticless41587-020-0591-3&#34;&gt;A) Derive equations (9-10) in &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0591-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scVelo paper&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s derive the relationship $\tilde{s}(t) - \tilde{s}_\infty = (\tilde{s}_0 - \tilde{s}_\infty)e^{-\gamma\tau}$ from the provided information.&lt;/p&gt;
&lt;h2 id=&#34;given-information&#34;&gt;Given Information&lt;/h2&gt;
&lt;h3 id=&#34;system-of-differential-equations&#34;&gt;System of Differential Equations:&lt;/h3&gt;

$$
\frac{du(t)}{dt} = \alpha^{(k)} - \beta u(t)
$$



$$
\frac{ds(t)}{dt} = \beta u(t) - \gamma s(t)
$$


&lt;h3 id=&#34;solutions-for-ut-and-st&#34;&gt;Solutions for u(t) and s(t):&lt;/h3&gt;

$$
u(t) = u_0 e^{-\beta\tau} + \frac{\alpha^{(k)}}{\beta} (1 - e^{-\beta\tau})
$$


&lt;p&gt;(This can be rewritten as $u(t) = \frac{\alpha^{(k)}}{\beta} + (u_0 - \frac{\alpha^{(k)}}{\beta})e^{-\beta\tau}$)&lt;/p&gt;

$$
s(t) = s_0 e^{-\gamma\tau} + \frac{\alpha^{(k)}}{\gamma} (1 - e^{-\gamma\tau}) + \left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right) (e^{-\gamma\tau} - e^{-\beta\tau})
$$


&lt;p&gt;(This can be expanded to $s(t) = \frac{\alpha^{(k)}}{\gamma} + (s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta})e^{-\gamma\tau} - (\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta})e^{-\beta\tau}$)&lt;/p&gt;
&lt;p&gt;Where $\tau = t - t_0$.&lt;/p&gt;
&lt;h3 id=&#34;steady-state-values&#34;&gt;Steady-State Values:&lt;/h3&gt;
&lt;p&gt;From setting the derivatives to zero:&lt;/p&gt;

$$
u_\infty^{(k)} = \frac{\alpha^{(k)}}{\beta}
$$



$$
s_\infty = \frac{\beta u_\infty^{(k)}}{\gamma} = \frac{\alpha^{(k)}}{\gamma}
$$


&lt;h3 id=&#34;new-variable-definitions&#34;&gt;New Variable Definitions:&lt;/h3&gt;

$$
\tilde{\beta} := \frac{\beta}{\gamma - \beta}
$$



$$
\tilde{s}(t) := s(t) - \tilde{\beta}u(t)
$$



$$
\tilde{s}_\infty := s_\infty - \tilde{\beta}u_\infty^{(k)}
$$


&lt;h2 id=&#34;derivation-steps&#34;&gt;Derivation Steps&lt;/h2&gt;
&lt;p&gt;Our goal is to demonstrate: $\tilde{s}(t) - \tilde{s}_\infty = (\tilde{s}_0 - \tilde{s}_\infty)e^{-\gamma\tau}$.&lt;/p&gt;
&lt;h3 id=&#34;1-express-ut-in-a-convenient-form&#34;&gt;1. Express u(t) in a convenient form:&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s rewrite u(t) using its steady-state value $u_\infty^{(k)}$:&lt;/p&gt;

$$
u(t) = u_\infty^{(k)} + (u_0 - u_\infty^{(k)})e^{-\beta\tau}
$$


&lt;h3 id=&#34;2-substitute-st-and-ut-into-the-definition-of-tildest&#34;&gt;2. Substitute s(t) and u(t) into the definition of $\tilde{s}(t)$:&lt;/h3&gt;

$$
\tilde{s}(t) = \left[\frac{\alpha^{(k)}}{\gamma} + \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau} - \left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\beta\tau}\right] - \tilde{\beta}\left[u_\infty^{(k)} + (u_0 - u_\infty^{(k)})e^{-\beta\tau}\right]
$$


&lt;p&gt;Now, substitute the definition of $\tilde{\beta} = \frac{\beta}{\gamma - \beta}$ and $u_\infty^{(k)} = \frac{\alpha^{(k)}}{\beta}$:&lt;/p&gt;

$$
\tilde{s}(t) = \left[\frac{\alpha^{(k)}}{\gamma} + \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau} - \left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\beta\tau}\right] - \frac{\beta}{\gamma - \beta}\left[\frac{\alpha^{(k)}}{\beta} + \left(u_0 - \frac{\alpha^{(k)}}{\beta}\right)e^{-\beta\tau}\right]
$$


&lt;p&gt;Let&amp;rsquo;s simplify the terms multiplied by $\tilde{\beta}$:&lt;/p&gt;

$$
\tilde{\beta}u_\infty^{(k)} = \frac{\beta}{\gamma - \beta} \cdot \frac{\alpha^{(k)}}{\beta} = \frac{\alpha^{(k)}}{\gamma - \beta}
$$



$$
\tilde{\beta}(u_0 - u_\infty^{(k)}) = \frac{\beta}{\gamma - \beta}\left(u_0 - \frac{\alpha^{(k)}}{\beta}\right) = \frac{\beta}{\gamma - \beta}\left(\frac{\beta u_0 - \alpha^{(k)}}{\beta}\right) = \frac{\beta u_0 - \alpha^{(k)}}{\gamma - \beta}
$$


&lt;p&gt;Substitute these back into the expression for $\tilde{s}(t)$:&lt;/p&gt;

$$
\tilde{s}(t) = \left[\frac{\alpha^{(k)}}{\gamma} + \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau} - \left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\beta\tau}\right] - \left[\frac{\alpha^{(k)}}{\gamma - \beta} + \left(\frac{\beta u_0 - \alpha^{(k)}}{\gamma - \beta}\right)e^{-\beta\tau}\right]
$$


&lt;h3 id=&#34;3-cancel-the-e-betatau-terms&#34;&gt;3. Cancel the $e^{-\beta\tau}$ terms:&lt;/h3&gt;
&lt;p&gt;Observe the coefficients of $e^{-\beta\tau}$:&lt;/p&gt;

$$
-\left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right) - \left(\frac{\beta u_0 - \alpha^{(k)}}{\gamma - \beta}\right)
$$


&lt;p&gt;Since $\frac{\beta u_0 - \alpha^{(k)}}{\gamma - \beta} = -\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}$, this simplifies to:&lt;/p&gt;

$$
-\left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right) - \left(-\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right) = -\left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right) + \left(\frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right) = 0
$$


&lt;p&gt;The terms containing $e^{-\beta\tau}$ indeed cancel out, as intended by the choice of $\tilde{\beta}$.&lt;/p&gt;
&lt;h3 id=&#34;4-simplify-tildest&#34;&gt;4. Simplify $\tilde{s}(t)$:&lt;/h3&gt;

$$
\tilde{s}(t) = \left(\frac{\alpha^{(k)}}{\gamma} - \frac{\alpha^{(k)}}{\gamma - \beta}\right) + \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau}
$$


&lt;p&gt;Let&amp;rsquo;s simplify the constant term:&lt;/p&gt;

$$
\frac{\alpha^{(k)}}{\gamma} - \frac{\alpha^{(k)}}{\gamma - \beta} = \alpha^{(k)}\left(\frac{1}{\gamma} - \frac{1}{\gamma - \beta}\right) = \alpha^{(k)}\left(\frac{(\gamma - \beta) - \gamma}{\gamma(\gamma - \beta)}\right) = \alpha^{(k)}\left(\frac{-\beta}{\gamma(\gamma - \beta)}\right) = -\frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}
$$


&lt;p&gt;So, we have:&lt;/p&gt;

$$
\tilde{s}(t) = -\frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)} + \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau}
$$


&lt;h3 id=&#34;5-calculate-tildes_0-and-tildes_infty&#34;&gt;5. Calculate $\tilde{s}_0$ and $\tilde{s}_\infty$:&lt;/h3&gt;
&lt;p&gt;Given  $u_\infty^{(k)} = \frac{\alpha^{(k)}}{\beta}$ 
,  $ s_\infty = \frac{\beta u_\infty^{(k)}}{\gamma} = \frac{\alpha^{(k)}}{\gamma}
$ 
 and the definition of $\tilde{s}_\infty$ and $\tilde{\beta}$, we derive below. You may also consider view $\tilde{s}_\infty$  as Steady-state of $\tilde{s}(t)$  ($\tau \to \infty$, $e^{-\gamma\tau} \to 0$ ).&lt;/p&gt;

$$
\tilde{s}_\infty = -\frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)} (= \lim_{\tau \to \infty} \tilde{s}(t) )
$$


&lt;p&gt;&lt;strong&gt;$\tilde{s}_0$ (Initial value of $\tilde{s}(t)$ at $\tau = 0$):&lt;/strong&gt;&lt;/p&gt;

$$
\tilde{s}_0 = s(t_0) - \tilde{\beta}u(t_0) = s_0 - \tilde{\beta}u_0 = s_0 - \frac{\beta}{\gamma - \beta}u_0
$$


&lt;h3 id=&#34;6-verify-the-target-relationship-tildest---tildes_infty--tildes_0---tildes_inftye-gammatau&#34;&gt;6. Verify the target relationship: $\tilde{s}(t) - \tilde{s}_\infty = (\tilde{s}_0 - \tilde{s}_\infty)e^{-\gamma\tau}$&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Left-Hand Side (LHS):&lt;/strong&gt;&lt;/p&gt;

$$
\tilde{s}(t) - \tilde{s}_\infty = \left(-\frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)} + \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau}\right) - \left(-\frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}\right)
$$



$$
\tilde{s}(t) - \tilde{s}_\infty = \left(s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta}\right)e^{-\gamma\tau}
$$


&lt;p&gt;&lt;strong&gt;Right-Hand Side (RHS):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, calculate $(\tilde{s}_0 - \tilde{s}_\infty)$:&lt;/p&gt;

$$
(\tilde{s}_0 - \tilde{s}_\infty) = \left(s_0 - \frac{\beta u_0}{\gamma - \beta}\right) - \left(-\frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}\right) = s_0 - \frac{\beta u_0}{\gamma - \beta} + \frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}
$$


&lt;p&gt;Now, multiply by $e^{-\gamma\tau}$:&lt;/p&gt;

$$
(\tilde{s}_0 - \tilde{s}_\infty)e^{-\gamma\tau} = \left(s_0 - \frac{\beta u_0}{\gamma - \beta} + \frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}\right)e^{-\gamma\tau}
$$


&lt;p&gt;Finally, let&amp;rsquo;s compare the coefficients of $e^{-\gamma\tau}$ from both the LHS and RHS. We need to confirm that:&lt;/p&gt;

$$
s_0 - \frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta} \text{ equals } s_0 - \frac{\beta u_0}{\gamma - \beta} + \frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}
$$


&lt;p&gt;Let&amp;rsquo;s simplify the terms without $s_0$:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From LHS coefficient:&lt;/strong&gt;&lt;/p&gt;

$$
-\frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)} - \beta u_0}{\gamma - \beta} = -\frac{\alpha^{(k)}}{\gamma} + \frac{\alpha^{(k)}}{\gamma - \beta} - \frac{\beta u_0}{\gamma - \beta}
$$
$$
= \alpha^{(k)}\left(\frac{1}{\gamma - \beta} - \frac{1}{\gamma}\right) - \frac{\beta u_0}{\gamma - \beta}
$$
$$
= \alpha^{(k)}\left(\frac{\gamma - (\gamma - \beta)}{\gamma(\gamma - \beta)}\right) - \frac{\beta u_0}{\gamma - \beta}
$$
$$
= \alpha^{(k)}\left(\frac{\beta}{\gamma(\gamma - \beta)}\right) - \frac{\beta u_0}{\gamma - \beta} = \frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)} - \frac{\beta u_0}{\gamma - \beta}
$$


&lt;p&gt;&lt;strong&gt;From RHS coefficient:&lt;/strong&gt;&lt;/p&gt;

$$
-\frac{\beta u_0}{\gamma - \beta} + \frac{\alpha^{(k)} \beta}{\gamma(\gamma - \beta)}
$$


&lt;p&gt;As you can see, the simplified coefficients from both sides are indeed identical.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By introducing the carefully chosen auxiliary variable $\tilde{\beta} = \frac{\beta}{\gamma - \beta}$, the transformation $\tilde{s}(t) = s(t) - \tilde{\beta}u(t)$ strategically eliminates the $e^{-\beta\tau}$ dependence from the solution of s(t). This simplification reveals a clean, exponential decay relationship for $\tilde{s}(t)$ towards its new steady-state value $\tilde{s}_\infty$, as expressed by:&lt;/p&gt;

$$
\tilde{s}(t) - \tilde{s}_\infty = (\tilde{s}_0 - \tilde{s}_\infty)e^{-\gamma\tau}
$$


&lt;p&gt;This shows how a more complex system can be transformed into a simpler, recognizable form by defining appropriate auxiliary variables.&lt;/p&gt;
&lt;h1 id=&#34;b-derivation-tau-in-equation-11-in-scvelo-paperhttpswwwnaturecomarticless41587-020-0591-3&#34;&gt;B) Derivation: $\tau$ in equation (11) in &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0591-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scVelo paper&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Above smoothly gives Inverse Relationship for $\tau$ in equation (10) in the &lt;a href=&#34;https://www.nature.com/articles/s41587-020-0591-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scVelo paper&lt;/a&gt;. Although equation (11) looks not obvious, it actually requires even simpler reasoning.&lt;/p&gt;
&lt;h2 id=&#34;derive-hahahugoshortcode494s38hbhb-in-equation-11&#34;&gt;Derive  $\tau$ 
 in equation (11)&lt;/h2&gt;

$$
\tau = -\frac{1}{\beta}\ln\left(\frac{u - u_\infty^{(k)}}{u_0 - u_\infty^{(k)}}\right)
$$


&lt;p&gt;This expression makes sense given the solution for  $u(t)$ 
 can be rewritten as below by substituting  $u_\infty^{(k)} = \frac{\alpha^{(k)}}{\beta}$ 
:&lt;/p&gt;

$$
u(t) = u_\infty^{(k)} + (u_0 - u_\infty^{(k)})e^{-\beta\tau}
$$


&lt;p&gt;If we solve this for  $\tau$ 
, we get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rearrange:  $u(t) - u_\infty^{(k)} = (u_0 - u_\infty^{(k)})e^{-\beta\tau}$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Divide both sides by  $(u_0 - u_\infty^{(k)})$ 
:  $\frac{u(t) - u_\infty^{(k)}}{u_0 - u_\infty^{(k)}} = e^{-\beta\tau}$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take natural log:  $\ln\left(\frac{u(t) - u_\infty^{(k)}}{u_0 - u_\infty^{(k)}}\right) = -\beta\tau$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solve for  $\tau$ 
:  $\tau = -\frac{1}{\beta}\ln\left(\frac{u(t) - u_\infty^{(k)}}{u_0 - u_\infty^{(k)}}\right)$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;c-explicit-formula-is-less-accurate-than-exact-optimization&#34;&gt;C) Explicit Formula is Less Accurate than Exact Optimization&lt;/h1&gt;
&lt;p&gt;The difference in accuracy between the explicit formula and exact optimization comes down to &lt;strong&gt;model assumptions versus reality&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-the-explicit-formula-is-less-accurate&#34;&gt;Why the Explicit Formula is Less Accurate&lt;/h2&gt;
&lt;h3 id=&#34;1-single-gene-assumption&#34;&gt;1. Single-Gene Assumption&lt;/h3&gt;
&lt;p&gt;The explicit formula:&lt;/p&gt;

$$\tau_i = -\frac{1}{\beta}\ln\left(\frac{u_i - u_\infty^{(k)}}{u_0 - u_\infty^{(k)}}\right)$$


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Uses only unspliced RNA&lt;/strong&gt;  $(u)$ 
 from one gene&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ignores spliced RNA&lt;/strong&gt;  $(s)$ 
 information completely&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assumes perfect adherence&lt;/strong&gt; to the theoretical kinetic model for that single gene&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-no-cross-gene-integration&#34;&gt;2. No Cross-Gene Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Each gene would give a &lt;strong&gt;different time estimate&lt;/strong&gt; for the same cell&lt;/li&gt;
&lt;li&gt;The formula doesn&amp;rsquo;t reconcile these conflicting estimates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gene-specific noise&lt;/strong&gt; and measurement errors aren&amp;rsquo;t averaged out&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-model-violations&#34;&gt;3. Model Violations&lt;/h3&gt;
&lt;p&gt;Real cells don&amp;rsquo;t perfectly follow the kinetic equations because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transcriptional bursting&lt;/strong&gt; creates noise&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cell-to-cell variability&lt;/strong&gt; in kinetic parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measurement noise&lt;/strong&gt; in RNA counts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model approximations&lt;/strong&gt; (e.g., constant degradation rates)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-exact-optimization-is-more-accurate&#34;&gt;Why Exact Optimization is More Accurate&lt;/h2&gt;
&lt;h3 id=&#34;1-multi-gene-integration&#34;&gt;1. Multi-Gene Integration&lt;/h3&gt;
&lt;p&gt;The optimization objective:&lt;/p&gt;

$$\tau_i^* = \arg\min_\tau \sum_j \left[ (u_{i,j} - u_j(\tau))^2 + (s_{i,j} - s_j(\tau))^2 \right]$$


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Uses both unspliced AND spliced&lt;/strong&gt; RNA information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrates evidence across ALL genes&lt;/strong&gt; simultaneously&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finds the time that best explains the entire transcriptome&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-noise-averaging&#34;&gt;2. Noise Averaging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gene-specific measurement errors &lt;strong&gt;cancel out&lt;/strong&gt; when averaged&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outlier genes&lt;/strong&gt; have less impact on the final time estimate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Statistical power increases&lt;/strong&gt; with more observations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-comprehensive-model-fitting&#34;&gt;3. Comprehensive Model Fitting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Accounts for &lt;strong&gt;both RNA species&lt;/strong&gt;  $u$ 
 and  $s$ 
 jointly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Balances competing evidence&lt;/strong&gt; from different genes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robust to individual gene model violations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;computational-trade-off&#34;&gt;Computational Trade-off&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Explicit Formula&lt;/strong&gt;:  $O(1)$ 
 per cell&amp;ndash; Fast but uses limited information&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exact Optimization&lt;/strong&gt;:  $O(n_{iter} \times n_{genes})$ 
 per cell&amp;ndash; Slower but uses all available information&lt;/p&gt;
&lt;h2 id=&#34;mathematical-perspective&#34;&gt;Mathematical Perspective&lt;/h2&gt;
&lt;h3 id=&#34;information-content-comparison&#34;&gt;Information Content Comparison&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Explicit Formula Information&lt;/strong&gt;:

$$I_{explicit} = f(u_{i,j}) \text{ for single gene } j$$

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exact Optimization Information&lt;/strong&gt;:

$$I_{exact} = f(\{u_{i,j}, s_{i,j}\}_{j=1}^{N_{genes}})$$

&lt;/p&gt;
&lt;p&gt;Where  $I_{exact} &gt;&gt; I_{explicit}$ 
 in terms of information content.&lt;/p&gt;
&lt;h3 id=&#34;error-propagation&#34;&gt;Error Propagation&lt;/h3&gt;
&lt;p&gt;For the explicit formula, measurement error in a single gene directly affects the time estimate:&lt;/p&gt;

$$\sigma_{\tau}^2 \propto \frac{\sigma_u^2}{(u_i - u_\infty)^2}$$


&lt;p&gt;For exact optimization, errors are averaged across genes:&lt;/p&gt;

$$\sigma_{\tau}^2 \propto \frac{1}{N_{genes}} \sum_j \frac{\sigma_{u,j}^2 + \sigma_{s,j}^2}{(u_{i,j} - u_j(\tau))^2 + (s_{i,j} - s_j(\tau))^2}$$


&lt;h2 id=&#34;biological-analogy&#34;&gt;Biological Analogy&lt;/h2&gt;
&lt;p&gt;Think of it like &lt;strong&gt;estimating someone&amp;rsquo;s age&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explicit Formula&lt;/strong&gt; = Looking at just their hair color&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quick, but hair color alone is unreliable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Exact Optimization&lt;/strong&gt; = Looking at hair, skin, posture, clothing style, speech patterns, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Takes more time, but gives a much better estimate by integrating multiple sources of evidence&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-the-two-stage-strategy-works&#34;&gt;Why the Two-Stage Strategy Works&lt;/h2&gt;
&lt;p&gt;The two-stage approach in scVelo is brilliant because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Stage 1 (Explicit)&lt;/strong&gt;: Gets &amp;ldquo;close enough&amp;rdquo; quickly when parameters are changing rapidly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage 2 (Exact)&lt;/strong&gt;: Refines to high accuracy when parameters have stabilized&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;convergence-analysis&#34;&gt;Convergence Analysis&lt;/h3&gt;
&lt;p&gt;Early iterations:  $|\theta^{(t)} - \theta^{(t-1)}|$ 
 is large&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approximate times sufficient since parameters will change significantly anyway&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later iterations:  $|\theta^{(t)} - \theta^{(t-1)}| \approx 0$ 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exact times needed for final parameter refinement&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;computational-efficiency&#34;&gt;Computational Efficiency&lt;/h3&gt;
&lt;p&gt;Total computational cost:&lt;/p&gt;

$$\text{Cost} = T_{approx} \times O(1) + T_{exact} \times O(n_{iter} \times n_{genes})$$


&lt;p&gt;Where  $T_{approx} &gt;&gt; T_{exact}$ 
, making the overall algorithm much faster than using exact optimization throughout.&lt;/p&gt;
&lt;h2 id=&#34;key-insight&#34;&gt;Key Insight&lt;/h2&gt;
&lt;p&gt;The explicit formula serves as an excellent &lt;strong&gt;initialization and approximation&lt;/strong&gt; tool, while exact optimization provides the &lt;strong&gt;precision needed for final convergence&lt;/strong&gt;. This hybrid approach captures the best of both worlds: computational efficiency and high accuracy.&lt;/p&gt;
&lt;h1 id=&#34;d-em-implementation&#34;&gt;D) EM implementation&lt;/h1&gt;
&lt;h2 id=&#34;gmm-em&#34;&gt;GMM EM&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sigma_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pi_k&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Initialize the parameters for each of the K Gaussian components:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   - mu_k: mean of component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   - sigma_k: standard deviation of component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   - pi_k: prior probability (mixing coefficient) of component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# These are randomly initialized or via k-means, and will be updated iteratively.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Repeat EM steps until the parameters stop changing significantly&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# E-step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Loop over each observed data point x_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# For each Gaussian component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;log_p_x_given_z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sigma_k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Compute log-likelihood:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# log P(x_i | z=k) under Gaussian N(mu_k, sigma_k^2), ignoring constants&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# This measures how well component k explains data point x_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;log_p_z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pi_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Log of prior probability of choosing component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;logliks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log_p_x_given_z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log_p_z&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Compute log posterior (up to normalization): log P(z=k | x_i)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;softmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logliks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Normalize to get posterior probabilities:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# q_i[k] = P(z=k | x_i), the &amp;#34;responsibility&amp;#34; of component k for x_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# M-step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# For each component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;N_k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum_i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Effective number of points assigned to component k (soft count)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mu_k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum_i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N_k&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Update the mean of component k as the weighted average of data points,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# weighted by how responsible k is for each point (q_i[k])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sigma_k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Update standard deviation as the weighted standard deviation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# of the data points around the new mean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pi_k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N_k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Update the mixing coefficient (prior) for component k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# as the proportion of total responsibility assigned to k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scvelo-em&#34;&gt;scVelo EM&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Œ±&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Œ≤&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Œ≥&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Initialize model parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Œ±: transcription rate, Œ≤: splicing rate, Œ≥: degradation rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Repeat the EM steps until parameters stabilize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# E-step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mu_traj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;solve_ODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Simulate the ODE using current parameters to get the predicted gene expression (mu_t)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# at each time point t in the predefined time grid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Iterate over each observed cell x_i (expression vector)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_t&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mu_traj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# For each time point t_j and corresponding model prediction mu_t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;logliks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-||&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;œÉ&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Compute (unnormalized) log-likelihood of x_i under the model at time t_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Assuming Gaussian noise: log P(x_i | t_j) ‚àù -||x_i - mu_t||¬≤ / œÉ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;softmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logliks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Convert log-likelihoods into a probability distribution over time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# This is the posterior q_i[j] = P(t_j | x_i, Œ∏) for each time point t_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# M-step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loss_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Define a loss function to optimize the model parameters Œ∏&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Initialize total loss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Iterate over each cell x_i and its posterior time distribution q_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t_j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# For each possible time point t_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;mu_tj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;solve_ODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t_j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# Predict expression using current Œ∏ at time t_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_tj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# Add the squared difference weighted by q_i[j] (soft assignment)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# This is the expected reconstruction error under the posterior q_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Return total expected loss to minimize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optimize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loss_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Update model parameters by minimizing the loss using an optimizer (e.g. gradient descent)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scvelo-em-with-learnable-time-prior-œÄ_j&#34;&gt;scVelo EM with Learnable Time Prior œÄ_j&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Œ±&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Œ≤&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Œ≥&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Initialize model parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Œ±: transcription rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Œ≤: splicing rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Œ≥: degradation rate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# These govern the gene expression dynamics through an ODE model.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;œÄ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# uniform over time grid  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Initialize time prior œÄ as a uniform distribution over T discrete time points.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# This reflects no prior knowledge about the timing of each cell initially.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Repeat E-step and M-step until model parameters (Œ∏ and œÄ) converge.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# --- E-step: Estimate latent time distribution for each cell ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mu_traj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;solve_ODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Simulate the dynamic model using current parameters Œ∏&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# This gives the expected gene expression Œº(t) at each time point t in the grid.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Loop over each observed cell x_i (expression vector)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_t&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mu_traj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# For each time point t_j and its predicted expression Œº_t:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;logliks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-||&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;œÉ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;œÄ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Compute an unnormalized log-posterior score for time point t_j:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#   - The first term, -||x_i - mu_t||¬≤ / œÉ, is the log-likelihood.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#     It measures how well the model at time t_j explains cell x_i,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#     assuming Gaussian noise with variance œÉ.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#   - The second term, log(œÄ[j]), is the log of the prior probability&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#     of time t_j (learned in the previous M-step).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Together, this computes:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#   log P(t_j | x_i) ‚àù log P(x_i | t_j) + log œÄ[j]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# This is a direct application of Bayes‚Äô rule and balances:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#   - Goodness-of-fit (how well the model explains the data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#   - Global structure (how likely time t_j is overall)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# This prevents overfitting rare time points that happen to fit x_i well.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;softmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logliks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Normalize the log scores across all j using the softmax function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# to get a posterior distribution q_i[j] = P(t_j | x_i, Œ∏, œÄ).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# This soft assignment tells us how likely cell x_i came from each time point.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# --- M-step: Update œÄ and Œ∏ to maximize expected data fit ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;œÄ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum_i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;all&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Update the prior over time points:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# For each time point t_j, œÄ[j] becomes the average of q_i[j] over all cells.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# This reflects how many cells the model currently thinks came from time t_j.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# The prior œÄ is now data-driven instead of uniform.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loss_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Define the objective function for re-estimating model parameters Œ∏.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Initialize the total loss to accumulate over all cells and times.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# For each observed cell x_i and its soft time assignment q_i:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t_j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# For each time point t_j in the grid:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;mu_tj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;solve_ODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t_j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# Simulate the ODE to predict expression at time t_j using Œ∏.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mu_tj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# Add weighted squared error between observed x_i and predicted mu_tj.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# The weight q_i[j] reflects the model‚Äôs belief that x_i came from t_j.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# This gives a soft, expectation-based loss function.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Total expected reconstruction error across all cells and times.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;theta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optimize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loss_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Optimize model parameters Œ∏ to minimize the expected error (loss).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# This is typically done using gradient descent or similar techniques.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>üß¨ Math derivation for steady-state RNA velocity model</title>
      <link>http://localhost:1313/post/11c.velocity_steady_state/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11c.velocity_steady_state/</guid>
      <description>&lt;p&gt;The steady‚Äëstate model was the first to enable a mathematical estimation of RNA velocity, and most subsequent methods are modified versions of it or its generalization (the dynamic model in‚ÄØ&lt;code&gt;scVelo&lt;/code&gt;; see our other blogs). It has its limitations and a solid understanding of its underlying mathematics is needed to apply the model effectively. Here, we derive the steady-state model in &lt;code&gt;scVelo&lt;/code&gt; and &lt;code&gt;velocyto&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;a-estimating-rna-velocity-using-steady-state-ratio-in-scvelo-and-velocyto&#34;&gt;A. Estimating RNA velocity Using Steady-State Ratio in &lt;code&gt;scVelo&lt;/code&gt; and &lt;code&gt;velocyto&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For steady-state models in &lt;code&gt;scVelo&lt;/code&gt; and &lt;code&gt;velocyto&lt;/code&gt;, RNA velocities are computed as deviations from this steady-state ratio:&lt;/p&gt;
 $$ \nu_i = u_i - \gamma_0 s_i  $$ 

&lt;p&gt;where
  
$$
\gamma_0 = \frac{\beta}{\gamma}
$$  

&lt;br&gt;
(i.e. the expected ratio of unspliced to spliced mRNA) is estimated analytically using least squares regression. Lower and upper quantiles in phase space, that is, where mRNA levels
reach minimum and maximum expression, respectively were assumed to be steady states and used for the estimation. Hence, the ratio can be approximated by a linear regression on these extreme quantiles.&lt;/p&gt;
&lt;p&gt;Specifically, $ \gamma_0 $
 is estimated as :&lt;/p&gt;
  
$$
\gamma_0 = \frac{\mathbf{u}^\top \mathbf{s}}{\lVert \mathbf{s} \rVert^2}
$$  


&lt;p&gt;This is a least-squares fit of the form:&lt;/p&gt;
  
$$
\mathbf{u} \approx \gamma_0 \cdot \mathbf{s}
$$  


&lt;p&gt;This means they model unspliced mRNA ($\mathbf{u}$
) as being linearly dependent on spliced mRNA ($\mathbf{s}$
), and solve for the slope $\gamma_0$
.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symbol-definition&#34;&gt;Symbol Definition&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;$\mathbf{u} = (u_1, \ldots, u_n)$
: a vector of size-normalized unspliced mRNA counts for a single gene across a subset of cells.&lt;/li&gt;
&lt;li&gt;$\mathbf{s} = (s_1, \ldots, s_n)$
: a vector of corresponding spliced mRNA counts for that gene in the same subset of cells.&lt;/li&gt;
&lt;li&gt;$\mathbf{u}^\top \mathbf{s}$
: the dot product between unspliced and spliced vectors.&lt;/li&gt;
&lt;li&gt;$\lVert \mathbf{s} \rVert^2 = \mathbf{s}^\top \mathbf{s}$
: the squared norm of the spliced vector.&lt;/li&gt;
&lt;li&gt;$\gamma_0$
: the slope of the best-fit line through the origin relating $\mathbf{u}$
 to $\mathbf{s}$
, i.e., the steady-state ratio.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;b-derive-least-squares-solution-for-estimating-the-steady-state-ratio-gamma_0&#34;&gt;B. Derive Least Squares Solution for Estimating the Steady-State Ratio $\gamma_0$&lt;/h3&gt;
&lt;p&gt;Let‚Äôs walk through the full derivation of the least squares solution for estimating the steady-state ratio $\gamma_0$
, which minimizes the squared difference between the unspliced and spliced counts scaled by $\gamma_0$
.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;-problem-setup&#34;&gt;üîß Problem Setup&lt;/h4&gt;
&lt;p&gt;Given:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$u \in \mathbb{R}^n$
: vector of unspliced counts across $n$
 cells&lt;/li&gt;
&lt;li&gt;$s \in \mathbb{R}^n$
: vector of spliced counts across the same $n$
 cells&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We model the unspliced counts as linearly proportional to spliced counts:&lt;/p&gt;

$$
u \approx \gamma_0 s
$$


&lt;p&gt;We want to find $\gamma_0$
 that minimizes the squared error:&lt;/p&gt;

$$
\min_{\gamma_0} \| u - \gamma_0 s \|^2
$$


&lt;hr&gt;
&lt;h4 id=&#34;-expand-the-norm&#34;&gt;üßÆ Expand the Norm&lt;/h4&gt;

$$
\| u - \gamma_0 s \|^2 = (u - \gamma_0 s)^\top (u - \gamma_0 s)
$$


&lt;p&gt;Expanding this expression:&lt;/p&gt;

$$
= u^\top u - 2\gamma_0 u^\top s + \gamma_0^2 s^\top s
$$


&lt;hr&gt;
&lt;h4 id=&#34;-minimize-with-respect-to-gamma_0&#34;&gt;üìâ Minimize with Respect to $\gamma_0$&lt;/h4&gt;
&lt;p&gt;Take derivative with respect to $\gamma_0$
 and set it to zero:&lt;/p&gt;

$$
\frac{d}{d\gamma_0} \left( \| u - \gamma_0 s \|^2 \right) = -2 u^\top s + 2\gamma_0 s^\top s = 0
$$


&lt;p&gt;Solve for $\gamma_0$
:&lt;/p&gt;

$$
\gamma_0 = \frac{u^\top s}{\|s\|^2}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$u^\top s$
 is the dot product&lt;/li&gt;
&lt;li&gt;$\|s\|^2 = s^\top s$
 is the squared norm&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;-interpretation&#34;&gt;‚úÖ Interpretation&lt;/h4&gt;
&lt;p&gt;This is the slope of the best-fit line (through the origin) predicting unspliced from spliced counts. It&amp;rsquo;s equivalent to projecting $u$
 onto $s$
 in vector space.&lt;/p&gt;
&lt;p&gt;In RNA velocity, this slope $\gamma_0$
 serves as a reference ratio under the steady-state assumption:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected:&lt;/strong&gt;&lt;/p&gt;

$$
u = \gamma_0 s
$$


&lt;p&gt;Any deviation from this in other cells suggests that the gene is being upregulated or downregulated.&lt;/p&gt;
&lt;h3 id=&#34;c-extending-the-steady-state-model-with-offset&#34;&gt;C. Extending the Steady-State Model with Offset&lt;/h3&gt;
&lt;h4 id=&#34;-original-model-no-offset&#34;&gt;üß© Original Model (No Offset)&lt;/h4&gt;
&lt;p&gt;Previously, we assumed:&lt;/p&gt;

$$u_i \approx \gamma_0 \cdot s_i$$


&lt;p&gt;But this forces the regression line to go through the origin, which isn&amp;rsquo;t always biologically realistic.&lt;/p&gt;
&lt;h4 id=&#34;-generalized-model-with-offset&#34;&gt;‚úÖ Generalized Model (With Offset)&lt;/h4&gt;
&lt;p&gt;Now we model:&lt;/p&gt;

$$u_i \approx \gamma_0 \cdot s_i + o$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\gamma_0$
 is still the slope (steady-state ratio)&lt;/li&gt;
&lt;li&gt;$o$
 is a constant offset (intercept), modeling basal transcription&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-least-squares-solution-with-offset&#34;&gt;üîç Least Squares Solution with Offset&lt;/h4&gt;
&lt;p&gt;To solve for both $\gamma_0$
 and $o$
, we use ordinary least squares (OLS) for linear regression.&lt;/p&gt;
&lt;p&gt;Given data $u=(u_1,\ldots,u_n)$
, $s=(s_1,\ldots,s_n)$
, we estimate:&lt;/p&gt;

$$\hat{u} = \gamma_0 s + o$$


&lt;p&gt;OLS gives:&lt;/p&gt;
&lt;h5 id=&#34;slope-steady-state-ratio&#34;&gt;Slope (Steady-State Ratio):&lt;/h5&gt;

$$\gamma_0 = \frac{\text{Cov}(u,s)}{\text{Var}(s)}$$


&lt;p&gt;Where:&lt;/p&gt;

$$\text{Cov}(u,s) = \frac{1}{n}\sum_{i=1}^n (u_i-\bar{u})(s_i-\bar{s})$$



$$\text{Var}(s) = \frac{1}{n}\sum_{i=1}^n (s_i-\bar{s})^2$$


&lt;h5 id=&#34;offset&#34;&gt;Offset:&lt;/h5&gt;

$$o = \bar{u} - \gamma_0\bar{s}$$


&lt;p&gt;This centers the regression line at the mean of the data points.&lt;/p&gt;
&lt;h3 id=&#34;d-derive-least-squares-solution-with-intercept&#34;&gt;D. Derive Least Squares Solution with Intercept&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s derive the least squares solution with an intercept (offset) step by step. Our goal is to estimate both:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\gamma_0$
: the slope (steady-state ratio), and&lt;/li&gt;
&lt;li&gt;$o$
: the offset (basal transcription level)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;given that we model:&lt;/p&gt;

$$u_i = \gamma_0 s_i + o + \varepsilon_i$$


&lt;p&gt;for each cell $i$
, where $\varepsilon_i$
 is the residual.&lt;/p&gt;
&lt;h4 id=&#34;-1-problem-setup&#34;&gt;üß© 1. Problem Setup&lt;/h4&gt;
&lt;p&gt;Let $u = [u_1, u_2, ..., u_n]^T$
, and $s = [s_1, s_2, ..., s_n]^T$
&lt;/p&gt;
&lt;p&gt;We want to solve for $\gamma_0$
 and $o$
 that minimize the squared residuals:&lt;/p&gt;

$$\min_{\gamma_0,o} \sum_{i=1}^n (u_i - \gamma_0 s_i - o)^2$$


&lt;p&gt;This is a linear least squares regression with intercept.&lt;/p&gt;
&lt;h4 id=&#34;-2-matrix-form&#34;&gt;üßÆ 2. Matrix Form&lt;/h4&gt;
&lt;p&gt;Rewriting the model:&lt;/p&gt;

$$u = \gamma_0 s + o \cdot 1 + \varepsilon$$


&lt;p&gt;Let&amp;rsquo;s construct a design matrix $X$
:&lt;/p&gt;

$$X = \begin{bmatrix} s_1 &amp; 1 \\ s_2 &amp; 1 \\ \vdots &amp; \vdots \\ s_n &amp; 1 \end{bmatrix} \in \mathbb{R}^{n \times 2}$$


&lt;p&gt;Then the model becomes:&lt;/p&gt;

$$u = X \cdot \begin{bmatrix} \gamma_0 \\ o \end{bmatrix} + \varepsilon$$


&lt;p&gt;The least squares solution is given by:&lt;/p&gt;

$$\begin{bmatrix} \gamma_0 \\ o \end{bmatrix} = (X^T X)^{-1} X^T u$$


&lt;p&gt;We can compute this explicitly to get formulas for $\gamma_0$
 and $o$
 as below.&lt;/p&gt;
&lt;h5 id=&#34;slope&#34;&gt;Slope:&lt;/h5&gt;

$$\gamma_0 = \frac{\text{Cov}(u,s)}{\text{Var}(s)} = \frac{\sum_{i=1}^n (u_i-\bar{u})(s_i-\bar{s})}{\sum_{i=1}^n (s_i-\bar{s})^2}$$


&lt;h5 id=&#34;offset-1&#34;&gt;Offset:&lt;/h5&gt;

$$o = \bar{u} - \gamma_0\bar{s}$$


&lt;p&gt;These are the well-known results from simple linear regression that center the regression line at the mean of the data points.&lt;/p&gt;
&lt;h4 id=&#34;-3-matrix-derivation-of-the-least-squares-solution&#34;&gt;üéØ 3. Matrix Derivation of the Least Squares Solution&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s explicitly derive the solution:&lt;/p&gt;

$$\begin{bmatrix} \gamma_0 \\ o \end{bmatrix} = (X^\top X)^{-1} X^\top u$$


&lt;p&gt;for the model:&lt;/p&gt;

$$u = \gamma_0 s + o \cdot 1 + \varepsilon$$


&lt;h5 id=&#34;31-define-the-design-matrix-and-vectors&#34;&gt;3.1 Define the Design Matrix and Vectors&lt;/h5&gt;
&lt;p&gt;Let&amp;rsquo;s say we have $n$
 samples (cells), with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$s \in \mathbb{R}^n$
: spliced counts&lt;/li&gt;
&lt;li&gt;$u \in \mathbb{R}^n$
: unspliced counts&lt;/li&gt;
&lt;li&gt;$1 \in \mathbb{R}^n$
: vector of ones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We define the design matrix $X \in \mathbb{R}^{n \times 2}$
:&lt;/p&gt;

$$X = \begin{bmatrix} s_1 &amp; 1 \\ s_2 &amp; 1 \\ \vdots &amp; \vdots \\ s_n &amp; 1 \end{bmatrix} = [s \quad 1]$$


&lt;p&gt;We write the model:&lt;/p&gt;

$$u = X\theta + \varepsilon, \text{ with } \theta = \begin{bmatrix} \gamma_0 \\ o \end{bmatrix}$$


&lt;p&gt;We want to minimize the residual sum of squares:&lt;/p&gt;

$$\min_\theta \|u - X\theta\|^2$$


&lt;h5 id=&#34;32-normal-equations&#34;&gt;3.2 Normal Equations&lt;/h5&gt;
&lt;p&gt;We derive the optimal $\theta$
 by solving the normal equations:&lt;/p&gt;

$$X^\top X\theta = X^\top u$$


&lt;p&gt;So,&lt;/p&gt;

$$\theta = (X^\top X)^{-1} X^\top u$$


&lt;p&gt;Let&amp;rsquo;s compute each term step by step.&lt;/p&gt;
&lt;h5 id=&#34;33-compute-xtop-x&#34;&gt;3.3 Compute $X^\top X$&lt;/h5&gt;

$$X^\top X = \begin{bmatrix} \sum s_i^2 &amp; \sum s_i \\ \sum s_i &amp; n \end{bmatrix}$$


&lt;p&gt;Let&amp;rsquo;s denote:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S = \sum_{i=1}^n s_i$
&lt;/li&gt;
&lt;li&gt;$S_2 = \sum_{i=1}^n s_i^2$
&lt;/li&gt;
&lt;li&gt;$n$
: number of cells&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So:&lt;/p&gt;

$$X^\top X = \begin{bmatrix} S_2 &amp; S \\ S &amp; n \end{bmatrix}$$


&lt;h5 id=&#34;34-compute-xtop-u&#34;&gt;3.4 Compute $X^\top u$&lt;/h5&gt;

$$X^\top u = \begin{bmatrix} \sum s_i u_i \\ \sum u_i \end{bmatrix}$$


&lt;p&gt;Let&amp;rsquo;s denote:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$U = \sum_{i=1}^n u_i$
&lt;/li&gt;
&lt;li&gt;$SU = \sum_{i=1}^n s_i u_i$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So:&lt;/p&gt;

$$X^\top u = \begin{bmatrix} SU \\ U \end{bmatrix}$$


&lt;h5 id=&#34;35-solve-theta--xtop-x-1-xtop-u&#34;&gt;3.5 Solve $\theta = (X^\top X)^{-1} X^\top u$&lt;/h5&gt;
&lt;p&gt;The inverse of a $2\times2$
 matrix:&lt;/p&gt;

$$\begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix}^{-1} = \frac{1}{ad-bc}\begin{bmatrix} d &amp; -b \\ -c &amp; a \end{bmatrix}$$


&lt;p&gt;So:&lt;/p&gt;

$$(X^\top X)^{-1} = \frac{1}{S_2n - S^2}\begin{bmatrix} n &amp; -S \\ -S &amp; S_2 \end{bmatrix}$$


&lt;p&gt;Now compute:&lt;/p&gt;

$$\theta = \frac{1}{S_2n - S^2}\begin{bmatrix} n &amp; -S \\ -S &amp; S_2 \end{bmatrix}\begin{bmatrix} SU \\ U \end{bmatrix}$$


&lt;p&gt;First row:

$$n\cdot SU - S\cdot U$$

&lt;/p&gt;
&lt;p&gt;Second row:

$$-S\cdot SU + S_2\cdot U$$

&lt;/p&gt;
&lt;h5 id=&#34;36-final-expression&#34;&gt;3.6 Final Expression&lt;/h5&gt;
&lt;p&gt;So we get:&lt;/p&gt;

$$\gamma_0 = \frac{n\cdot \sum s_i u_i - \sum s_i \cdot \sum u_i}{n\cdot \sum s_i^2 - (\sum s_i)^2} = \frac{\text{Cov}(u,s)}{\text{Var}(s)}$$



$$o = \bar{u} - \gamma_0\bar{s}$$


&lt;p&gt;This completes the derivation of the least squares solution with intercept, showing how to arrive at the covariance and variance expressions.&lt;/p&gt;
&lt;h3 id=&#34;why-normal-equations-in-32-in-section-d-give-the-optimal-solution&#34;&gt;Why Normal Equations in 3.2 in Section D give the optimal solution&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s prove that the normal equations&lt;/p&gt;

$$X^\top X\theta = X^\top u$$


&lt;p&gt;give us the optimal solution in least squares regression.&lt;/p&gt;
&lt;h4 id=&#34;goal-of-least-squares&#34;&gt;Goal of Least Squares&lt;/h4&gt;
&lt;p&gt;We want to minimize the sum of squared errors (residuals):&lt;/p&gt;

$$L(\theta) = \|u-X\theta\|^2 = (u-X\theta)^\top(u-X\theta)$$


&lt;p&gt;This is a quadratic loss function. To minimize it, we take its gradient with respect to $\theta$
, set it to zero, and solve.&lt;/p&gt;
&lt;h4 id=&#34;step-by-step-derivation&#34;&gt;Step-by-step Derivation&lt;/h4&gt;
&lt;p&gt;Start with:&lt;/p&gt;

$$L(\theta) = (u-X\theta)^\top(u-X\theta)$$


&lt;p&gt;Expand the product:&lt;/p&gt;

$$L(\theta) = u^\top u - 2\theta^\top X^\top u + \theta^\top X^\top X\theta$$


&lt;p&gt;Now take the gradient with respect to $\theta$
:&lt;/p&gt;

$$\nabla_\theta L = -2X^\top u + 2X^\top X\theta \tag{gradient} $$


&lt;p&gt;Set the gradient to zero:&lt;/p&gt;

$$-2X^\top u + 2X^\top X\theta = 0$$


&lt;p&gt;Divide both sides by 2:&lt;/p&gt;

$$X^\top X\theta = X^\top u$$


&lt;p&gt;This is the normal equation. When $X^\top X$
 is invertible (which it is in our case since $X$
 has full column rank), we can solve for $\theta$
:&lt;/p&gt;

$$\theta = (X^\top X)^{-1}X^\top u$$


&lt;p&gt;This solution minimizes the squared error because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The loss function is convex (it&amp;rsquo;s quadratic and $X^\top X$
 is positive definite)&lt;/li&gt;
&lt;li&gt;We found where its gradient is zero&lt;/li&gt;
&lt;li&gt;The second derivative (Hessian) $2X^\top X$
 is positive definite&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, this solution gives us the global minimum of the least squares problem.&lt;/p&gt;
&lt;h4 id=&#34;derive-the-gradient-equation-above-for-the-least-squares-loss-function&#34;&gt;Derive the Gradient Equation above for the Least Squares Loss Function&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s walk through how we get:&lt;/p&gt;

$$\nabla_\theta L = -2X^\top u + 2X^\top X\theta$$


&lt;h5 id=&#34;step-1-write-the-loss-function&#34;&gt;Step 1: Write the Loss Function&lt;/h5&gt;
&lt;p&gt;The least squares loss is:&lt;/p&gt;

$$L(\theta) = \|u-X\theta\|^2 = (u-X\theta)^\top(u-X\theta)$$


&lt;h5 id=&#34;step-2-expand-the-quadratic-form&#34;&gt;Step 2: Expand the Quadratic Form&lt;/h5&gt;
&lt;p&gt;Let&amp;rsquo;s expand this expression:&lt;/p&gt;

$$L(\theta) = u^\top u - 2\theta^\top X^\top u + \theta^\top X^\top X\theta$$


&lt;p&gt;Here&amp;rsquo;s how we get this expansion:&lt;/p&gt;

$$(u-X\theta)^\top(u-X\theta) = u^\top u - 2\theta^\top X^\top u + \theta^\top X^\top X\theta$$


&lt;p&gt;This follows from two key matrix properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$(AB)^T = B^T A^T$
&lt;/li&gt;
&lt;li&gt;$u^\top X\theta = \theta^\top X^\top u$
 (scalar equality)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;step-3-take-the-gradient-with-respect-to-theta&#34;&gt;Step 3: Take the Gradient with Respect to $\theta$&lt;/h5&gt;
&lt;p&gt;We differentiate term by term:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First term:

   $$\nabla_\theta(u^\top u) = 0$$
   

because it doesn&amp;rsquo;t depend on $\theta$
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second term:

   $$\nabla_\theta(-2\theta^\top X^\top u) = -2X^\top u$$
   

because it&amp;rsquo;s linear in $\theta$
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third term:

   $$\nabla_\theta(\theta^\top X^\top X\theta) = 2X^\top X\theta \tag{quadratic grad.}$$
   

This is a quadratic form, and its derivative is a standard result from matrix calculus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Adding all parts together:&lt;/p&gt;

$$\nabla_\theta L = -2X^\top u + 2X^\top X\theta$$


&lt;p&gt;This gradient expression gives us the direction of steepest ascent of the loss function at any point $\theta$
. Setting it to zero leads to the normal equations, which give us the optimal solution.&lt;/p&gt;
&lt;h5 id=&#34;note-vector-dot-product-commutativity&#34;&gt;Note: Vector Dot Product Commutativity&lt;/h5&gt;
&lt;p&gt;Please note the identity&lt;/p&gt;

$$a^\top b = b^\top a$$


&lt;p&gt;holds true. This is a foundational property in linear algebra, and the key point is:&lt;/p&gt;
&lt;p&gt;Both $a^\top b$
 and $b^\top a$
 are scalars (i.e., single numbers), and they are equal because they compute the same dot product. Let&amp;rsquo;s break it down:&lt;/p&gt;
&lt;p&gt;Let $a = [a_1, a_2, \ldots, a_n]^\top$
, and $b = [b_1, b_2, \ldots, b_n]^\top$
.&lt;/p&gt;
&lt;p&gt;Then:&lt;/p&gt;

$$a^\top b = \sum_{i=1}^n a_i b_i$$



$$b^\top a = \sum_{i=1}^n b_i a_i$$


&lt;p&gt;But since real number multiplication is commutative (i.e., $a_i b_i = b_i a_i$
), the two sums are identical:&lt;/p&gt;

$$a^\top b = b^\top a$$


&lt;h5 id=&#34;note-on-shapes-and-intuition&#34;&gt;Note on shapes and intuition:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;$a^\top b$
 is a $1\times1$
 scalar (row vector √ó column vector)&lt;/li&gt;
&lt;li&gt;$b^\top a$
 is also a $1\times1$
 scalar (same logic)&lt;/li&gt;
&lt;li&gt;This is just the dot product: it doesn&amp;rsquo;t matter which order you take the dot product in. It&amp;rsquo;s symmetric. This property is crucial in many derivations in linear algebra and optimization, including our least squares derivation where we used $u^\top X\theta = \theta^\top X^\top u$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since they&amp;rsquo;re both just numbers, and equal by commutativity, the identity holds.&lt;/p&gt;
&lt;h3 id=&#34;derive-quadratic-form-gradient-in-equation-quadratic-grad&#34;&gt;Derive Quadratic Form Gradient in Equation (quadratic grad.)&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s prove the key gradient identity with Matrix Calculus:&lt;/p&gt;

$$\nabla_\theta(\theta^\top A\theta) = (A + A^\top)\theta$$


&lt;p&gt;And its special case when $A$
 is symmetric:&lt;/p&gt;

$$\nabla_\theta(\theta^\top A\theta) = 2A\theta$$


&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;
&lt;p&gt;Given:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\theta \in \mathbb{R}^p$
 is a column vector&lt;/li&gt;
&lt;li&gt;$A \in \mathbb{R}^{p \times p}$
 is a constant matrix&lt;/li&gt;
&lt;li&gt;The scalar function is $f(\theta) = \theta^\top A\theta = \sum_{i=1}^p \sum_{j=1}^p \theta_i A_{ij} \theta_j$
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;overview-of-steps&#34;&gt;Overview of Steps&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Write in Summation Form&lt;/p&gt;

$$f(\theta) = \sum_{i=1}^p \sum_{j=1}^p \theta_i A_{ij} \theta_j$$


&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Compute Partial Derivatives&lt;/p&gt;
&lt;p&gt;The gradient&amp;rsquo;s k-th component is:&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = \frac{\partial}{\partial \theta_k} \sum_{i=1}^p \sum_{j=1}^p \theta_i A_{ij} \theta_j$$


&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Use Product Rule&lt;/p&gt;
&lt;p&gt;When differentiating:&lt;/p&gt;

$$\frac{\partial}{\partial \theta_k}(\theta_i A_{ij} \theta_j) = A_{ij}(\delta_{ik}\theta_j + \theta_i\delta_{jk})$$


&lt;p&gt;where $\delta_{ik}$
 is the Kronecker delta:&lt;/p&gt;

$$\delta_{ik} = \begin{cases} 1 &amp; \text{if } i=k \\ 0 &amp; \text{otherwise} \end{cases}$$


&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Sum Terms&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = \sum_{j=1}^p A_{kj}\theta_j + \sum_{i=1}^p \theta_i A_{ik}$$


&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Express in Vector Form&lt;/p&gt;
&lt;p&gt;This gives us:&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = (A\theta)_k + (A^\top\theta)_k$$


&lt;p&gt;Therefore:&lt;/p&gt;

$$\nabla_\theta f = A\theta + A^\top\theta = (A + A^\top)\theta$$


&lt;p&gt;&lt;strong&gt;Symmetric Matrix&lt;/strong&gt;: a special case&lt;/p&gt;
&lt;p&gt;When $A = A^\top$
, we get:&lt;/p&gt;

$$\nabla_\theta(\theta^\top A\theta) = 2A\theta$$


&lt;p&gt;This is the form we use in least squares optimization where $A = X^\top X$
 is symmetric.&lt;/p&gt;
&lt;h4 id=&#34;detail-proof-of-key-steps-above&#34;&gt;Detail Proof of Key Steps above&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s prove that:&lt;/p&gt;

$$\frac{\partial}{\partial \theta_k} \left(\sum_{i=1}^p \sum_{j=1}^p \theta_i A_{ij} \theta_j\right) = \sum_{j=1}^p A_{kj}\theta_j + \sum_{i=1}^p \theta_i A_{ik}$$


&lt;h5 id=&#34;step-by-step-derivation-1&#34;&gt;&lt;strong&gt;Step-by-step Derivation&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Start with the function:&lt;/p&gt;

$$f(\theta) = \sum_{i=1}^p \sum_{j=1}^p \theta_i A_{ij} \theta_j$$


&lt;p&gt;Take partial derivative with respect to $\theta_k$
, using product rule for all $\theta_i$
 and $\theta_j$
 terms:&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = \sum_{i=1}^p \sum_{j=1}^p A_{ij} \cdot \frac{\partial}{\partial \theta_k}(\theta_i \theta_j)$$


&lt;p&gt;Now:&lt;/p&gt;

$$\frac{\partial}{\partial \theta_k}(\theta_i \theta_j) = \delta_{ik}\theta_j + \theta_i\delta_{jk}$$


&lt;p&gt;where $\delta_{ik}$
 is the Kronecker delta:&lt;/p&gt;

$$\delta_{ik} = \begin{cases} 1 &amp; \text{if } i=k \\ 0 &amp; \text{otherwise} \end{cases}$$


&lt;p&gt;Therefore:&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = \sum_{i=1}^p \sum_{j=1}^p A_{ij}(\delta_{ik}\theta_j + \theta_i\delta_{jk})$$


&lt;p&gt;Split into two sums:&lt;/p&gt;
&lt;p&gt;First term:

$$\sum_{i=1}^p \sum_{j=1}^p A_{ij}\delta_{ik}\theta_j = \sum_{j=1}^p A_{kj}\theta_j$$

&lt;/p&gt;
&lt;p&gt;(since $\delta_{ik}=1$
 only when $i=k$
)&lt;/p&gt;
&lt;p&gt;Second term:

$$\sum_{i=1}^p \sum_{j=1}^p A_{ij}\theta_i\delta_{jk} = \sum_{i=1}^p A_{ik}\theta_i$$

&lt;/p&gt;
&lt;p&gt;(since $\delta_{jk}=1$
 only when $j=k$
)&lt;/p&gt;
&lt;h5 id=&#34;interim-result&#34;&gt;&lt;strong&gt;Interim Result&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Combining both terms:&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = \sum_{j=1}^p A_{kj}\theta_j + \sum_{i=1}^p A_{ik}\theta_i$$


&lt;p&gt;In vector form, this means:&lt;/p&gt;

$$\nabla_\theta(\theta^\top A\theta) = A\theta + A^\top\theta = (A + A^\top)\theta$$


&lt;h5 id=&#34;from-component-wise-to-vector-form-of-gradient&#34;&gt;&lt;strong&gt;From Component-wise to Vector Form of Gradient&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;For each coordinate $k \in \{1,\ldots,p\}$
, we showed:&lt;/p&gt;

$$\frac{\partial f}{\partial \theta_k} = \underbrace{\sum_{j=1}^p A_{kj}\theta_j}_{(A\theta)_k} + \underbrace{\sum_{i=1}^p A_{ik}\theta_i}_{(A^\top\theta)_k}$$


&lt;p&gt;So each element of the gradient vector is:&lt;/p&gt;

$$(\nabla_\theta f)_k = (A\theta)_k + (A^\top\theta)_k$$


&lt;h5 id=&#34;stacking-into-vector-form&#34;&gt;&lt;strong&gt;Stacking into Vector Form&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;The full gradient vector is:&lt;/p&gt;
&lt;p&gt;
$$\nabla_\theta f = \begin{bmatrix} 
(A\theta)_1 + (A^\top\theta)_1 \\
(A\theta)_2 + (A^\top\theta)_2 \\
\vdots \\
(A\theta)_p + (A^\top\theta)_p
\end{bmatrix} = A\theta + A^\top\theta$$


The notation $(A\theta)_k$
 which refers to the k-th component of the matrix-vector product $A\theta$
. This follows because matrix-vector multiplication simply stacks the components:&lt;/p&gt;

$$(A\theta)_k = \sum_j A_{kj}\theta_j$$


&lt;p&gt;
$$A\theta = \begin{bmatrix} 
\sum_{j=1}^p A_{1j}\theta_j \\
\sum_{j=1}^p A_{2j}\theta_j \\
\vdots \\
\sum_{j=1}^p A_{pj}\theta_j
\end{bmatrix}$$


Similarly, for the transpose:

$$(A^\top\theta)_k = \sum_i A_{ik}\theta_i$$

&lt;/p&gt;
&lt;h5 id=&#34;final-result&#34;&gt;&lt;strong&gt;Final Result&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Therefore:&lt;/p&gt;

$$\nabla_\theta(\theta^\top A\theta) = A\theta + A^\top\theta = (A + A^\top)\theta$$


&lt;h3 id=&#34;from-normal-equations-to-standard-regression-form-36-in-section-d&#34;&gt;From Normal Equations to Standard Regression Form (3.6 in Section D)&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s derive how the normal equations solution:&lt;/p&gt;

$$\theta = \frac{1}{nS_2-S_1^2}\begin{bmatrix} n &amp; -S_1 \\ -S_1 &amp; S_2 \end{bmatrix}\begin{bmatrix} SU \\ U \end{bmatrix}$$


&lt;p&gt;relates to the standard regression form:&lt;/p&gt;

$$\gamma_0 = \frac{\text{Cov}(u,s)}{\text{Var}(s)} = \frac{n\sum s_i u_i - \sum s_i \sum u_i}{n\sum s_i^2 - (\sum s_i)^2}$$


&lt;p&gt;with offset:&lt;/p&gt;

$$o = \bar{u} - \gamma_0\bar{s}$$


&lt;h4 id=&#34;given-matrices-and-vectors&#34;&gt;Given Matrices and Vectors&lt;/h4&gt;
&lt;p&gt;Let $s=[s_1,\ldots,s_n]^T$
, $u=[u_1,\ldots,u_n]^T$
&lt;/p&gt;
&lt;p&gt;Model:

$$u_i = \gamma_0 s_i + o + \varepsilon_i \text{ or } u = \gamma_0 s + o\cdot 1 + \varepsilon$$

&lt;/p&gt;
&lt;h4 id=&#34;matrix-form&#34;&gt;Matrix Form&lt;/h4&gt;
&lt;p&gt;Design matrix:

$$X = [s \quad 1] \in \mathbb{R}^{n\times 2}$$

&lt;/p&gt;
&lt;p&gt;Parameters:

$$\theta = \begin{bmatrix} \gamma_0 \\ o \end{bmatrix}$$

&lt;/p&gt;
&lt;h4 id=&#34;computing-products&#34;&gt;Computing Products&lt;/h4&gt;

$$X^T X = \begin{bmatrix} \sum s_i^2 &amp; \sum s_i \\ \sum s_i &amp; n \end{bmatrix} = \begin{bmatrix} S_2 &amp; S_1 \\ S_1 &amp; n \end{bmatrix}$$



$$X^T u = \begin{bmatrix} \sum s_i u_i \\ \sum u_i \end{bmatrix} = \begin{bmatrix} SU \\ U \end{bmatrix}$$


&lt;h4 id=&#34;solution-components&#34;&gt;Solution Components&lt;/h4&gt;
&lt;p&gt;First row (slope):

$$\gamma_0 = \frac{1}{nS_2-S_1^2}(n\cdot SU - S_1\cdot U)$$

&lt;/p&gt;
&lt;p&gt;Second row (intercept):

$$o = \frac{1}{nS_2-S_1^2}(-S_1\cdot SU + S_2\cdot U)$$

&lt;/p&gt;
&lt;h4 id=&#34;statistical-interpretation&#34;&gt;Statistical Interpretation&lt;/h4&gt;
&lt;p&gt;Define:

$$\bar{s} = \frac{1}{n}\sum s_i \quad \bar{u} = \frac{1}{n}\sum u_i$$

&lt;/p&gt;

$$\text{Var}(s) = \frac{1}{n}\sum(s_i-\bar{s})^2 = \frac{1}{n}S_2 - \bar{s}^2$$



$$\text{Cov}(u,s) = \frac{1}{n}\sum(u_i-\bar{u})(s_i-\bar{s}) = \frac{1}{n}SU - \bar{u}\bar{s}$$


&lt;h4 id=&#34;final-result-1&#34;&gt;Final Result&lt;/h4&gt;
&lt;p&gt;This gives us:

$$\gamma_0 = \frac{\text{Cov}(u,s)}{\text{Var}(s)} \text{ and } o = \bar{u} - \gamma_0\bar{s}$$

&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üéì Math Derivation for ELBO/KL in Bayesian Inference and VAEs</title>
      <link>http://localhost:1313/post/19c.bayes_variational_infer_elbo/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19c.bayes_variational_infer_elbo/</guid>
      <description>&lt;h2 id=&#34;-marginal-likelihood-is-often-intractable-in-bayesian-inference&#34;&gt;üîç Marginal likelihood is often intractable in Bayesian Inference&lt;/h2&gt;
&lt;p&gt;Bayesian inference and Variational Autoencoders (VAEs), a marriage of deep learning and Bayesian inference, are powerful and foundational for probabilistic modeling used in computational biology. But rely on the concept of marginal likelihood, which is often intractable to compute directly. This is because both frameworks typically involve integrating over latent variables or parameters, which can lead to high-dimensional integrals that are computationally intractable.&lt;/p&gt;
&lt;p&gt;Specifically, in Bayesian inference, we want the posterior distribution:&lt;/p&gt;

$$p(\theta \mid D) = \frac{p(D \mid \theta) \, p(\theta)}{p(D)} \tag{1}$$


&lt;p&gt;But the denominator‚Äîthe evidence or marginal likelihood‚Äîis:&lt;/p&gt;

$$p(D) = \int p(D \mid \theta) \, p(\theta) \, d\theta \tag{2}$$


&lt;p&gt;This integral is often intractable.&lt;/p&gt;
&lt;h2 id=&#34;-variational-inference-the-workaround&#34;&gt;üí° Variational Inference: The Workaround&lt;/h2&gt;
&lt;p&gt;We introduce a simpler variational distribution $q(\theta)$
 to approximate $p(\theta \mid D)$
, and we try to make $q$
 close to the true posterior.&lt;/p&gt;
&lt;p&gt;We measure closeness using KL divergence:&lt;/p&gt;

$$\text{KL}(q(\theta) \| p(\theta \mid D)) = \int q(\theta) \log \frac{q(\theta)}{p(\theta \mid D)} d\theta \tag{3}$$


&lt;p&gt;This is hard to compute directly because it involves $p(D)$
, so we rearrange terms.&lt;/p&gt;
&lt;p&gt;We can rewrite $\log p(D)$
 as:&lt;/p&gt;

$$\log p(D) = \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] + \text{KL}(q(\theta) \| p(\theta \mid D)) \tag{4}$$


&lt;p&gt;Thus:&lt;/p&gt;

$$\log p(D) = \text{ELBO}(q) + \text{KL}(q(\theta) \| p(\theta \mid D)) \tag{5}$$


&lt;p&gt;Since the KL divergence is always ‚â• 0:&lt;/p&gt;

$$\text{ELBO}(q) \leq \log p(D) \tag{6}$$


&lt;p&gt;That&amp;rsquo;s why it&amp;rsquo;s called a lower bound.&lt;/p&gt;
&lt;h2 id=&#34;-derive-elbo-and-kl&#34;&gt;üßÆ Derive ELBO and KL&lt;/h2&gt;
&lt;p&gt;Let $q(\theta)$
 be any distribution over $\theta$
 such that its support covers that of $p(\theta \mid D)$
. We&amp;rsquo;ll exploit a classic trick: insert $q(\theta)$
 into the log marginal likelihood using expectation and apply properties of KL divergence.&lt;/p&gt;
&lt;h3 id=&#34;step-1-start-with-log-evidence&#34;&gt;Step 1: Start with log evidence&lt;/h3&gt;
&lt;p&gt;We take the logarithm of $p(D)$
, and &amp;ldquo;multiply and divide&amp;rdquo; inside by $q(\theta)$
:&lt;/p&gt;

$$\log p(D) = \log \int \frac{q(\theta)}{q(\theta)} p(D \mid \theta) p(\theta) d\theta \tag{7}$$



$$= \log \int q(\theta) \cdot \frac{p(D \mid \theta) p(\theta)}{q(\theta)} d\theta \tag{8}$$



$$= \log \mathbb{E}_{q(\theta)} \left[ \frac{p(D \mid \theta) p(\theta)}{q(\theta)} \right] \tag{9}$$


&lt;p&gt;This is Jensen&amp;rsquo;s inequality time.&lt;/p&gt;
&lt;h3 id=&#34;step-2-apply-jensens-inequality&#34;&gt;Step 2: Apply Jensen&amp;rsquo;s Inequality&lt;/h3&gt;

$$\log \mathbb{E}_{q(\theta)} \left[ \frac{p(D \mid \theta) p(\theta)}{q(\theta)} \right] \geq \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D \mid \theta) p(\theta)}{q(\theta)} \right] \tag{10}$$


&lt;p&gt;That gives us the ELBO:&lt;/p&gt;

$$\text{ELBO}(q) = \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] \tag{11}$$


&lt;p&gt;So:&lt;/p&gt;

$$\log p(D) \geq \text{ELBO}(q) \tag{12}$$


&lt;p&gt;But we can go further ‚Äî let&amp;rsquo;s rewrite $\log p(D)$
 exactly in terms of ELBO + KL divergence.&lt;/p&gt;
&lt;h3 id=&#34;step-3-add-and-subtract-the-same-quantity&#34;&gt;Step 3: Add and Subtract the Same Quantity&lt;/h3&gt;
&lt;p&gt;We now write:&lt;/p&gt;

$$\log p(D) = \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] + \left( \log p(D) - \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] \right) \tag{13}$$


&lt;p&gt;Now we observe that the term in parentheses is exactly the KL divergence between $q(\theta)$
 and the true posterior:&lt;/p&gt;

$$\text{KL}(q(\theta) \| p(\theta \mid D)) = \mathbb{E}_{q(\theta)} \left[ \log \frac{q(\theta)}{p(\theta \mid D)} \right] \tag{14}$$


&lt;p&gt;But recall:&lt;/p&gt;

$$p(\theta \mid D) = \frac{p(D, \theta)}{p(D)} \Rightarrow \log p(\theta \mid D) = \log p(D, \theta) - \log p(D) \tag{15}$$


&lt;p&gt;Then:&lt;/p&gt;

$$\log \frac{q(\theta)}{p(\theta \mid D)} = \log \frac{q(\theta)}{p(D, \theta)} + \log p(D) \tag{16}$$


&lt;p&gt;Take expectation over $q(\theta)$
:&lt;/p&gt;

$$\text{KL}(q(\theta) \| p(\theta \mid D)) = -\mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] + \log p(D) \tag{17}$$


&lt;p&gt;Rearranged:&lt;/p&gt;

$$\log p(D) = \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] + \text{KL}(q(\theta) \| p(\theta \mid D)) \tag{18}$$


&lt;h3 id=&#34;definition-of-expectation-used-above&#34;&gt;Definition of Expectation used above&lt;/h3&gt;
&lt;p&gt;Note the above derivations used multiple times the definition that &lt;strong&gt;expectation of a function $f(\theta)$
 under a probability distribution $q(\theta)$
&lt;/strong&gt; is:&lt;/p&gt;

$$\mathbb{E}_{q(\theta)}[f(\theta)] = \int q(\theta) \, f(\theta) \, d\theta \tag{19}$$


&lt;h2 id=&#34;-elbo-expression-used-in-vaes&#34;&gt;üìê ELBO Expression used in VAEs&lt;/h2&gt;

$$\text{ELBO}(q) = \mathbb{E}_{q(\theta)}[\log p(D \mid \theta)] - \text{KL}(q(\theta) \| p(\theta)) \tag{20}$$


&lt;p&gt;This is the most widely used form in variational inference and VAEs. It comes from expanding the joint $p(D, \theta)$, and interpreting the ELBO as a trade-off between reconstruction and regularization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpretation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first term encourages $q(\theta)$
 to explain the data well.&lt;/li&gt;
&lt;li&gt;The second term encourages $q(\theta)$
 to stay close to the prior.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its derivation start from:&lt;/p&gt;
&lt;h3 id=&#34;1-elbokl-decomposition&#34;&gt;1. ELBO‚ÄìKL decomposition:&lt;/h3&gt;

$$\log p(D) = \text{ELBO}(q) + \text{KL}(q(\theta) \| p(\theta \mid D)) \tag{5}$$


&lt;p&gt;This is always true by the definition of the Kullback-Leibler divergence and Jensen&amp;rsquo;s inequality. Rearranging:&lt;/p&gt;

$$\text{ELBO}(q) = \log p(D) - \text{KL}(q(\theta) \| p(\theta \mid D)) \tag{22}$$


&lt;h3 id=&#34;2-definition-of-elbo-via-expected-joint&#34;&gt;2. Definition of ELBO via expected joint:&lt;/h3&gt;
&lt;p&gt;Alternatively, ELBO is often defined as:&lt;/p&gt;

$$\text{ELBO}(q) = \mathbb{E}_{q(\theta)} \left[ \log \frac{p(D, \theta)}{q(\theta)} \right] = \mathbb{E}_{q(\theta)}[\log p(D, \theta)] - \mathbb{E}_{q(\theta)}[\log q(\theta)] \tag{23}$$


&lt;p&gt;Now recall:&lt;/p&gt;

$$\log p(D, \theta) = \log p(D \mid \theta) + \log p(\theta) \tag{24}$$


&lt;p&gt;So:&lt;/p&gt;

$$\text{ELBO}(q) = \mathbb{E}_{q(\theta)}[\log p(D \mid \theta)] + \mathbb{E}_{q(\theta)}[\log p(\theta)] - \mathbb{E}_{q(\theta)}[\log q(\theta)] \tag{25}$$


&lt;p&gt;Group terms:&lt;/p&gt;

$$\text{ELBO}(q) = \mathbb{E}_{q(\theta)}[\log p(D \mid \theta)] - \text{KL}(q(\theta) \| p(\theta)) \tag{20}$$


</description>
    </item>
    
    <item>
      <title>üßÆ Math Derivation for scRNAseq Imputation (SAVER)</title>
      <link>http://localhost:1313/post/19b.scrnaseq_impute_saver/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19b.scrnaseq_impute_saver/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Single-cell RNASeq could have a large amount of zero values, representing either missing data or no expression. Imputation approaches to deal with this issue have the risk of generating false positive or irreproducible results. Model-based imputation generate fewer false-positives compared with data smoothing based methods (MAGIC and knn-smooth), but this varied greatly depending on how well the model described the datasets.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nature.com/articles/s41592-018-0033-z#Sec2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SAVER&lt;/a&gt; was the least likely to generate false or irreproducible results in &lt;a href=&#34;https://f1000research.com/articles/7-1740/v1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a benchmark of common imputation methods&lt;/a&gt;. It suggests the mathematical model used in SAVER could well depict the structure inherent to the scRNAseq datasets. Here we will derive the Poisson‚Äìgamma mixture model (also known as negative binomial model) and its Bayesian framework used in SAVER that leverage conjugate priors to estimate the posterior distribution of gene expression levels.&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;p&gt;more in another md file&lt;/p&gt;
&lt;h2 id=&#34;-goal&#34;&gt;‚úÖ Goal:&lt;/h2&gt;
 
$$
 \hat{\lambda}_{gc} = \frac{Y_{gc} + \hat{\alpha}_{gc}}{s_c + \hat{\beta}_{gc}} = \frac{s_c}{s_c + \hat{\beta}_{gc}} \cdot \frac{Y_{gc}}{s_c} + \frac{\hat{\beta}_{gc}}{s_c + \hat{\beta}_{gc}} \cdot \hat{\mu}_{gc} 
$$


&lt;p&gt;&lt;strong&gt;Gamma distribution gives:&lt;/strong&gt;&lt;/p&gt;
 
$$ \hat{\alpha}_{gc} = \hat{\beta}_{gc} \hat{\mu}_{gc} \quad \text{(1)} $$


&lt;h2 id=&#34;-step-by-step-proof&#34;&gt;üîÅ Step-by-Step Proof:&lt;/h2&gt;
&lt;p&gt;We start with:&lt;/p&gt;
 
$$ \hat{\lambda}_{gc} = \frac{Y_{gc} + \hat{\alpha}_{gc}}{s_c + \hat{\beta}_{gc}} \quad \text{(2)} $$


&lt;p&gt;Substitute  $\hat{\alpha}_{gc} = \hat{\beta}_{gc} \hat{\mu}_{gc}$ 
 from equation (1):&lt;/p&gt;
 
$$ = \frac{Y_{gc} + \hat{\beta}_{gc} \hat{\mu}_{gc}}{s_c + \hat{\beta}_{gc}} \quad \text{(3)} $$


&lt;p&gt;Split the numerator:&lt;/p&gt;
 
$$ = \frac{Y_{gc}}{s_c + \hat{\beta}_{gc}} + \frac{\hat{\beta}_{gc} \hat{\mu}_{gc}}{s_c + \hat{\beta}_{gc}} \quad \text{(4)} $$


&lt;p&gt;Now multiply and divide the first term by  $s_c$ 
:&lt;/p&gt;
 
$$ = \left(\frac{s_c}{s_c + \hat{\beta}_{gc}} \cdot \frac{Y_{gc}}{s_c}\right) + \left(\frac{\hat{\beta}_{gc}}{s_c + \hat{\beta}_{gc}} \cdot \hat{\mu}_{gc}\right) \quad \text{(5)} $$


&lt;p&gt;Which gives:&lt;/p&gt;
 
$$ \hat{\lambda}_{gc} = \frac{s_c}{s_c + \hat{\beta}_{gc}} \cdot \frac{Y_{gc}}{s_c} + \frac{\hat{\beta}_{gc}}{s_c + \hat{\beta}_{gc}} \cdot \hat{\mu}_{gc} \quad \text{(6)} $$


&lt;p&gt;‚úÖ &lt;strong&gt;Proved.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;-summary&#34;&gt;üîç Summary:&lt;/h2&gt;
&lt;p&gt;This is a weighted average of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\frac{Y_{gc}}{s_c}$ 
: observed normalized expression&lt;/li&gt;
&lt;li&gt; $\hat{\mu}_{gc}$ 
: predicted expression from prior&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With weights proportional to data confidence ( $s_c$ 
) and prior confidence ( $\hat{\beta}_{gc}$ 
).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üìä Math Derivation in Bayesian Inference-- Bypassing Marginals Using Conjugate Priors</title>
      <link>http://localhost:1313/post/19a.conjugate_prior_bayes/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19a.conjugate_prior_bayes/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Conjugate priors are a powerful concept in Bayesian statistics that allow us to simplify the process of updating our beliefs about a parameter given new data. Using conjugate priors allows you to bypass computing marginal distributions because the posterior has the same functional form as the prior, making the normalization constant analytically tractable.&lt;/p&gt;
&lt;h4 id=&#34;standard-bayes-theorem&#34;&gt;Standard Bayes&amp;rsquo; Theorem&lt;/h4&gt;
 $$P(\theta|D) = \frac{P(D|\theta)P(\theta)}{P(D)}$$ 

&lt;p&gt;where the marginal likelihood is:&lt;/p&gt;
 $$P(D) = \int P(D|\theta)P(\theta)d\theta$$ 

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;
&lt;p&gt;Computing  $P(D)$ 
 often requires intractable integrals, especially in high dimensions.&lt;/p&gt;
&lt;h4 id=&#34;conjugate-prior-solution&#34;&gt;Conjugate Prior Solution&lt;/h4&gt;
&lt;p&gt;When the prior  $P(\theta)$ 
 is conjugate to the likelihood  $P(D|\theta)$ 
, we have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prior:&lt;/strong&gt;  $P(\theta) \propto f(\theta; \alpha_0)$ 
 (some parametric form)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Likelihood:&lt;/strong&gt;  $P(D|\theta) \propto g(\theta; D)$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Posterior:&lt;/strong&gt;  $P(\theta|D) \propto f(\theta; \alpha_n)$ 
 (same form as prior)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where  $\alpha_n = h(\alpha_0, D)$ 
 is a simple update function. Specifically, since we know the posterior belongs to the same family as the prior, we can write:&lt;/p&gt;
 $$P(\theta|D) = \frac{f(\theta; \alpha_n)}{Z(\alpha_n)}$$ 

&lt;p&gt;where  $Z(\alpha_n)$ 
 is the normalization constant for the known distribution family, which has a closed form.&lt;/p&gt;
&lt;h2 id=&#34;example-beta-binomial-conjugacy&#34;&gt;Example: Beta-Binomial Conjugacy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prior:&lt;/strong&gt;  $P(\theta) = \text{Beta}(\alpha, \beta)$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Likelihood:&lt;/strong&gt;  $P(D|\theta) = \text{Binomial}(n, \theta)$ 
 with  $s$ 
 successes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Posterior:&lt;/strong&gt;  $P(\theta|D) = \text{Beta}(\alpha + s, \beta + n - s)$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We never need to compute:&lt;/p&gt;
 $$P(D) = \int_0^1 \binom{n}{s}\theta^s(1-\theta)^{n-s} \cdot \frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)} d\theta$$ 

&lt;p&gt;Instead, we directly get the posterior parameters and use the known Beta normalization. This explains why conjugate priors are so powerful&amp;ndash; they let us skip the hardest part of Bayesian computation. Let me break down what&amp;rsquo;s happening:&lt;/p&gt;
&lt;h4 id=&#34;the-hard-way-without-conjugate-priors&#34;&gt;The Hard Way (Without Conjugate Priors)&lt;/h4&gt;
&lt;p&gt;To get the posterior, we&amp;rsquo;d normally need to compute this integral:&lt;/p&gt;
 $$P(D) = \int_0^1 \binom{n}{s}\theta^s(1-\theta)^{n-s} \cdot \frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)} d\theta$$ 

&lt;p&gt;This integral combines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\binom{n}{s}\theta^s(1-\theta)^{n-s}$ 
 (binomial likelihood)&lt;/li&gt;
&lt;li&gt; $\frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)}$ 
 (Beta prior)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-this-integral-is-nasty&#34;&gt;Why This Integral is Nasty&lt;/h4&gt;
&lt;p&gt;Even though this particular integral has a closed form, in general such integrals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;May not have analytical solutions&lt;/li&gt;
&lt;li&gt;Require numerical integration (expensive, approximate)&lt;/li&gt;
&lt;li&gt;Get exponentially harder in higher dimensions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-conjugate-prior-shortcut&#34;&gt;The Conjugate Prior Shortcut&lt;/h4&gt;
&lt;p&gt;Instead of computing that integral, we use the conjugate relationship:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Recognize the pattern:&lt;/strong&gt;
 $$\theta^s(1-\theta)^{n-s} \times \theta^{\alpha-1}(1-\theta)^{\beta-1} = \theta^{(s+\alpha)-1}(1-\theta)^{(n-s+\beta)-1} \quad (1)$$
&lt;/p&gt;
&lt;p&gt;This looks like a Beta distribution with parameters  $(\alpha + s, \beta + n - s)$ 
&lt;/p&gt;
&lt;p&gt;We derive below in &lt;a href=&#34;#math-derivation&#34;&gt;next section&lt;/a&gt; how this leads to the marginal likelihood:&lt;/p&gt;
 $$P(D) = \frac{B(\alpha+s, \beta+n-s)}{B(\alpha, \beta)} \binom{n}{s} \quad (2)$$ 

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write the posterior directly:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We substitute equation (1) and (2) in Standard Bayes&amp;rsquo; Theorem to get the posterior distribution:&lt;/p&gt;
 $$P(\theta|D) = \text{Beta}(\alpha + s, \beta + n - s) = \frac{\theta^{\alpha+s-1}(1-\theta)^{\beta+n-s-1}}{B(\alpha+s, \beta+n-s)}$$ 

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But for getting the posterior distribution, we don&amp;rsquo;t even need  $P(D)$ 
 - we just need the updated parameters!&lt;/p&gt;
&lt;h4 id=&#34;interim-summary&#34;&gt;Interim Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Without conjugacy:&lt;/em&gt; Solve a potentially intractable integral&lt;/li&gt;
&lt;li&gt;&lt;em&gt;With conjugacy:&lt;/em&gt; Simple parameter update:  $(\alpha, \beta) \rightarrow (\alpha + s, \beta + n - s)$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The normalization &amp;ldquo;just works&amp;rdquo; because we&amp;rsquo;re staying within the same distributional family where normalization constants are known.&lt;/p&gt;
&lt;h2 id=&#34;math-derivationa-idmath-derivationa&#34;&gt;Math Derivation&lt;a id=&#34;math-derivation&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a &lt;strong&gt;step-by-step derivation of the marginal likelihood integral for the Beta-Binomial conjugate prior relationship&lt;/strong&gt;. This shows how we can transform a potentially difficult integral into a simple ratio of Beta functions, which is the essence of why conjugate priors are so powerful in Bayesian inference.&lt;/p&gt;
&lt;h3 id=&#34;starting-point-the-marginal-likelihood-integral&#34;&gt;Starting Point: The Marginal Likelihood Integral&lt;/h3&gt;
 $$P(D) = \int_0^1 \binom{n}{s}\theta^s(1-\theta)^{n-s} \cdot \frac{\theta^{\alpha-1}(1-\theta)^{\beta-1}}{B(\alpha,\beta)} d\theta \quad (1)$$ 

&lt;h3 id=&#34;step-1-factor-out-constants&#34;&gt;Step 1: Factor Out Constants&lt;/h3&gt;
&lt;p&gt;The binomial coefficient  $\binom{n}{s}$ 
 and  $\frac{1}{B(\alpha,\beta)}$ 
 don&amp;rsquo;t depend on  $\theta$ 
, so we can pull them outside the integral:&lt;/p&gt;
 $$P(D) = \binom{n}{s} \cdot \frac{1}{B(\alpha,\beta)} \int_0^1 \theta^s(1-\theta)^{n-s} \cdot \theta^{\alpha-1}(1-\theta)^{\beta-1} d\theta \quad (2)$$ 

&lt;h3 id=&#34;step-2-combine-the-powers&#34;&gt;Step 2: Combine the Powers&lt;/h3&gt;
&lt;p&gt;Using the exponent rule  $x^a \cdot x^b = x^{a+b}$ 
:&lt;/p&gt;
 $$P(D) = \binom{n}{s} \cdot \frac{1}{B(\alpha,\beta)} \int_0^1 \theta^{s+\alpha-1}(1-\theta)^{n-s+\beta-1} d\theta \quad (3)$$ 

&lt;h3 id=&#34;step-3-recognize-the-beta-function-integral&#34;&gt;Step 3: Recognize the Beta Function Integral&lt;/h3&gt;
&lt;p&gt;The integral  $\int_0^1 \theta^{a-1}(1-\theta)^{b-1} d\theta$ 
 is exactly the definition of the Beta function  $B(a,b)$ 
.&lt;/p&gt;
&lt;p&gt;In our case, we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $a = s + \alpha$ 
&lt;/li&gt;
&lt;li&gt; $b = n - s + \beta$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So:
 $$\int_0^1 \theta^{s+\alpha-1}(1-\theta)^{n-s+\beta-1} d\theta = B(s+\alpha, n-s+\beta) = B(\alpha+s, \beta+n-s) \quad (4)$$ 
&lt;/p&gt;
&lt;h3 id=&#34;step-4-substitute-back&#34;&gt;Step 4: Substitute Back&lt;/h3&gt;
 $$P(D) = \binom{n}{s} \cdot \frac{1}{B(\alpha,\beta)} \cdot B(\alpha+s, \beta+n-s) \quad (5)$$ 

&lt;h3 id=&#34;final-result&#34;&gt;Final Result&lt;/h3&gt;
&lt;p&gt;Rearranging:
 $$P(D) = \frac{B(\alpha+s, \beta+n-s)}{B(\alpha,\beta)} \binom{n}{s} \quad (6)$$ 
&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is why conjugate priors are so computationally elegant: they transform intractable integrals into simple ratios of known functions. Specifically for the Beta-Binomial case:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;We avoided numerical integration&lt;/strong&gt; - instead of computing a potentially difficult integral, we used the known relationship between integrals and Beta functions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Both Beta functions have closed forms&lt;/strong&gt; -  $B(a,b) = \frac{\Gamma(a)\Gamma(b)}{\Gamma(a+b)}$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This gives us the exact marginal likelihood&lt;/strong&gt; - no approximation needed&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ EM algorithm, EM with max a posterior, full Bayesian inferences (variational Bayesian) which might be used in auto-coder</title>
      <link>http://localhost:1313/post/19.ememwithmapvariationalbayesian/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/19.ememwithmapvariationalbayesian/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ what makes neural network so powerful and popular</title>
      <link>http://localhost:1313/post/18.what_make_neural_network_powerful_popular/</link>
      <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/18.what_make_neural_network_powerful_popular/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Smooth tests of goodness of Fit used in Stijn Hawinkel ‚Äôs plos one paper</title>
      <link>http://localhost:1313/post/17.smooth.tests.of.goodness.of.fit/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/17.smooth.tests.of.goodness.of.fit/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ how good is negative binomial, why AI works for biology</title>
      <link>http://localhost:1313/post/16.how.good.is.negative.binominal/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/16.how.good.is.negative.binominal/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Seurat to analysis large sample size of bulk RNAseq. Discuss Wixcox is better for clinical samples</title>
      <link>http://localhost:1313/post/15.use.seurat.for.bulk.rnaseq/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/15.use.seurat.for.bulk.rnaseq/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Deep Neural Network to integrate scRNAseq and spatial genomics</title>
      <link>http://localhost:1313/post/13z.scvi_integrate_scrna_spatial/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/13z.scvi_integrate_scrna_spatial/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Spatial genomics presentation</title>
      <link>http://localhost:1313/post/14.spatial_genomics_presentation/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/14.spatial_genomics_presentation/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Bayesian abundance statistics in PRCC</title>
      <link>http://localhost:1313/post/12.basian_abundance_statistics/</link>
      <pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/12.basian_abundance_statistics/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Yolov8</title>
      <link>http://localhost:1313/post/13.yolov8/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/13.yolov8/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Math Derivation of CME-defined Stochastic Model of RNA Velocity</title>
      <link>http://localhost:1313/post/11a.velocity_unraveled/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11a.velocity_unraveled/</guid>
      <description>&lt;h2 id=&#34;overview-of-eq18-from-velocity-unraveledhttpsjournalsplosorgploscompbiolarticleid101371journalpcbi1010492&#34;&gt;Overview of Eq(18) from &lt;a href=&#34;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1010492&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;velocity unraveled&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The stochastic model defined by the Chemical Master Equation (CME) outperforms deterministic ODE models in capturing the inherent stochasticity of single-cell RNA sequencing (scRNA-seq) data. It is actively developed to provide a more accurate representation of feature counts and their underlying biological processes. And it has also enabled the generation of simulated data to evaluate deterministic ODE models and associated data processing methods commonly used in scRNA-seq analysis. Thus I derive the key equations from the paper &lt;a href=&#34;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1010492&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;velocity unraveled&lt;/a&gt;, a pivotal paper demonstrating the transformative potential of stochastic approaches.&lt;/p&gt;
&lt;h3 id=&#34;-1-probability-generating-function-pgf&#34;&gt;üß¨ 1. Probability generating function (PGF)&lt;/h3&gt;
&lt;p&gt;We define the state of a cell as:&lt;/p&gt;
 
$$x = (x_u, x_s)$$ 


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $x_u$ 
: unspliced mRNA count&lt;/li&gt;
&lt;li&gt; $x_s$ 
: spliced mRNA count&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now write the generating function of their joint distribution:&lt;/p&gt;
 
$$G(u_u, u_s, t) = \sum_x P(x,t)(u_u + 1)^{x_u}(u_s + 1)^{x_s}$$ 


&lt;p&gt;This is a modified bivariate probability generating function, where the &amp;ldquo;+1&amp;rdquo; shift is standard in certain moment-generating setups. It lets you cleanly extract moments via derivatives of  $G$ 
.&lt;/p&gt;
&lt;h3 id=&#34;-2-characteristic-of-odes-derived-from-cme&#34;&gt;‚öôÔ∏è 2. Characteristic of ODEs derived from CME&lt;/h3&gt;
 $$U_1(u_u, u_s, s) = \frac{u_s \beta}{\beta - \gamma} e^{-\gamma s} + \left(u_u - \frac{u_s \beta}{\beta - \gamma}\right) e^{-\beta s}$$ 

&lt;p&gt;This expression arises from &lt;a href=&#34;#Derive-G&#34;&gt;solving a linear system of ODEs for the chemical master equation (CME) via generating functions&lt;/a&gt;, and it essentially encodes how the state propagates in time. It&amp;rsquo;s derived from how unspliced ‚Üí spliced reactions occur over time.&lt;/p&gt;
&lt;h3 id=&#34;-3-log-generating-function-fa-idlog-generating-function-first-introduceda&#34;&gt;üß† 3. Log-generating function $f$&lt;a id=&#34;log-generating-function-first-introduced&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 
$$f(u_u, u_s, t) := \ln G(u_u, u_s, t) = \int_0^t \alpha(t-s) U_1(u_u, u_s, s) ds$$ 


This integral form is derived in &lt;a href=&#34;#Derive-log-generating-function&#34;&gt;later section&lt;/a&gt; and it tells us how the log of the generating function evolves, driven by transcription rate  $\alpha(t-s)$ 
 and the system dynamics encoded in  $U_1$ 
. Essentially, it&amp;rsquo;s the cumulative effect of production and conversion over time.&lt;/p&gt;
&lt;p&gt;Then the log-GF can be written in a linear form in  $u_u$ 
 and  $u_s$ 
:&lt;/p&gt;
 
$$f(u_u, u_s, t) = \mu_u(t) u_u + \mu_s(t) u_s$$ 


&lt;p&gt;This suggests that the process is governed by Poisson distributions, since the log-GF is linear in the arguments.&lt;/p&gt;
&lt;h3 id=&#34;-4-explicit-distribution--product-of-poissons&#34;&gt;üìä 4. Explicit distribution ‚Äî product of Poissons&lt;/h3&gt;
&lt;p&gt;Given the above, we can now recover the joint distribution  $P(x,t)$ 
:&lt;/p&gt;
 
$$P(x,t) = \frac{\mu_u(t)^{x_u} e^{-\mu_u(t)}}{x_u!} \cdot \frac{\mu_s(t)^{x_s} e^{-\mu_s(t)}}{x_s!}$$ 


&lt;p&gt;So:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $x_u \sim \text{Poisson}(\mu_u(t))$ 
&lt;/li&gt;
&lt;li&gt; $x_s \sim \text{Poisson}(\mu_s(t))$ 
&lt;/li&gt;
&lt;li&gt;Jointly independent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This model assumes that given time  $t$ 
, the spliced and unspliced counts are independent Poisson-distributed variables, whose rates  $\mu_u(t), \mu_s(t)$ 
 evolve in time according to the underlying biochemistry.&lt;/p&gt;
&lt;h3 id=&#34;-5-time-averaged-distribution&#34;&gt;üßÆ 5. Time-averaged distribution&lt;/h3&gt;
&lt;p&gt;Finally, since single-cell sequencing samples cells asynchronously in time, the observed distribution over counts is not  $P(x,t)$ 
 at a fixed  $t$ 
, but a time-averaged version:&lt;/p&gt;
 
$$P(x) = \frac{1}{T} \int_0^T P(x,t) dt$$ 


&lt;p&gt;This is a mixture of Poissons over time, reflecting the asynchrony of cells in scRNA-seq snapshots. This averaging introduces overdispersion, which is critical to explain the variance observed in real data ‚Äî greater than what a single Poisson can model.&lt;/p&gt;
&lt;h2 id=&#34;a-pgf-introduction&#34;&gt;A) PGF Introduction&lt;/h2&gt;
&lt;h3 id=&#34;1-multivariate-probability-generating-function-pgf&#34;&gt;1. Multivariate Probability Generating Function (PGF)&lt;/h3&gt;
&lt;p&gt;This function encodes the entire joint distribution of the random vector  $x = (x_u, x_s)$ 
, i.e., the number of unspliced ( $x_u$ 
) and spliced ( $x_s$ 
) transcripts.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a bivariate generating function, meaning it&amp;rsquo;s a function of two complex variables  $u_u$ 
 and  $u_s$ 
.&lt;/p&gt;
&lt;p&gt;The inclusion of  $+1$ 
 makes it a shifted PGF, often done for technical convenience (especially when converting to moment-generating functions).&lt;/p&gt;
&lt;h3 id=&#34;2-moment-extraction&#34;&gt;2. Moment Extraction&lt;/h3&gt;
&lt;p&gt;From the properties of generating functions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First Moments:&lt;/strong&gt;&lt;/p&gt;
 
$$ \frac{\partial G}{\partial u_u}\bigg|_{u_u = u_s = 0} = E[x_u], \quad \frac{\partial G}{\partial u_s}\bigg|_{u_u = u_s = 0} = E[x_s] $$ 


&lt;p&gt;&lt;strong&gt;Second Moments / Covariances:&lt;/strong&gt;&lt;/p&gt;
 
$$ \frac{\partial^2 G}{\partial u_u^2}\bigg|_{u_u = u_s = 0} = E[x_u(x_u - 1)], \quad \frac{\partial^2 G}{\partial u_u \partial u_s}\bigg|_{u_u = u_s = 0} = E[x_u x_s] $$ 


&lt;p&gt;These derivatives allow us to compute variances, covariances, and higher-order statistics of transcript counts.&lt;/p&gt;
&lt;h3 id=&#34;3-connection-to-biological-reactions&#34;&gt;3. Connection to Biological Reactions&lt;/h3&gt;
&lt;p&gt;In a linear RNA kinetic model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $x_u$ 
: produced at rate  $\alpha$ 
, converted to  $x_s$ 
 at rate  $\beta$ 
&lt;/li&gt;
&lt;li&gt; $x_s$ 
: degraded at rate  $\gamma$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The evolution of  $G(u_u, u_s, t)$ 
 over time follows a partial differential equation that arises from the Chemical Master Equation (CME), which governs the time evolution of probability distributions in chemical kinetics.&lt;/p&gt;
&lt;h3 id=&#34;4-time-dependence&#34;&gt;4. Time-Dependence&lt;/h3&gt;
&lt;p&gt; $G$ 
 is explicitly time-dependent, evolving as the distribution  $P(x,t)$ 
 changes.&lt;/p&gt;
&lt;p&gt;In some derivations, the log-generating function  $f = \log G$ 
 is linear in  $u_u, u_s$ 
, which implies that  $x_u, x_s \sim \text{Poisson}(\mu_u(t)), \text{Poisson}(\mu_s(t))$ 
 and are independent.&lt;/p&gt;
&lt;h3 id=&#34;5-decay-and-stationarity&#34;&gt;5. Decay and Stationarity&lt;/h3&gt;
&lt;p&gt;As  $t \to \infty$ 
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The means  $\mu_u(t), \mu_s(t)$ 
 stabilize.&lt;/li&gt;
&lt;li&gt;So does the generating function, converging to that of a product of Poisson distributions (one for each transcript species).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-why-it-matters&#34;&gt;Summary: Why It Matters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encodes all statistical information&lt;/strong&gt; about  $x_u, x_s$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enables exact computation&lt;/strong&gt; of moments, cumulants, and correlations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Links stochastic biochemical kinetics&lt;/strong&gt; with observed scRNA-seq distributions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supports modeling&lt;/strong&gt; of noise, burstiness, and cell-to-cell heterogeneity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b-derive-u_us-via-method-of-characteristics-a-idderive-ga&#34;&gt;B) Derive $u_u(s)$ via method of characteristics &lt;a id=&#34;Derive-G&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; $U_1(u_u, u_s, s)$ 
 is claimed to be  $u_u(s)$ 
, which is the solution to the ODE derived from the Chemical Master Equation (CME) for the two-species birth-death process representing unspliced (u) and spliced (s) mRNA dynamics.&lt;/p&gt;
 $$U_1(u_u, u_s, s) := u_u(s) = \frac{u_s \beta}{\beta - \gamma} e^{-\gamma s} + \left(u_u - \frac{u_s \beta}{\beta - \gamma}\right) e^{-\beta s}$$ 

&lt;p&gt;This derivation uses the method of characteristics applied to the generating function of a stochastic process governed by the Chemical Master Equation (CME). We consider a two-species birth-death process representing unspliced (u) and spliced (s) mRNA dynamics.&lt;/p&gt;
&lt;h3 id=&#34;step-1-define-the-generating-function&#34;&gt;Step 1: Define the Generating Function&lt;/h3&gt;
&lt;p&gt;Let the joint probability distribution of unspliced and spliced mRNA at time  $t$ 
 be  $P(x_u, x_s, t)$ 
. The generating function is:&lt;/p&gt;
 $$G(z_u, z_s, t) = \sum_{x_u, x_s} P(x_u, x_s, t) z_u^{x_u} z_s^{x_s}$$ 

&lt;p&gt;We define new variables:&lt;/p&gt;
 $$z_u = u_u + 1, \quad z_s = u_s + 1$$ 

&lt;p&gt;so the generating function becomes:&lt;/p&gt;
 $$G(u_u, u_s, t) = \sum_{x_u, x_s} P(x_u, x_s, t) (u_u + 1)^{x_u} (u_s + 1)^{x_s}$$ 

&lt;h3 id=&#34;step-2-cme-and-corresponding-pde&#34;&gt;Step 2: CME and Corresponding PDE&lt;/h3&gt;
&lt;p&gt;The CME for this system is governed by the reactions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transcription (birth of unspliced): rate  $\alpha$ 
&lt;/li&gt;
&lt;li&gt;Splicing:  $u \xrightarrow{\beta} s$ 
&lt;/li&gt;
&lt;li&gt;Degradation:  $s \xrightarrow{\gamma} \emptyset$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the CME, the PDE for  $G$ 
 is below as derived in &lt;a href=&#34;#Derive-step-3-of-B&#34;&gt;another section&lt;/a&gt;):&lt;/p&gt;
 $$\frac{\partial G}{\partial t} = \alpha u_u G + \beta(u_s - u_u)\frac{\partial G}{\partial u_u} - \gamma u_s \frac{\partial G}{\partial u_s}$$ 

&lt;h3 id=&#34;step-3-method-of-characteristics-turn-pde-into-odes&#34;&gt;Step 3: Method of Characteristics (turn PDE into ODEs)&lt;/h3&gt;
&lt;p&gt;We now transform this PDE into ODEs using the method of characteristics. Let  $u_u(s), u_s(s), G(s)$ 
 be functions of characteristic time  $s$ 
 such that along these paths:&lt;/p&gt;
 $$\frac{du_u}{ds} = \beta(u_s - u_u), \quad \frac{du_s}{ds} = -\gamma u_s, \quad \frac{dG}{ds} = \alpha u_u G$$ 

&lt;p&gt;Let&amp;rsquo;s solve these:&lt;/p&gt;
&lt;h3 id=&#34;step-4-solve-for-u_ss&#34;&gt;Step 4: Solve for $u_s(s)$&lt;/h3&gt;
 $$\frac{du_s}{ds} = -\gamma u_s \Rightarrow u_s(s) = u_s(0) e^{-\gamma s}$$ 

&lt;h3 id=&#34;step-5-solve-for-u_us&#34;&gt;Step 5: Solve for $u_u(s)$&lt;/h3&gt;
&lt;p&gt;Use integrating factor method:&lt;/p&gt;
 $$\frac{du_u}{ds} + \beta u_u = \beta u_s(s) = \beta u_s(0) e^{-\gamma s}$$ 

&lt;p&gt;Multiply both sides by  $e^{\beta s}$ 
:&lt;/p&gt;
 $$\frac{d}{ds}(u_u e^{\beta s}) = \beta u_s(0) e^{(\beta - \gamma)s}$$ 

&lt;p&gt;Integrate:&lt;/p&gt;
 $$u_u(s) e^{\beta s} = u_u(0) + \frac{\beta u_s(0)}{\beta - \gamma}(e^{(\beta - \gamma)s} - 1)$$ 

&lt;p&gt;Solve for  $u_u(s)$ 
:&lt;/p&gt;
 $$u_u(s) = u_u(0) e^{-\beta s} + \frac{\beta u_s(0)}{\beta - \gamma}(e^{-\gamma s} - e^{-\beta s})$$ 

&lt;h3 id=&#34;step-6-define-u_1u_u-u_s-s&#34;&gt;Step 6: Define $U_1(u_u, u_s, s)$&lt;/h3&gt;
&lt;p&gt;We identify:&lt;/p&gt;
 $$U_1(u_u, u_s, s) := u_u(s) = \frac{u_s \beta}{\beta - \gamma} e^{-\gamma s} + \left(u_u - \frac{u_s \beta}{\beta - \gamma}\right) e^{-\beta s}$$ 

&lt;h2 id=&#34;b1-derive-pde-from-cme-step-2-of-b&#34;&gt;B.1) Derive PDE from CME (step 2 of B)&lt;/h2&gt;
&lt;h3 id=&#34;step-1-write-the-cme-explicitly&#34;&gt;Step 1: Write the CME explicitly&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;Derive-step-3-of-B&#34;&gt;&lt;/a&gt;
The CME for the joint distribution  $P(x_u, x_s, t)$ 
 of the unspliced  $x_u$ 
 and spliced  $x_s$ 
 RNA is:&lt;/p&gt;

$$
\frac{d}{dt}P(x_u, x_s, t) = \alpha[P(x_u - 1, x_s, t) - P(x_u, x_s, t)] + \beta[(x_u + 1)P(x_u + 1, x_s - 1, t) - x_u P(x_u, x_s, t)] + \gamma[(x_s + 1)P(x_u, x_s + 1, t) - x_s P(x_u, x_s, t)] \qquad (9)
$$


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\alpha$ 
: production rate of unspliced RNA&lt;/li&gt;
&lt;li&gt; $\beta$ 
: splicing rate (unspliced ‚Üí spliced)&lt;/li&gt;
&lt;li&gt; $\gamma$ 
: degradation rate of spliced RNA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-2-define-the-generating-function-gu_u-u_s-t&#34;&gt;Step 2: Define the generating function $G(u_u, u_s, t)$&lt;/h3&gt;

$$
G(u_u, u_s, t) := \sum_{x_u=0}^{\infty} \sum_{x_s=0}^{\infty} P(x_u, x_s, t)(u_u + 1)^{x_u}(u_s + 1)^{x_s} \qquad (10)
$$


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using  $(u_u + 1)^{x_u}$ 
 instead of  $u_u^{x_u}$ 
 is a common shift to simplify derivatives later, but you can equivalently define with  $u_u^{x_u}$ 
.&lt;/p&gt;
&lt;h3 id=&#34;step-3-take-time-derivative-of-g&#34;&gt;Step 3: Take time derivative of $G$&lt;/h3&gt;
&lt;p&gt;Using linearity of sums and derivatives:&lt;/p&gt;

$$
\frac{\partial G}{\partial t} = \sum_{x_u=0}^{\infty} \sum_{x_s=0}^{\infty} \frac{\partial P(x_u, x_s, t)}{\partial t} (u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;Substitute the CME expression:&lt;/p&gt;

$$
= \sum_{x_u,x_s} [\alpha(P(x_u - 1, x_s, t) - P(x_u, x_s, t)) + \beta((x_u + 1)P(x_u + 1, x_s - 1, t) - x_u P(x_u, x_s, t)) + \gamma((x_s + 1)P(x_u, x_s + 1, t) - x_s P(x_u, x_s, t))](u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;h3 id=&#34;step-4-evaluate-each-term-separately&#34;&gt;Step 4: Evaluate each term separately&lt;/h3&gt;
&lt;h4 id=&#34;term-1-transcription&#34;&gt;Term 1: Transcription&lt;/h4&gt;

$$
\sum_{x_u,x_s} \alpha(P(x_u - 1, x_s) - P(x_u, x_s))(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;Rewrite the first sum by shifting  $x_u \to x_u + 1$ 
 in the first part:&lt;/p&gt;

$$
\sum_{x_u=0}^{\infty} P(x_u - 1, x_s)(u_u + 1)^{x_u} = \sum_{x_u&#39;=-1}^{\infty} P(x_u&#39;, x_s)(u_u + 1)^{x_u&#39; + 1}
$$


&lt;p&gt;Since  $P(x_u&#39;, x_s) = 0$ 
 for  $x_u&#39; &lt; 0$ 
, this becomes:&lt;/p&gt;

$$
(u_u + 1) \sum_{x_u&#39;=0}^{\infty} P(x_u&#39;, x_s)(u_u + 1)^{x_u&#39;}
$$


&lt;p&gt;Therefore,&lt;/p&gt;

$$
\sum_{x_u,x_s} \alpha(P(x_u - 1, x_s) - P(x_u, x_s))(u_u + 1)^{x_u}(u_s + 1)^{x_s} = \alpha((u_u + 1)G - G) = \alpha u_u G
$$


&lt;h4 id=&#34;term-2-splicing&#34;&gt;Term 2: Splicing&lt;/h4&gt;

$$
\sum_{x_u,x_s} \beta((x_u + 1)P(x_u + 1, x_s - 1) - x_u P(x_u, x_s))(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;Split into two sums:&lt;/p&gt;

$$
S_1 = \beta \sum_{x_u,x_s} (x_u + 1)P(x_u + 1, x_s - 1)(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$



$$
S_2 = -\beta \sum_{x_u,x_s} x_u P(x_u, x_s)(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;Change indices in  $S_1$ 
:&lt;/p&gt;
&lt;p&gt;Let  $x_u&#39; = x_u + 1$ 
,  $x_s&#39; = x_s - 1$ 
, so  $x_u = x_u&#39; - 1$ 
,  $x_s = x_s&#39; + 1$ 
&lt;/p&gt;
&lt;p&gt;Then,&lt;/p&gt;

$$
S_1 = \beta \sum_{x_u&#39;=1}^{\infty} \sum_{x_s&#39;=0}^{\infty} x_u&#39; P(x_u&#39;, x_s&#39;)(u_u + 1)^{x_u&#39; - 1}(u_s + 1)^{x_s&#39; + 1}
$$


&lt;p&gt;Rearranged:&lt;a id=&#34;why_sum_is_equivalence&#34;&gt;&lt;/a&gt;
(see &lt;a href=&#34;#b2-why-double-sum-equivalence-holds-in-term-2-of-step4-in-b1&#34;&gt;note&lt;/a&gt;)&lt;/p&gt;

$$
= \beta(u_s + 1) \sum_{x_u&#39;,x_s&#39;} x_u&#39; P(x_u&#39;, x_s&#39;)(u_u + 1)^{x_u&#39; - 1}(u_s + 1)^{x_s&#39;}
$$


&lt;p&gt; $S_2$ 
 is:&lt;/p&gt;

$$
S_2 = -\beta \sum_{x_u,x_s} x_u P(x_u, x_s)(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;Now recognize:&lt;/p&gt;

$$
\frac{\partial G}{\partial u_u} = \sum_{x_u,x_s} x_u P(x_u, x_s)(u_u + 1)^{x_u - 1}(u_s + 1)^{x_s}
$$


&lt;p&gt;So:&lt;/p&gt;

$$
S_1 = \beta(u_s + 1) \frac{\partial G}{\partial u_u}
$$


&lt;p&gt;and&lt;/p&gt;

$$
S_2 = -\beta(u_u + 1) \frac{\partial G}{\partial u_u}
$$


&lt;p&gt;Putting together:&lt;/p&gt;

$$
\text{Splicing term} = \beta((u_s + 1) - (u_u + 1)) \frac{\partial G}{\partial u_u} = \beta(u_s - u_u) \frac{\partial G}{\partial u_u}
$$


&lt;h4 id=&#34;term-3-degradation&#34;&gt;Term 3: Degradation&lt;/h4&gt;

$$
\sum_{x_u,x_s} \gamma((x_s + 1)P(x_u, x_s + 1) - x_s P(x_u, x_s))(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;Split into:&lt;/p&gt;

$$
S_3 = \gamma \sum_{x_u,x_s} (x_s + 1)P(x_u, x_s + 1)(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$



$$
S_4 = -\gamma \sum_{x_u,x_s} x_s P(x_u, x_s)(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;We have:&lt;/p&gt;

$$
S_3 = \gamma \sum_{x_u,x_s} (x_s + 1)P(x_u, x_s + 1)(u_u + 1)^{x_u}(u_s + 1)^{x_s}
$$


&lt;p&gt;With the substitution  $x_s&#39; = x_s + 1$ 
, we get  $x_s = x_s&#39; - 1$ 
 and:&lt;/p&gt;

$$
S_3 = \gamma \sum_{x_u=0}^{\infty} \sum_{x_s&#39;=1}^{\infty} x_s&#39; P(x_u, x_s&#39;)(u_u + 1)^{x_u}(u_s + 1)^{x_s&#39; - 1}
$$



$$
= \frac{\gamma}{u_s + 1} \sum_{x_u,x_s&#39;} x_s&#39; P(x_u, x_s&#39;)(u_u + 1)^{x_u}(u_s + 1)^{x_s&#39;}
$$


&lt;p&gt;Recognize&lt;/p&gt;
&lt;p&gt;
$$
\frac{\partial G}{\partial u_s} = \sum_{x_u,x_s} x_s P(x_u, x_s)(u_u + 1)^{x_u}(u_s + 1)^{x_s - 1}
$$



$$
= \frac{\gamma}{u_s + 1} \cdot (u_s + 1) \frac{\partial G}{\partial u_s} = \gamma \frac{\partial G}{\partial u_s}
$$

&lt;/p&gt;
&lt;p&gt;And:&lt;/p&gt;

$$
S_4 = -\gamma(u_s + 1) \frac{\partial G}{\partial u_s}
$$


&lt;p&gt;So the degradation term is:&lt;/p&gt;

$$
\text{Degradation term} = \gamma \frac{\partial G}{\partial u_s} - \gamma(u_s + 1) \frac{\partial G}{\partial u_s} = -\gamma u_s \frac{\partial G}{\partial u_s}
$$


&lt;h3 id=&#34;final-result&#34;&gt;Final Result&lt;/h3&gt;
&lt;p&gt;Combining all terms:&lt;/p&gt;

$$
\frac{\partial G}{\partial t} = \alpha u_u G + \beta(u_s - u_u) \frac{\partial G}{\partial u_u} - \gamma u_s \frac{\partial G}{\partial u_s} \qquad (11)
$$


&lt;h2 id=&#34;b2-why-double-sum-equivalence-holds-in-term-2-of-step4-in-b1why_sum_is_equivalence&#34;&gt;B.2) Why Double Sum Equivalence Holds &lt;a href=&#34;#why_sum_is_equivalence&#34;&gt;in Term 2 of Step4 in B.1)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This equivalence depends on what values the indices range over and how the function being summed behaves.&lt;/p&gt;
&lt;h3 id=&#34;1-notation&#34;&gt;1. Notation&lt;/h3&gt;
&lt;p&gt;When we write:&lt;/p&gt;
 $$\sum_{x_u&#39;, x_s&#39;} f(x_u&#39;, x_s&#39;)$$ 

&lt;p&gt;This is shorthand for:&lt;/p&gt;
 $$\sum_{x_u&#39; = 0}^{\infty} \sum_{x_s&#39; = 0}^{\infty} f(x_u&#39;, x_s&#39;)$$ 

&lt;p&gt;That is, summing over all nonnegative integer pairs  $(x_u&#39;, x_s&#39;) \in \mathbb{N}_0 \times \mathbb{N}_0$ 
.&lt;/p&gt;
&lt;h3 id=&#34;2-suspect-in-the-derivation&#34;&gt;2. &amp;lsquo;Suspect&amp;rsquo; in the derivation&lt;/h3&gt;
&lt;p&gt;In your original sum:&lt;/p&gt;
 $$\sum_{x_u&#39; = 1}^{\infty} \sum_{x_s&#39; = 0}^{\infty} x_u&#39; P(x_u&#39;, x_s&#39;) (u_u + 1)^{x_u&#39; - 1} (u_s + 1)^{x_s&#39;}$$ 

&lt;p&gt;The lower bound of  $x_u&#39;$ 
 is 1 because we performed a change of variables from  $x_u = x_u&#39; - 1$ 
, and in the original sum,  $x_u \geq 0$ 
, which implies  $x_u&#39; \geq 1$ 
.&lt;/p&gt;
&lt;p&gt;So the double sum with bounds:&lt;/p&gt;
 $$\sum_{x_u&#39; = 1}^{\infty} \sum_{x_s&#39; = 0}^{\infty}$$ 

&lt;p&gt;is not exactly the same as:&lt;/p&gt;
 $$\sum_{x_u&#39; = 0}^{\infty} \sum_{x_s&#39; = 0}^{\infty}$$ 

&lt;p&gt;But if we define:&lt;/p&gt;
 $$\sum_{x_u&#39;, x_s&#39;} := \sum_{x_u&#39; = 0}^{\infty} \sum_{x_s&#39; = 0}^{\infty}$$ 

&lt;p&gt;then in your derivation, the support of  $P(x_u&#39;, x_s&#39;)$ 
 makes this safe because:&lt;/p&gt;
 $$x_u&#39; P(x_u&#39;, x_s&#39;) = 0 \text{ when } x_u&#39; = 0$$ 

&lt;p&gt;since the factor is 0.&lt;/p&gt;
&lt;p&gt;So extending the lower limit to 0 adds no contribution to the sum.&lt;/p&gt;
&lt;h3 id=&#34;-conclusion&#34;&gt;‚úÖ Conclusion&lt;/h3&gt;
&lt;p&gt;The expressions:&lt;/p&gt;
 $$\sum_{x_u&#39; = 1}^{\infty} \sum_{x_s&#39; = 0}^{\infty} x_u&#39; P(x_u&#39;, x_s&#39;) \cdots$$ 

&lt;p&gt;and&lt;/p&gt;
 $$\sum_{x_u&#39; = 0}^{\infty} \sum_{x_s&#39; = 0}^{\infty} x_u&#39; P(x_u&#39;, x_s&#39;) \cdots$$ 

&lt;p&gt;are equal because when  $x_u&#39; = 0$ 
, the term is 0.&lt;/p&gt;
&lt;p&gt;Hence, we can write:&lt;/p&gt;
 $$\sum_{x_u&#39;, x_s&#39;} := \sum_{x_u&#39; = 0}^{\infty} \sum_{x_s&#39; = 0}^{\infty}$$ 

&lt;p&gt;without affecting the value of the sum.&lt;/p&gt;
&lt;h2 id=&#34;b3-solve-pde-via-method-of-characteristics&#34;&gt;B.3) Solve PDE via Method of Characteristics&lt;/h2&gt;
&lt;p&gt;We start with the PDE derived from the chemical master equation (CME) for a stochastic model of unspliced (u) and spliced (s) RNA:&lt;/p&gt;
 $$\frac{\partial G}{\partial t} = \alpha u_u G + \beta(u_s - u_u)\frac{\partial G}{\partial u_u} - \gamma u_s \frac{\partial G}{\partial u_s}$$ 

&lt;p&gt;This is a first-order linear PDE in 3 variables:  $u_u, u_s, t$ 
.&lt;/p&gt;
&lt;p&gt;To solve this, we apply the method of characteristics, which reduces a PDE to a system of ODEs along special curves (characteristics) in the domain  $(u_u, u_s, t)$ 
. The idea is to track how  $G$ 
 changes along these curves as we change a parameter  $s$ 
 (which can be thought of like an artificial time).&lt;/p&gt;
&lt;h3 id=&#34;step-1-define-characteristic-curves&#34;&gt;Step 1: Define Characteristic Curves&lt;/h3&gt;
&lt;p&gt;We introduce  $s$ 
 as a parameter along a characteristic curve and define:&lt;/p&gt;
 $$u_u = u_u(s)$$ 

 $$u_s = u_s(s)$$ 

 $$t = t(s)$$ 

 $$G = G(u_u(s), u_s(s), t(s))$$ 

&lt;p&gt;Then the total derivative of  $G$ 
 along the curve is:&lt;/p&gt;
 $$\frac{dG}{ds} = \frac{\partial G}{\partial u_u}\frac{du_u}{ds} + \frac{\partial G}{\partial u_s}\frac{du_s}{ds} + \frac{\partial G}{\partial t}\frac{dt}{ds}$$ 

&lt;p&gt;Now, we substitute the PDE into this expression. From the PDE:&lt;/p&gt;
 $$\frac{\partial G}{\partial t} = \alpha u_u G + \beta(u_s - u_u)\frac{\partial G}{\partial u_u} - \gamma u_s \frac{\partial G}{\partial u_s}$$ 

&lt;p&gt;Plugging this into the total derivative:&lt;/p&gt;
 $$\frac{dG}{ds} = \frac{\partial G}{\partial u_u}\frac{du_u}{ds} + \frac{\partial G}{\partial u_s}\frac{du_s}{ds} + \left[\alpha u_u G + \beta(u_s - u_u)\frac{\partial G}{\partial u_u} - \gamma u_s \frac{\partial G}{\partial u_s}\right]\frac{dt}{ds}$$ 

&lt;p&gt;Now, &lt;strong&gt;choose  $\frac{dt}{ds} = 1$ 
&lt;/strong&gt;. This simplifies the expression because now  $t = s$ 
, and we can reduce the 3-variable PDE into a system of ODEs in  $s$ 
.&lt;/p&gt;
&lt;h3 id=&#34;step-2-match-terms&#34;&gt;Step 2: Match Terms&lt;/h3&gt;
&lt;p&gt;To make the right-hand side cancel cleanly, we group terms:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coefficient of&lt;/strong&gt;  $\frac{\partial G}{\partial u_u}$ 
:&lt;/p&gt;
 $$\frac{du_u}{ds} + \beta(u_s - u_u)$$ 

&lt;p&gt;&lt;strong&gt;Coefficient of&lt;/strong&gt;  $\frac{\partial G}{\partial u_s}$ 
:&lt;/p&gt;
 $$\frac{du_s}{ds} - \gamma u_s$$ 

&lt;p&gt;To cancel the dependence on  $\frac{\partial G}{\partial u_u}$ 
 and  $\frac{\partial G}{\partial u_s}$ 
, we set these to zero, yielding:&lt;/p&gt;
 $$\frac{du_u}{ds} = \beta(u_s - u_u), \quad \frac{du_s}{ds} = -\gamma u_s$$ 

&lt;p&gt;Then the remaining term becomes:&lt;/p&gt;
 $$\frac{dG}{ds} = \alpha u_u G$$ 

&lt;p&gt;Now we&amp;rsquo;ve reduced the PDE into this system of ODEs:&lt;/p&gt;
 $$\begin{align}
\frac{du_s}{ds} &amp;= -\gamma u_s \\
\frac{du_u}{ds} &amp;= \beta(u_s - u_u) \\
\frac{dG}{ds} &amp;= \alpha u_u G
\end{align}$$ 

&lt;p&gt;These are much easier to solve analytically or numerically.&lt;/p&gt;
&lt;h2 id=&#34;b4-legitimacy-to-choose-fracdtds--1-in-b3&#34;&gt;B.4) Legitimacy to choose $\frac{dt}{ds} = 1$ in B.3)&lt;/h2&gt;
&lt;p&gt;We choose  $\frac{dt}{ds} = 1$ 
 in the method of characteristics because it simplifies the partial differential equation (PDE) to a more tractable set of ordinary differential equations (ODEs) ‚Äî and this choice is completely valid and standard in this method. Let me explain why:&lt;/p&gt;
&lt;h3 id=&#34;what-does-fracdtds--1-mean&#34;&gt;What Does $\frac{dt}{ds} = 1$ Mean&lt;/h3&gt;
&lt;p&gt;In the method of characteristics, you introduce a new parameter  $s$ 
 that traces out a path (or characteristic curve) in the space of independent variables ‚Äî here,  $(u_u, u_s, t)$ 
. Along this path:&lt;/p&gt;
 $$\frac{dG}{ds} = \frac{\partial G}{\partial u_u} \frac{du_u}{ds} + \frac{\partial G}{\partial u_s} \frac{du_s}{ds} + \frac{\partial G}{\partial t} \frac{dt}{ds}$$ 

&lt;p&gt;So  $\frac{dt}{ds}$ 
 tells you how &amp;ldquo;fast&amp;rdquo; you&amp;rsquo;re moving in the time direction along the characteristic curve.&lt;/p&gt;
&lt;p&gt;Now, if you choose:&lt;/p&gt;
 $$\frac{dt}{ds} = 1 \Rightarrow t = s$$ 

&lt;p&gt;you&amp;rsquo;re saying: &amp;ldquo;Let the parameter along the path simply equal time.&amp;rdquo; This simplifies the math without changing the problem.&lt;/p&gt;
&lt;h3 id=&#34;why-is-this-legitimate&#34;&gt;Why Is This Legitimate&lt;/h3&gt;
&lt;p&gt;Because in the method of characteristics,  $s$ 
 is a dummy variable. You&amp;rsquo;re free to choose how it relates to the original coordinates, as long as it parametrizes a valid path. The PDE solution is determined by the behavior along these characteristic curves, and the parameterization does not affect the final solution.&lt;/p&gt;
&lt;p&gt;Choosing  $\frac{dt}{ds} = 1$ 
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simplifies the system (fewer variables)&lt;/li&gt;
&lt;li&gt;allows you to think of  $s$ 
 as time&lt;/li&gt;
&lt;li&gt;turns the original PDE into a solvable system of ODEs&lt;/li&gt;
&lt;li&gt;does not change the physics or solution of the underlying system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s not a constraint imposed by the model ‚Äî it&amp;rsquo;s a strategic mathematical choice to simplify the derivation.&lt;/p&gt;
&lt;h3 id=&#34;alternative-choices&#34;&gt;Alternative Choices&lt;/h3&gt;
&lt;p&gt;Yes ‚Äî you could, in principle, choose something else (e.g.  $\frac{dt}{ds} = \gamma$ 
, or make  $s = -t$ 
), but then the resulting ODEs are messier. Since the method is agnostic to how you parametrize the path, you&amp;rsquo;re free to choose the one that leads to the simplest math.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Choosing  $\frac{dt}{ds} = 1$ 
 is valid because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The method of characteristics allows any parameterization.&lt;/li&gt;
&lt;li&gt;This choice makes the equations easier to solve.&lt;/li&gt;
&lt;li&gt;The physics or stochastic model (e.g. CME) remains unchanged.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;c-derive-log-generating-function-a-idderive-log-generating-functiona&#34;&gt;C) Derive log-generating function &lt;a id=&#34;Derive-log-generating-function&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below derive the log-generating function first introduced &lt;a href=&#34;#log-generating-function-first-introduced&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;1-setup-use-the-method-of-characteristics&#34;&gt;1. Setup: Use the Method of Characteristics&lt;/h3&gt;
&lt;p&gt;We rewrite the PDE:&lt;/p&gt;
 $$\frac{\partial G}{\partial t} = \alpha u_u G + \beta(u_s - u_u)\frac{\partial G}{\partial u_u} - \gamma u_s \frac{\partial G}{\partial u_s}$$ 

&lt;p&gt;This is a linear PDE in  $G(u_u, u_s, t)$ 
, and we apply the method of characteristics.&lt;/p&gt;
&lt;p&gt;Let  $s$ 
 be the parameter along characteristic curves. Then we solve the system:&lt;/p&gt;
 $$\frac{dt}{ds} = 1$$ 

 $$\frac{du_u}{ds} = \beta(u_s - u_u)$$ 

 $$\frac{du_s}{ds} = -\gamma u_s$$ 

 $$\frac{dG}{ds} = \alpha u_u G$$ 

&lt;h3 id=&#34;2-solve-the-ode-for-u_ss&#34;&gt;2. Solve the ODE for $u_s(s)$&lt;/h3&gt;
 $$\frac{du_s}{ds} = -\gamma u_s \Rightarrow u_s(s) = u_s(0)e^{-\gamma s}$$ 

&lt;h3 id=&#34;3-plug-into-the-ode-for-u_us&#34;&gt;3. Plug into the ODE for $u_u(s)$&lt;/h3&gt;
 $$\frac{du_u}{ds} = \beta(u_s(s) - u_u(s)) = \beta(u_s(0)e^{-\gamma s} - u_u(s))$$ 

&lt;p&gt;This is a linear non-homogeneous ODE:&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s solve using integrating factor:&lt;/p&gt;
&lt;p&gt;Integrating factor:  $\mu(s) = e^{\beta s}$ 
&lt;/p&gt;
&lt;p&gt;Multiply both sides:&lt;/p&gt;
 $$e^{\beta s}\frac{du_u}{ds} + \beta e^{\beta s}u_u(s) = \beta u_s(0)e^{(\beta - \gamma)s}$$ 

 $$\frac{d}{ds}(e^{\beta s}u_u(s)) = \beta u_s(0)e^{(\beta - \gamma)s}$$ 

&lt;p&gt;Integrate both sides:&lt;/p&gt;
 $$e^{\beta s}u_u(s) = \frac{\beta u_s(0)}{\beta - \gamma}e^{(\beta - \gamma)s} + C$$ 

&lt;p&gt;Now divide both sides:&lt;/p&gt;
 $$u_u(s) = \frac{\beta u_s(0)}{\beta - \gamma}e^{-\gamma s} + Ce^{-\beta s}$$ 

&lt;p&gt;Apply initial condition  $u_u(0)$ 
 to solve for  $C$ 
:&lt;/p&gt;
 $$u_u(0) = \frac{\beta u_s(0)}{\beta - \gamma} + C \Rightarrow C = u_u(0) - \frac{\beta u_s(0)}{\beta - \gamma}$$ 

&lt;p&gt;So we now have:&lt;/p&gt;
 $$u_u(s) = \frac{\beta u_s(0)}{\beta - \gamma}e^{-\gamma s} + \left(u_u(0) - \frac{\beta u_s(0)}{\beta - \gamma}\right)e^{-\beta s}$$ 

&lt;h3 id=&#34;4-define-u_1u_u-u_s-s&#34;&gt;4. Define $U_1(u_u, u_s, s)$&lt;/h3&gt;
&lt;p&gt;Recall that in the characteristic solution for  $G$ 
, we solve:&lt;/p&gt;
 $$\frac{dG}{ds} = \alpha u_u(s)G \Rightarrow G(s) = \exp\left(\int_0^t \alpha(t-s)u_u(s)ds\right)$$ 

&lt;p&gt;Define  $U_1(u_u, u_s, s) = u_u(s)$ 
. So:&lt;/p&gt;
 $$U_1(u_u, u_s, s) = \frac{\beta u_s}{\beta - \gamma}e^{-\gamma s} + \left(u_u - \frac{\beta u_s}{\beta - \gamma}\right)e^{-\beta s}$$ 

&lt;h3 id=&#34;5-compute-fu_u-u_s-t--ln-g&#34;&gt;5. Compute $f(u_u, u_s, t) = \ln G$&lt;/h3&gt;
&lt;p&gt;Now integrate:&lt;/p&gt;
 $$\ln G(u_u, u_s, t) = \int_0^t \alpha(t-s)U_1(u_u, u_s, s) \, ds$$ 

</description>
    </item>
    
    <item>
      <title>üß¨ Velocity reasoning and discussion</title>
      <link>http://localhost:1313/post/11.velocity_reasoning/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11.velocity_reasoning/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ CCA reasoning and integration discussion</title>
      <link>http://localhost:1313/post/10.cca_reasoning/</link>
      <pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/10.cca_reasoning/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ sctransfrom reasoning</title>
      <link>http://localhost:1313/post/09.sctransform/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/09.sctransform/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Clinical relevance evaluation in PRCC</title>
      <link>http://localhost:1313/post/08.clinical_relevance/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/08.clinical_relevance/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Expressive cord diagram in PRCC</title>
      <link>http://localhost:1313/post/07.chord_diagram/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/07.chord_diagram/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Determine whether it‚Äôs noise or true stem like cells in PRCC</title>
      <link>http://localhost:1313/post/06.noise_or_true_stem_cell/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/06.noise_or_true_stem_cell/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ quantify xenograft and host gene expression from the same sample</title>
      <link>http://localhost:1313/post/05.xensoft_caki_paper/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/05.xensoft_caki_paper/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ counteract treatment-specific background in differential expressed gene analysis (huangcong paper)</title>
      <link>http://localhost:1313/post/04.huangcong_oncogene/</link>
      <pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/04.huangcong_oncogene/</guid>
      <description>&lt;p&gt;will be composed soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ A snakemake pipline-- quantify hERV, transgenes and genome from well-based single-cell RNAseq</title>
      <link>http://localhost:1313/post/03.well-based_scrnaseq_herv_quantification/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/03.well-based_scrnaseq_herv_quantification/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see &lt;a href=&#34;https://github.com/jliu678/snakemake-pipline_quantify-hERV-trangene_well-based-scRNAseq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-hervs-and-transgenes&#34;&gt;What are hERVs and transgenes&lt;/h2&gt;
&lt;p&gt;Human Endogenous Retroviruses (hERVs) are ancient viral sequences embedded in the human genome. The roles of hERVs in gene regulation, immunity, development and cancer are under intense research. Transgenes including GFP, CRE, Luciferase, rtTA/Tet-On/Tet-Off and epitopically expressed genes are common targets to be quantified in sample from transgenic mouse models.&lt;/p&gt;
&lt;h2 id=&#34;how-to-quantify-them-from-well-based-scrnaseq&#34;&gt;How to quantify them from Well-based scRNAseq&lt;/h2&gt;
&lt;p&gt;The EM algorithm is well-suited for quantifying them as elucidated in &lt;a href=&#34;aaaaaaaaa&#34;&gt;my previous blog&lt;/a&gt;. Briefly, EM algorithm is advantageous in dealing with  multimaping, which is commonly seen for hERV and transgene quantification, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mathematically, EM is well suitable for estimating parameters in Gaussian Mixture Models, which is similar to the model describing multimapping&lt;/li&gt;
&lt;li&gt;biologically, EM can takes into consideration the mapping probability and mapping bias, though Starsolo dose not use bias correction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Starsolo&lt;/a&gt; is particularly handy for this task because it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implements EM algorithm&lt;/li&gt;
&lt;li&gt;follows CellRanger logic for cell barcode whitelisting and UMI deduplication to produce nearly identical gene counts in the same format as the CellRanger does&lt;/li&gt;
&lt;li&gt;is the foundation of alignment in CellRanger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-resembling-cellranger-helps&#34;&gt;Why resembling CellRanger helps&lt;/h2&gt;
&lt;p&gt;The similarity of STARsolo with CellRanger is important. While CellRanger is not a gold standard, a substantial and growing body of biological interpretations is derived from data processed by it. Aligning with CellRanger enables more meaningful comparisons with such datasets. This is particularly crucial when data integration is required, as no current method can fully correct for technical artifacts without distorting true biological signals.&lt;/p&gt;
&lt;h2 id=&#34;snakemake-workflow-management&#34;&gt;Snakemake Workflow Management&lt;/h2&gt;
&lt;p&gt;Snakemake is used to manage a workflow as illustrated below. Briefly, I generated star index and wrangled all fastqs belonging to the same end reading and the same sample into one fastq file. The combined fastqs and star index were input to starsolo in rule &lt;code&gt;star_mapping&lt;/code&gt;. After making sure both input fastq wrangling and rule &lt;code&gt;star_mapping&lt;/code&gt; were done, I moved the input fastqs to a specified directory to safely carry out cleaning up.
&lt;figure class=&#34;ma0 w-75&#34;&gt;&lt;img src=&#34;http://localhost:1313/post/03.well-based_scrnaseq_herv_quantification/dag.svg&#34;&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Compared with that for 10x scRNAseq, the Snakemake file to quantify hERV, transgenes and genome from well-based single-cell RNAseq data has more details to pay attention to. Below discussed the key unique lines of the Snakemake file for well-based single-cell RNAseq, and please see the common parts of the Snakemake files for both well-based and 10x scRNAseq data in &lt;a href=&#34;10xscrnaseq&#34;&gt;my previous blog&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;align-and-count-genes-herv-and-transgenes&#34;&gt;Align and count genes, hERV and transgenes&lt;/h3&gt;
&lt;p&gt;Rule &lt;code&gt;star_mapping&lt;/code&gt; calls STARsolo with a detailed configuration for single-cell RNA-seq analysis, using a customized CB/UMI structure and enabling EM-based handling of multimappers.&lt;/p&gt;
&lt;p&gt;The soloType for seqWell(well-based scRNAseq) is &lt;code&gt;CB_UMI_Complex&lt;/code&gt; as excerpted below from &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;star-solo github&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- soloType input options:
    - CB_UMI_Simple   ... (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium.
    - CB_UMI_Complex  ... one UMI of fixed length, but multiple Cell Barcodes of varying length, as well as adapters sequences are allowed in read2 only, e.g. inDrop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Microwell-seq uses three separate barcodes with adaptors aside them rather than a single barcode. Generating their three white lists requires reading through the methods in &lt;a href=&#34;https://doi.org/10.1016/j.cell.2018.02.001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mapping the Mouse Cell Atlas by Microwell-Seq&lt;/a&gt;. NOTE the results only showed 5&amp;rsquo; to 3&amp;rsquo; strands, while barcodes 2 and 3 were presented on the 3&amp;rsquo; to 5&amp;rsquo; strands and reversed when being transcribed onto the beads, we have to take the complement and reverse the resultant sequence. Below successfully accomplished the three white lists step by step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download table S1 of paper &lt;a href=&#34;https://doi.org/10.1016/j.cell.2018.02.001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mapping the Mouse Cell Atlas by Microwell-Seq&lt;/a&gt; containing the sequences of well-specific barcodes. The 1st barcode is one of A1-96; the 2nd barcode is one of B1-96; the 3rd barcode is one of C1-96&lt;/li&gt;
&lt;li&gt;Take A1 &lt;code&gt;TTTAGGGATAACAGGGTAATAAGCAGTGGTATCAACGCAGAGTACGTTTTAGGCGACTCACTACAGGG&lt;/code&gt; as example. We first remove adaptor whose sequence can be seen in the &lt;a href=&#34;https://teichlab.github.io/scg_lib_structs/methods_html/Microwell-seq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Step-by-step generation of Indexed-Beads-seqA:
&amp;quot; section of Microwell-seq github introduction&lt;/a&gt;, which is the sequences beside [barcode1] in &lt;code&gt;5&#39;-TTTAGGGATAACAGGGTAATAAGCAGTGGTATCAACGCAGAGTACGT[barcode1]CGACTCACTACAGGG -3&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After removing adaptor the barcode inside A1 is &amp;ldquo;TTTTAGG&amp;rdquo;. That is all for A1.&lt;/li&gt;
&lt;li&gt;But for B1-96 and C1-96 barcodes, we need remove adaptor as above and further get the reverse complementary of them. Please note the direction of sequence listed in the table S1 downloaded above and that of the adaptor in  &lt;a href=&#34;https://teichlab.github.io/scg_lib_structs/methods_html/Microwell-seq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Step-by-step generation of Indexed-Beads-seqA:&amp;rdquo; section of Microwell-seq github introduction&lt;/a&gt;. Also check directions of the raw reads in &lt;a href=&#34;https://trace.ncbi.nlm.nih.gov/Traces/?view=run_browser&amp;amp;page_size=10&amp;amp;acc=SRR9843415&amp;amp;display=reads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sra of GSM3980130: Adult-Cervix1; Homo sapiens; RNA-Seq (SRR9843415)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;soloCBposition&lt;/code&gt; and &lt;code&gt;soloUMIposition&lt;/code&gt; of Starsolo needs input in this pattern (0_0_0_5) to know the start and end of barcodes and UMI. See &lt;a href=&#34;https://teichlab.github.io/scg_lib_structs/methods_html/Microwell-seq.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Library sequencing:&amp;rdquo; section of Microwell-seq github introduction&lt;/a&gt; and &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#complex-barcodes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Complex barcodes:&amp;rdquo; section of Star-Solo github introduction&lt;/a&gt;. For example: 0_0_0_5 means the barcode starts at bp 0 and ends at bp 5.&lt;/li&gt;
&lt;li&gt;Because there are 3 seperate barcodes, the wl option in &amp;ldquo;config.yaml&amp;rdquo; needs to specify 3 different files corresponding to the 3 barcode segments.&lt;/li&gt;
&lt;li&gt;Importantly, in the &lt;code&gt;--readFilesIn&lt;/code&gt; option, the 1st file has to be cDNA read, and the 2nd file has to be the barcode (cell+UMI) read.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of the configurations are copied from the &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STARsolo guide on github&lt;/a&gt;. That gives&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r1.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r2.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{star_index}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;star_index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mapped_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;star mapping...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;4:00:00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;STAR --genomeDir &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input.idx}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --runThreadN &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{threads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloType CB_UMI_Complex &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBposition 0_0_0_5 0_21_0_26 0_42_0_47 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloUMIposition 0_48_0_53 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBwhitelist &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[wl]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --clipAdapterType CellRanger4 --outFilterScoreMin 10 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBmatchWLtype 1MM_multi &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloUMIfiltering MultiGeneUMI_CR --soloUMIdedup 1MM_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloFeatures Gene GeneFull SJ --soloCellFilter EmptyDrops_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloMultiMappers EM &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --readFilesIn &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[1]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --readFilesCommand &amp;#39;gunzip -c&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --outFileNamePrefix &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>üß¨ A snakemake pipline-- quantify hERV, transgenes and genome from 10x scRNAseq</title>
      <link>http://localhost:1313/post/02.snakemake_quantify-herv_10xscrnaseq/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/02.snakemake_quantify-herv_10xscrnaseq/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see &lt;a href=&#34;https://github.com/jliu678/snakemake-pipline_quantify-hERV-trangene_10x-scRNAseq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-hervs-and-transgenes&#34;&gt;What are hERVs and transgenes&lt;/h2&gt;
&lt;p&gt;Human Endogenous Retroviruses (hERVs) are ancient viral sequences embedded in the human genome. The roles of hERVs in gene regulation, immunity, development and cancer are under intense research. Transgenes including GFP, CRE, Luciferase, rtTA/Tet-On/Tet-Off and epitopically expressed genes are common targets to be quantified in sample from transgenic mouse models.&lt;/p&gt;
&lt;h2 id=&#34;how-to-quantify-them-from-10x-scrnaseq&#34;&gt;How to quantify them from 10x scRNAseq&lt;/h2&gt;
&lt;p&gt;The EM algorithm is well-suited for quantifying them as elucidated in &lt;a href=&#34;aaaaaaaaa&#34;&gt;my previous blog&lt;/a&gt;. Briefly, EM algorithm is advantageous in dealing with  multimaping, which is commonly seen for hERV and transgene quantification, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mathematically, EM is well suitable for estimating parameters in Gaussian Mixture Models, which is similar to the model describing multimapping&lt;/li&gt;
&lt;li&gt;biologically, EM can takes into consideration the mapping probability and mapping bias, though Starsolo dose not use bias correction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Starsolo&lt;/a&gt; is particularly handy for this task because it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implements EM algorithm&lt;/li&gt;
&lt;li&gt;produces nearly identical gene counts in the same format as the 10x CellRanger does by following CellRanger logic for cell barcode whitelisting and UMI deduplication&lt;/li&gt;
&lt;li&gt;is the foundation of alignment in CellRanger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-compatibility-with-cellranger-matters&#34;&gt;Why compatibility with CellRanger matters&lt;/h2&gt;
&lt;p&gt;The compatibility of STARsolo with CellRanger is important. While CellRanger is not a gold standard, a substantial and growing body of biological interpretations is derived from data processed by it. Aligning with CellRanger enables more meaningful comparisons with such datasets. This is particularly crucial when data integration is required, as no current method can fully correct for technical artifacts without distorting true biological signals.&lt;/p&gt;
&lt;h2 id=&#34;snakemake-workflow-management&#34;&gt;Snakemake Workflow Management&lt;/h2&gt;
&lt;p&gt;Snakemake is used to manage a workflow as illustrated below. Briefly, I generated star index and wrangled all fastqs belonging to a same end reading and a same sample into one fastq file. The combined fastqs and star index were input to starsolo in rule &lt;code&gt;star_mapping&lt;/code&gt;. After making sure both input fastq wrangling and rule &lt;code&gt;star_mapping&lt;/code&gt; were done, I moved the input fastqs to a specified directory to safely carry out cleaning up.
&lt;figure class=&#34;ma0 w-75&#34;&gt;&lt;img src=&#34;http://localhost:1313/post/02.snakemake_quantify-herv_10xscrnaseq/dag.svg&#34;&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Key lines of the Snakemake file are discussed below&lt;/p&gt;
&lt;h3 id=&#34;import-configyaml&#34;&gt;Import config.yaml&lt;/h3&gt;
&lt;p&gt;This line imports a configuration file in YAML format. The config file specify the genome and annotation files, the whitelist file(s), the star index directory and the CellBarcode/UMI lengths, etc. The cell barcode will be provided to &lt;code&gt;--soloCBwhitelist&lt;/code&gt; option in STARsolo to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Match observed barcodes in your data,&lt;/li&gt;
&lt;li&gt;Correct sequencing errors (if close matches are allowed),&lt;/li&gt;
&lt;li&gt;Filter out barcodes that are not from real, expected cells.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;configfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;config.yaml&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Part of values defined in the yaml are as below, other will be discussed otherwhere in the blog.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;genome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;combined.fa&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;combined.gtf&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;wl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wl1.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wl2.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wl3.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;star_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;star/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;generates-index-for-starsolo&#34;&gt;Generates index for STARsolo.&lt;/h3&gt;
&lt;p&gt;The name of the genome and annotation files, and the desired output directory are defined in the config file. Here we use &lt;code&gt;--genomeSAsparseD 3&lt;/code&gt; to make the agreement between STARsolo and CellRanger even more perfect (&lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#how-to-make-starsolo-raw-gene-counts-almost-identical-to-cellrangers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STARsolo link&lt;/a&gt;). Output of this rule is required by &lt;code&gt;star_mapping&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gen_star_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{genome}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;genome&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;genome&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{annotations}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;star_index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20:00:00&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;generating star index...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;STAR --runMode genomeGenerate --runThreadN &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{threads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --genomeFastaFiles &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --sjdbGTFfile &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[1]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --genomeSAsparseD 3 --genomeDir &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;wrangle-input-fastqs&#34;&gt;Wrangle input fastqs&lt;/h3&gt;
&lt;p&gt;This rule combines reads from the &lt;code&gt;./raw_reads&lt;/code&gt;. Because reads can be performed on different lanes, this rule combines them into one fa file, as STARsolo does not support multiple lanes per read. The outputs are produced in the &lt;code&gt;./combined_reads&lt;/code&gt; dir. Output of this rule is required by &lt;code&gt;star_mapping&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# use absolute dir to avoid instability&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getcwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/raw_reads&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;input_reads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combine_reads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;raw_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r1.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r2.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combining reads...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;find -regextype sed -regex .*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.*[Rr]1.*\.fastq\.gz -exec cat {{}} + &amp;gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;find -regextype sed -regex .*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.*[Rr]2.*\.fastq\.gz -exec cat {{}} + &amp;gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output[1]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;align-and-count-genes-herv-and-transgenes&#34;&gt;Align and count genes, hERV and transgenes&lt;/h3&gt;
&lt;p&gt;Rule &lt;code&gt;star_mapping&lt;/code&gt; calls STARsolo with a detailed configuration for single-cell RNA-seq analysis, using a customized CB/UMI structure and enabling EM-based handling of multimappers.&lt;/p&gt;
&lt;p&gt;The soloType for 10x dropSeq is &lt;code&gt;CB_UMI_Simple&lt;/code&gt; as excerpted below from &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;star-solo github&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- soloType input options:
    - CB_UMI_Simple   ... (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium.
    - CB_UMI_Complex  ... one UMI of fixed length, but multiple Cell Barcodes of varying length, as well as adapters sequences are allowed in read2 only, e.g. inDrop.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10x barcode inclusion list (formerly barcode whitelist) can be downloaded &lt;a href=&#34;https://kb.10xgenomics.com/hc/en-us/articles/115004506263-What-is-a-barcode-inclusion-list-formerly-barcode-whitelist#:~:text=For%20example%2C%20there%20are%20roughly,AAACCTGAGAAAGTGG%20AAACCTGAGAACAACT%20AAACCTGAGAACAATC%20AAACCTGAGAACTCGG%20AAACCTGAGAACTGTA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Importantly, in the &amp;ndash;readFilesIn option, the 1st file has to be cDNA read, and the 2nd file has to be the barcode (cell+UMI) read, i.e.&lt;/p&gt;
&lt;p&gt;10X data have a variety of CB and UMI lengths, I decided for them to be a configurable option.
Please Ref to &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#barcode-geometry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;barcode-geomery section of Star-Solo github&lt;/a&gt; to quickly understand below arguments.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;10x three prime: common values are below for 10x three prime, and accurate values can be found in 10x library protocol used to generate the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;l&#34;&gt;soloCBstart 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;soloCBlen 16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;soloUMIstart 17&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;soloUMIlen 10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest of the configurations are copied from the &lt;a href=&#34;https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md#all-parameters-that-control-starsolo-output-are-listed-again-below-with-defaults-and-short-descriptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STARsolo guide on github&lt;/a&gt;. That gives&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r1.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r2.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{star_index}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;star_index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mapped_reads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;star mapping...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;4:00:00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;STAR --genomeDir &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input.idx}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --runThreadN &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{threads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloType CB_UMI_Simple &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBstart 1 --soloCBlen &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[cblen]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloUMIstart &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[umistart]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --soloUMIlen &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[umilen]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloBarcodeReadLength 1 --soloCBwhitelist &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[wl]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --clipAdapterType CellRanger4 --outFilterScoreMin 10 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCBmatchWLtype 1MM_multi_Nbase_pseudocounts &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloUMIfiltering MultiGeneUMI_CR --soloUMIdedup 1MM_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloFeatures &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{soloFeaturesvalues}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloCellFilter EmptyDrops_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --soloMultiMappers EM &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --readFilesIn &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[1]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --readFilesCommand &amp;#39;gunzip -c&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            --outFileNamePrefix &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10x five prime: common values are below for 10x five prime, and accurate values can be found in 10x library protocol used to generate the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;l&#34;&gt;soloCBstart 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;soloCBlen 16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;soloUMIstart 17&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;soloUMIlen 10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please read this &lt;a href=&#34;https://github.com/alexdobin/STAR/issues/768&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;thread&lt;/a&gt; to achieve reasonable results for PE and SE alignment/quantification of the same 5&amp;rsquo; 2x150 bp samples. Altogether, the rule is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_mapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads_dir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r1.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;combined_reads_dir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.r2.fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{star_index}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;star_index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;star_index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mapping_dir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input_reads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;star mapping...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;6:00:00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;STAR --genomeDir &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input.idx}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --runThreadN &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{threads}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloType CB_UMI_Simple &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloCBstart 1 --soloCBlen &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[cblen]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloUMIstart &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[umistart]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --soloUMIlen &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[umilen]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloBarcodeReadLength 1 --soloCBwhitelist &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{config[wl]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloStrand Forward --outFilterScoreMin 30 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloCBmatchWLtype 1MM_multi_Nbase_pseudocounts &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloUMIfiltering MultiGeneUMI_CR --soloUMIdedup 1MM_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloFeatures Gene GeneFull SJ Velocyto --soloCellFilter EmptyDrops_CR &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloMultiMappers EM &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --soloBarcodeMate 1   --clip5pNbases 39 0 &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --readFilesIn &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[0]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{input[1]}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --readFilesCommand &amp;#39;gunzip -c&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          --outFileNamePrefix &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{output}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>üõ†Ô∏è Generate and validate ERV gtf that matches the latest reference genome</title>
      <link>http://localhost:1313/post/01a.repeatmasker/</link>
      <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/01a.repeatmasker/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see my &lt;a href=&#34;https://github.com/jliu678/Generate_validate_GRCm39_ERV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-erv&#34;&gt;What are ERV&lt;/h2&gt;
&lt;p&gt;Endogenous Retroviruses (ERV) are ancient viral sequences embedded in the mammalian genome. The roles of hERVs in gene regulation, immunity, development and cancer are under intense research.&lt;/p&gt;
&lt;h2 id=&#34;why-is-erv-gtf-needed&#34;&gt;Why is ERV gtf needed&lt;/h2&gt;
&lt;p&gt;ERV gtf is the annotation file describes the start and end position of each of ERV in the genome. And itself or its corresponding fasta file (containing ERV sequences) is required to quantify the ERV from the RNAseq reads.&lt;/p&gt;
&lt;h2 id=&#34;why-is-erv-gtf-compatible-with-grcm39-needed&#34;&gt;Why is ERV gtf compatible with GRCm39 needed&lt;/h2&gt;
&lt;p&gt;GRCm39 is preferred to have most accurate and up-to-date quantification of genes or other features from RNAseq reads, because of the key improvements made in GRCm39 compared with GRCm38:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improved accuracy in assembly with updated sequencing data&lt;/li&gt;
&lt;li&gt;More corrected sequencing gaps and mis-assemblies&lt;/li&gt;
&lt;li&gt;Better representation of segmental duplications and structural variations&lt;/li&gt;
&lt;li&gt;Enhanced annotation coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, ERV and genes have to be quantify simultaneously for below reasons. Therefore, using the GRCm38 and its ERV annotation instead of the GRCm39 pair results in less accurate quantification of both genes and ERVs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;properly handling multi-mapping: ERV sequences can be similar or overlap with endogenous genes. If ERVs and genes aren‚Äôt quantified together, reads may be incorrectly assigned to one while the other is completely ignored.&lt;/li&gt;
&lt;li&gt;accurately read assignment: regardless multimappings, quantifying ERV with genes ensures a good control of false positives by including a competitive pool of unmatched features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-generate-and-validate-the-erv-gtf-compatible-with-grcm39&#34;&gt;How to generate and validate the ERV gtf compatible with GRCm39&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC4885607/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gEVE&lt;/a&gt; database was generates using RepeatMasker, thus we were encouraged to generate the latest ERV gtf in the same way. We hypothesized that the ERV gtf generated by us should show a good degree of conservation when compared with GRCm38 ERV gtf in &lt;a href=&#34;http://geve.med.u-tokai.ac.jp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gEVE database&lt;/a&gt;, and validated it correspondingly.&lt;/p&gt;
&lt;h2 id=&#34;generate-grcm39-erv&#34;&gt;Generate GRCm39 ERV&lt;/h2&gt;
&lt;h3 id=&#34;1-install-repeatmasker&#34;&gt;1. Install RepeatMasker&lt;/h3&gt;
&lt;p&gt;Please refer to its &lt;a href=&#34;https://www.repeatmasker.org/RepeatMasker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official manuel&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-file-wrangling-and-run-repeatmasker&#34;&gt;2. File wrangling and run RepeatMasker&lt;/h3&gt;
&lt;p&gt;Download fasta of GRCm39 (i.e. mm39), and split fasta by chromosome names by &lt;code&gt;faidx&lt;/code&gt; provided by &lt;a href=&#34;http://www.htslib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;samtools&lt;/a&gt; or &lt;a href=&#34;https://pythonhosted.org/pyfaidx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pyfaidx&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CHRS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 19&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir mus39_split
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; chr in &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CHRS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;extracting chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	faidx --regex &lt;span class=&#34;s2&#34;&gt;&amp;#34;.*chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.*&amp;#34;&lt;/span&gt; Mmus39.fa -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;mus39_split/chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fa&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then call &lt;code&gt;run_repeatmasker.sh&lt;/code&gt; as below to run repeatmasker on each mouse chromosome.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;chroms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(for&lt;/span&gt; i in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 19&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; X Y&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash run_repeatmasker.sh &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chroms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;run_repeatmasker.sh&lt;/code&gt; is below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# save this file as run_repeatmasker.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# for every chr in listed in input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; chr in &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ./repeatmasker/${chr} is output dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    mkdir ./repeatmasker/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# hmmer use 2 cores for each instance, 24 cores means 12 instances of hmmer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    RepeatMasker -engine hmmer -parallel &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; -species &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mus musculus&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -gccalc -dir ./repeatmasker/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; -gff ./chrs/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.fa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-generate-gtf-file-from-repeatmasker-outputs&#34;&gt;3. Generate GTF file from &lt;code&gt;RepeatMasker&lt;/code&gt; outputs&lt;/h3&gt;
&lt;p&gt;Below is R function &lt;code&gt;repmask2gtf()&lt;/code&gt; to generate GTF from &lt;code&gt;RepeatMasker&lt;/code&gt; output files. We will dissect it later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;repmask2gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;out_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chr%1$s/chr%1$s.fa.out&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chr%1$s/chr%1$s.fa.out.gff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gtfs/chr%1$s.gtf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bit score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;perc div.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;perc del.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;perc ins.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;begin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(left)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;s&#34;&gt;&amp;#34;side&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;matching repeat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;repeat class/family&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rep begin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rep end&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rep (left)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;s&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;inc higer score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col.names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;V&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;seq_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gff_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gff[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Simple|Unknown&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`repeat class/family`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Simple|Unknown&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`repeat class/family`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;750&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`bit score`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`bit score`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;No Repeatmasker annotation after filtering for&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RepeatMasker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mRNA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`perc div.`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gene_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gene_id \&amp;#34;RepMasker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gene_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gene_name \&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`repeat class/family`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`matching repeat`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ID \&amp;#34;RepMasker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;attr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gene_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gene_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;write.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The below lines get the names of &lt;code&gt;.out&lt;/code&gt; and &lt;code&gt;.out.gff&lt;/code&gt; files output by &lt;code&gt;repeatmasker&lt;/code&gt;, and define the name of the GTF to return.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;out_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chr%1$s/chr%1$s.fa.out&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chr%1$s/chr%1$s.fa.out.gff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gtfs/chr%1$s.gtf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next few lines simply reads the files that are generated by &lt;code&gt;RepeatMasker&lt;/code&gt;. Note that we are using the &lt;code&gt;-gff&lt;/code&gt; setting in RepeatMasker so that it generates a &lt;code&gt;.out.gff&lt;/code&gt; file, which besides &lt;code&gt;.out&lt;/code&gt; file contains information required for GTF. We&amp;rsquo;re skipping the first two lines of the .out and .gff files because they are just headers. I define a header for the data read from &lt;code&gt;.out.gff&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# make sure we&amp;#39;re reading 16 columns, because the last column is an optional one &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# and some rows many not have them &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                     &lt;span class=&#34;n&#34;&gt;col.names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;V&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;seq_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bit score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;perc div.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;perc del.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;perc ins.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;begin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(left)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;s&#34;&gt;&amp;#34;side&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;matching repeat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;repeat class/family&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rep begin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rep end&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rep (left)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;s&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;inc higer score&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gff_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we&amp;rsquo;re filtering the ERV output by RepeatMasker to only keep the sequences more likely to be genetically significant&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;many of the identified sequences overlap and often the classification that best represents the true origin of the sequence has the highest score. So we are filtering for that by having a threshold for the &lt;code&gt;bit score&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;.out.gff&lt;/code&gt; file is ordered the same way as the &lt;code&gt;.out&lt;/code&gt; file, so can also filter based on the &lt;code&gt;Simple/Unknown&lt;/code&gt; classification in &lt;code&gt;.out&lt;/code&gt; file. Simple repeats tend to score higher than ERV or LINE.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gff[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Simple|Unknown&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`repeat class/family`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Simple|Unknown&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`repeat class/family`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;750&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`bit score`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`bit score`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we generate each column for the GTF. A major issue is that &lt;code&gt;AGAT&lt;/code&gt;, the tool we use to turn GTF files into FASTA files for validating our ERV GTF, requires that each sequence has an ID and be marked as &lt;strong&gt;mRNA&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;RepeatMasker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mRNA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`perc div.`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gene_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                      &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gene_id \&amp;#34;RepMasker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;n&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gene_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gene_name \&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`repeat class/family`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;`matching repeat`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ID \&amp;#34;RepMasker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;attr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gene_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gene_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Last, output the GTF&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seqname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;strand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;write.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A loop below to call the above &lt;code&gt;repmask2gtf()&lt;/code&gt; to generate the GTF for all the files that are in the current dir.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;list.dirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recursive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fixed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;generating GTF for &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file.exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gtfs/chr%1$s.gtf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;repmask2gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gtfs/chr%1$s.gtf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./chr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;already exist\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-modify-gtf-for-starsolo&#34;&gt;4. Modify GTF for STARsolo&lt;/h3&gt;
&lt;p&gt;Modify GTF for a couple of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STAR does not accept that we&amp;rsquo;re using &lt;em&gt;mRNA&lt;/em&gt; instead of &lt;em&gt;exons&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;gene id&lt;/em&gt;, which are &lt;em&gt;RepeatMasker&lt;/em&gt; + &lt;em&gt;a number&lt;/em&gt;, may not work when we concat all chromosomes together due to  duplicated IDs.&lt;/li&gt;
&lt;li&gt;STAR also does not need a &lt;em&gt;ID&lt;/em&gt; besides &lt;em&gt;gene id&lt;/em&gt;, so we&amp;rsquo;ll remove that as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;change_feature_gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;exon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rm_id_gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;(ID \&amp;#34;[A-Za-z0-9]*\&amp;#34;; )&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rename_gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;new_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gene_id \&amp;#34;RepMasker_%s\&amp;#34;; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UUIDgenerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;(gene_id \&amp;#34;[A-Za-z0-9]*\&amp;#34;; )&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf_tab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mod_gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;change_feature_gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rm_id_gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rename_gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;write.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs2/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop below to apply &lt;code&gt;mod_gtf()&lt;/code&gt; to every GTF file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;list.files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recursive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file.exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs2/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;generating new gtfs for: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;mod_gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-generate-fasta-from-gtf-for-validation&#34;&gt;5. Generate FASTA from GTF for validation&lt;/h3&gt;
&lt;p&gt;We first modify the GTF generated for STAR&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mod_gtf_for_AGAT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./gtfs2/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;t_uuid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;str_extract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;gene_id( &amp;#34;RepMasker_.*?&amp;#34;; )&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t_uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mRNA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;write.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then convert GTF into fasta for comparing our GRCm39 ERV GTF with from GRCm38 gEVE database using &lt;a href=&#34;https://agat.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;AGAT&lt;/code&gt;&lt;/a&gt;installed by mamba/conda.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# see also in &amp;#39;gtf2fa.sh&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# CHRS=($(seq 1 19) &amp;#34;X&amp;#34; &amp;#34;Y&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CHRS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; chr in &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CHRS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;extracting .fa from chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.gtf&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	agat_sp_extract_sequences.pl -g ./gtfs2/chr&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.gtf -t mRNA --merge 0&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -f ../single_cell/mouse/GRCm39.primary_assembly.genome.fa -o ./fa/chr&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.fa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vadlidate-our-grcm39-erv&#34;&gt;Vadlidate our GRCm39 ERV&lt;/h2&gt;
&lt;p&gt;We compared ERV using RepeatMasker and its built-in Dfam 4.1 on GRCm39 and GRCm38 ERV in &lt;a href=&#34;https://doi.org/10.1093%2Fdatabase%2Fbaw087&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gEVE&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;1-wrange-files-of-grcm38-erv&#34;&gt;1. Wrange files of GRCm38 ERV&lt;/h3&gt;
&lt;p&gt;ERV sequences for the mouse genome assembly GRCm38 are downloaded from the &lt;a href=&#34;http://geve.med.u-tokai.ac.jp/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gEVE website&lt;/a&gt;. They are split by chromosome names using &lt;a href=&#34;https://pythonhosted.org/pyfaidx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pyfaidx&lt;/a&gt; or &lt;code&gt;faidx&lt;/code&gt; provided by &lt;a href=&#34;http://www.htslib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;samtools&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# download gEVE mouse annots&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget http://geve.med.u-tokai.ac.jp/download_data/nt_fasta/Mmus38.geve.nt_v1.fa.bz2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bunzip Mmus38.geve.nt_v1.fa.bz2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# extract just chromosome Y (we&amp;#39;re going to compare this one)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir mus38_split
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;faidx --regex &lt;span class=&#34;s2&#34;&gt;&amp;#34;.*chrY.*&amp;#34;&lt;/span&gt; Mmus38.geve.nt_v1.fa -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;mus38_split/chrY.fa&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-blastn-geve-as-reference-our-grcm39-erv-as-query&#34;&gt;2. BLASTn: gEVE as reference, our GRCm39 ERV as query&lt;/h3&gt;
&lt;p&gt;Then, a BLASTn database is created based on the extracted chromosome Y sequences from GRCm38 ERV. Make sure &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/doc/blast-help/downloadblastdata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BLAST&lt;/a&gt; is installed on your system and is in system &lt;strong&gt;PATHS&lt;/strong&gt; by adding the below to your user bashrc or else &lt;code&gt;makeblastdb&lt;/code&gt; and &lt;code&gt;rBLAST&lt;/code&gt; would not work. It won&amp;rsquo;t be achieved by running &lt;code&gt;module load blast&lt;/code&gt; in eristwo command line interface or rsutdio terminal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;:/apps/lib/blast/ncbi-blast-2.13.0+/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir ./blastdb/mus38_chrY
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;makeblastdb -in mus38_split/chrY.fa -title mus38_chrY &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -dbtype nucl -parse_seqids -out ./blastdb/mus38_chrY/mus38_chrY
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# the first mus38_chrY of &amp;#34;./blastdb/mus38_chrY/mus38_chrY &amp;#34; specify dir, the second specify database name &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to compare the ERV sequence generated, we first use the BLASTn to build reference using gEVE sequences and use RepeatMasker sequences are query. We will then do the reverse and use RepeatMasker sequences as reference and gEVE sequences as query. This step simply reads the RepeatMasker sequences and the BLAST database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rBLAST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# make sure your default PATH includes BLAST, or else it wouldn&amp;#39;t work&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Biostrings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# read .fa files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# allow us to parallelize the rBLAST operations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doParallel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reptmask_chrY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readDNAStringSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;repeatmasker/chrY.fa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bla&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;blast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;./blastdb/mus38_chrY/mus38_chrY&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;blastn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#read makeblastdb-generated database into R enviorment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below test if the sequences can be read and if rBLAST is working.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reptmask_chrY[1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;predict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bla&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reptmask_chrY[1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BLAST_args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-perc_identity 99&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it looks good, we can speed it up via multi-threading parrellel computation&lt;/p&gt;
&lt;h4 id=&#34;parrellel-computation&#34;&gt;&lt;strong&gt;parrellel computation&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# run in cluster, this may take 15~30 minutes with a good (48 core) computer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reptmask_matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reptmask_chrY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%dopar%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;rBLAST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;data.table&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;match_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;predict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bla&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reptmask_chrY[i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BLAST_args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-perc_identity 99&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;match_i&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# change the name to something more intuitive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reptmask_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39; .*$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                               &lt;span class=&#34;n&#34;&gt;replacement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                               &lt;span class=&#34;n&#34;&gt;reptmask_chrY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NAMES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;saveRDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reptmask_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;repeatmasker_mus38_full_named_matches.rds&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To analyse the matches, we first find number of sequences with matches, and also extract unique matches from the reference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reptmask_matches&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reptmask_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reptmask_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;SubjectID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also specify families and see how many matches exist between gEVE and our sequences.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gtflist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;repeatmasker/chrY.gtf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full_matches&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ERV&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtflist&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;erv_matches_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;SubjectID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-blastn-our-grcm39-erv-as-reference-geve-as-query&#34;&gt;3. BLASTn: our GRCm39 ERV as reference, gEVE as query&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mus38_chrY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readDNAStringSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;mus38_split/chrY.fa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bla&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;blast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;./blastdb/rm_mus39_chrY/rm_mus39_chrY&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;blastn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rev_reptmask_matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mus38_chrY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%dopar%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;rBLAST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;data.table&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;match_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;predict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bla&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mus38_chrY[i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BLAST_args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-perc_identity 99&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;match_i&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#Equivalent to finalMatrix = cbind(finalMatrix, tempMatrix)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#comparison&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;full_matches&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rev_reptmask_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rev_reptmask_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;SubjectID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#family-specific comparison&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rev_reptmask_matches&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ERV&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtflist&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;[lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;erv_matches_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tbl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;SubjectID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erv_matches_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;stopCluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;For chrY:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gEVE GRCm38 ERV has 4633 unique sequences; our GRCm39 ERV have 8841 unique sequences including 3701 unique ERV sequences&lt;/li&gt;
&lt;li&gt;gEVE sequences as BLASTn query and our GRCm39 ERV as reference:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Out of 9043 total sequences in gEVE, 8768 has a BLASTn &amp;gt;99% matched sequence in our GRCm39 ERV, corresponding to 4321 unique GRCm39 sequences.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, our GRCm39 ERV capture nearly all information in gEVE GRCm38 ERV, and add ~4000 more unique ERV sequences. We attribute this improvement to the up-to-date GRCm39 and the sensitivity settings available in the newer version of RepeatMasker. Below observation further revealed that the newly identified sequences in GRCm39 ERV predominantly belong to ERV and LINE, both of significant interest in biomedical research.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;our GRCm39 ERV as BLASTn query and gEVE as reference: &lt;strong&gt;only 55% of GRCm39 ERV segments and 27% of GRCm39 LINE segments have matched sequences in gEVE, specifically&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2794 (out of 5077) of our GRCm39 ERV segments have BLASTn matched sequence in gEVE (corresponding to 6134 sequences);&lt;/li&gt;
&lt;li&gt;1803 (out of 6670) of our GRCm39 LINE segments have BLASTn matched sequence in gEVE (corresponding to 1454 sequences)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>üß¨ Quantify hERV and transgenes from Bulk-RNAseq</title>
      <link>http://localhost:1313/post/01.bulkrnaseq_allow_herv_quantification/</link>
      <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/01.bulkrnaseq_allow_herv_quantification/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see source codes in &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt; that can be deploied in Cloud Cluster Computational platform and local desktops, and allows for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;batch computaion with tunable batch size&lt;/li&gt;
&lt;li&gt;automatic environment setting up&lt;/li&gt;
&lt;li&gt;file preprocessing&lt;/li&gt;
&lt;li&gt;QC&lt;/li&gt;
&lt;li&gt;index buidling, alignment and feature counting by either &lt;code&gt;subread&lt;/code&gt; or &lt;code&gt;salmon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The github repo also contains &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/example_usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usage examples using &lt;code&gt;SLURM&lt;/code&gt; or &lt;code&gt;LSF&lt;/code&gt; job scheduler&lt;/a&gt; and &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/utils&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;handy utility tools&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-hervs-and-transgenes&#34;&gt;What are hERVs and transgenes&lt;/h2&gt;
&lt;p&gt;Human Endogenous Retroviruses (hERVs) are ancient viral sequences embedded in the human genome. The roles of hERVs in gene regulation, immunity, development and cancer are under intense research. Transgenes including GFP, CRE, Luciferase, rtTA/Tet-On/Tet-Off and epitopically expressed genes are common targets to be quantified in sample from transgenic mouse models.&lt;/p&gt;
&lt;h2 id=&#34;how-to-quantify-them&#34;&gt;How to quantify them&lt;/h2&gt;
&lt;p&gt;To quantify them, we of course need modify fasta and gtf files to include the their sequencing and annotation. Also, because their sequencing reads are frequently repetitive or overlaping with host genome, we need a feature quantification algorithm to handle multimapping commonly seen for HERV and transgenes.&lt;/p&gt;
&lt;h3 id=&#34;their-fasta-and-gtf&#34;&gt;Their fasta and gtf&lt;/h3&gt;
&lt;p&gt;The transgenes can be included as chromosomes in fasta as below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; EGFP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCG
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GACCCTGAAGTTCATCTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACG
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CGAGCTGTACAAGTAA
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The transgenes are formated as below in gtf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EGFP    self    exon    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;720&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;EGFP&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cre     self    exon    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;1023&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cre&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ERT2    self    exon    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;931&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;ERT2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The hERV sequences are already in reference genome, but their gtf need be added as below. We will talk about &lt;strong&gt;&lt;a href=&#34;willbecomposedsoon&#34;&gt;how to generate the hERV gtf matching the latest reference genome in another blog&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr10   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3083835&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3085549&lt;/span&gt; 4.5     -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_dc1fbd39-e43b-4ac4-90ef-1da20b1d6249&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr10:LTR/ERVL-MaLR:ORR1A0:3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr10   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3114480&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3115385&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;       -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_c49d8024-0b45-46a9-bcaa-c44f7a305a03&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr10:LTR/ERVK:RLTR13F:8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr10   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3122665&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3123530&lt;/span&gt; 13.8    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_5154950a-1e53-4528-a5cf-37d121e3e1a4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr10:LTR/ERVK:RLTR13D6:11&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr11   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3055489&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3061982&lt;/span&gt; 25.9    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_f6a34047-357d-4ed5-9744-eaf4c862be26&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr11:LTR/ERVK:IAPLTR3-int:1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr11   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3139464&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3140302&lt;/span&gt; 11.7    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_ad8b23ab-de54-4f73-be4d-f8405ad13e66&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr11:LTR/ERVK:RLTR33:3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr11   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3410867&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3413285&lt;/span&gt; 16.9    +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_ec06076e-c8d0-4a94-8cfa-358f352bb1e8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr11:LTR/ERV1:RLTR14-int:7&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr12   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3052672&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3059141&lt;/span&gt; 1.6     +       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_8ea0db28-2cd0-4d7e-b151-b5b6480ee320&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr12:LTR/ERVK:IAPEz-int:1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr12   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3065049&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3072337&lt;/span&gt; 27.3    -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_f3379b4a-cdfa-4b24-a4c9-5dacbdaf004c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr12:LTR/ERV1:MMERGLN-int:2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chr12   RepeatMasker    exon    &lt;span class=&#34;m&#34;&gt;3084084&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3084938&lt;/span&gt; 5.8     -       .       gene_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;RepMasker_062a5737-d991-4220-9648-33c43ad467a2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; gene_name &lt;span class=&#34;s2&#34;&gt;&amp;#34;chr12:LTR/ERVK:IAPEz-int:4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;how-tools-deal-with-multimapping&#34;&gt;How tools deal with multimapping&lt;/h3&gt;
&lt;p&gt;Below list common feature count/qunatification tools emphasizing on the core algorithms they wrapped to deal with multimapping. &lt;a href=&#34;https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-017-4002-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;These common tools have similar quantification accuracy&lt;/a&gt;.&lt;/p&gt;














&lt;table class=&#34;table-auto w-full&#34;&gt;
  
    
    
    &lt;thead&gt;
      &lt;tr&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;Tool&lt;/th&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;Default(option)&lt;/th&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;Core algorithm&lt;/th&gt;  &lt;/tr&gt;
    &lt;/thead&gt;
  
  &lt;tbody&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;HTSeq-count&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;discard(&amp;ndash;nonunique=all/fraction)&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;fraction&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;featureCounts&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;discard(-M &amp;ndash;fraction)&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;fraction&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;RSEM&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;Salmon&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;(Bayesian) EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;kallisto&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;StringTie&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;TEtranscripts&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;Telescope&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM Probabilistic&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;EM with MAP&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
  &lt;/tbody&gt;
  
    &lt;caption class=&#34;table-caption&#34;&gt;&lt;strong&gt;Table 1. Multimapping options and algorithms of tools&lt;/strong&gt;&lt;/caption&gt;
  
&lt;/table&gt;

&lt;p&gt;They by default may simply discard multimapping reads, which ignores most of hERVs. With carefully specified arguments, they either distribute read counts equally among certian features (fraction) or estimate using EM algorithm.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;why-em-algorithm-for-multimapping&#34;&gt;Why EM algorithm for multimapping&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Fraction&amp;rdquo; algorithm overlooked how likely the reads can match with reference sequences. The biological prior information, if reasonably exploited, can significantly improve the multimapping quantification. Beatifully, multimapping by nature is similar to the problem of Gaussian Mixtures and EM has been proved to resolve Gaussian Mixture Model (GMM) well.&lt;/p&gt;
&lt;h4 id=&#34;em-is-proved-to-resolve-gmm-well&#34;&gt;EM is proved to resolve GMM well&lt;/h4&gt;
&lt;p&gt;GMM describes a set of data points of which each comes from one of several Gaussian distributions, but we don&amp;rsquo;t know which one. This missing information makes direct estimation (like via maximum likelihood) of the Gaussian parameters hard. EM solve this by iterating below E and M steps until converge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;E-step (Expectation): Use initiallized parameter to compute the &lt;strong&gt;posterior probability (sounds like bayesian, but it is not in standard EM)&lt;/strong&gt; that each data point was generated by each Gaussian (i.e., the responsibility Œ≥ for each component).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M-step (Maximization): Update the parameters (œÄ, Œº, œÉ¬≤) by performing &lt;strong&gt;weighted MLE&lt;/strong&gt; using the expected values (responsibilities) computed in the E-step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multimapping-is-modeled-as-mixtures-of-distributions-that-account-for-mapping-bias&#34;&gt;Multimapping is modeled as mixtures of distributions that account for mapping bias&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nature.com/articles/nmeth.4197&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Salmon model &lt;/a&gt; describes a set of fragments (seqeuncing reads) of which each fragment &lt;em&gt;f&lt;/em&gt; originates from one of the several transcripts &lt;em&gt;t&lt;/em&gt; at a probability distribution  $P(t \mid f)$ 
, but we don&amp;rsquo;t know which one. Thus EM goes:&lt;/p&gt;
&lt;h5 id=&#34;e-step&#34;&gt;&lt;em&gt;E-Step&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;For each fragment  $f$ 
 and transcript  $t$ 
:&lt;/p&gt;

$$
P(t \mid f) = \frac{\alpha_t \cdot P(f \mid t)}{\sum_{t&#39;} \alpha_{t&#39;} \cdot P(f \mid t&#39;)}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\alpha_t$ 
: Current estimate of the relative abundance of transcript  $t$ 
.&lt;/li&gt;
&lt;li&gt; $P(f \mid t)$ 
: Probability of observing fragment  $f$ 
 given transcript  $t$ 
, incorporating bias corrections.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;bias-corrections&#34;&gt;&lt;em&gt;Bias Corrections&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;The fragment-transcript probability is modeled as:&lt;/p&gt;

$$
P(f \mid t) = P_{\text{len}}(l_f \mid t) \cdot P_{\text{pos}}(p_f \mid t) \cdot P_{\text{seq}}(s_f \mid t)
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $l_f$ 
: Length of fragment  $f$ 
.&lt;/li&gt;
&lt;li&gt; $p_f$ 
: Position of fragment  $f$ 
 on transcript  $t$ 
.&lt;/li&gt;
&lt;li&gt; $s_f$ 
: Sequence content of fragment  $f$ 
.&lt;/li&gt;
&lt;li&gt; $P_{\text{len}}$ 
: Probability of fragment length, modeling the empirical fragment length distribution.&lt;/li&gt;
&lt;li&gt; $P_{\text{pos}}$ 
: Positional bias model, capturing biases in fragment start locations.&lt;/li&gt;
&lt;li&gt; $P_{\text{seq}}$ 
: Sequence-specific bias model, correcting for nucleotide composition effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importantly, the bias models:  $P_{\text{len}}$ 
,  $P_{\text{pos}}$ 
 and  $P_{\text{seq}}$ 
 are not directly updated by the EM algorithm during transcript abundance estimation. Instead, these bias models are learned once, typically in a preprocessing or auxiliary phase before the EM iterations begin. The EM algorithm then uses the fixed values of these bias models to compute the probability  $P(f \mid t)$ 
 in the E-step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The only parameters updated by EM are the relative abundances  $\alpha_t$ 
 of the transcripts.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;m-step&#34;&gt;&lt;em&gt;M-Step&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;Update the abundance estimates:&lt;/p&gt;

$$
\alpha_t = \sum_f P(t \mid f)
$$


&lt;p&gt;Then normalize:&lt;/p&gt;

$$
\sum_t \alpha_t = 1
$$


&lt;hr&gt;
&lt;h2 id=&#34;quantificaiton-using-salmon&#34;&gt;Quantificaiton using Salmon&lt;/h2&gt;
&lt;p&gt;Now we see EM algorithm superior than fraction algorithms in quantifing multimappings since EM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is well suitable for estimating parameters in Gaussian Mixture Models, which is similar to the multimapping mathematical model&lt;/li&gt;
&lt;li&gt;takes multimapping mathematical models of mapping probability that accounts for the mapping bias&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We implemented Salmon since it allows both EM and full bayesian EM. We will talk about &lt;a href=&#34;donesoon&#34;&gt;EM (with MLE), EM with MAP and bayesian EM&lt;/a&gt; as well as &lt;a href=&#34;donesoon&#34;&gt;Frequentist vs Bayesian&lt;/a&gt; in other blogs.&lt;/p&gt;
&lt;p&gt;Please see source codes in &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt; that can be deploied in Cloud Cluster Computational platform and local desktops, and allows for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;batch computaion with tunable batch size&lt;/li&gt;
&lt;li&gt;automatic environment setting up&lt;/li&gt;
&lt;li&gt;file preprocessing&lt;/li&gt;
&lt;li&gt;QC&lt;/li&gt;
&lt;li&gt;index buidling, alignment and feature counting by either &lt;code&gt;subread&lt;/code&gt; or &lt;code&gt;salmon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The github repo also contains &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/example_usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;usage examples using &lt;code&gt;SLURM&lt;/code&gt; or &lt;code&gt;LSF&lt;/code&gt; job scheduler&lt;/a&gt; and &lt;a href=&#34;https://github.com/jliu678/herv_project_siyi/tree/main/utils&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;handy utility tools&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;excerpt-scripts&#34;&gt;Excerpt scripts&lt;/h3&gt;
&lt;p&gt;Below excerpt scripts call each needed analysis step specified as &lt;code&gt;ANALYSIS_STEP&lt;/code&gt; array, including file preprocessing, index buidling by &lt;code&gt;build_index()&lt;/code&gt;, QC by &lt;code&gt;qc_all()&lt;/code&gt;, alignment by &lt;code&gt;align_all()&lt;/code&gt; if using &lt;code&gt;subread&lt;/code&gt;, and feature counting by &lt;code&gt;count_all()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ANALYSIS_STEP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-ing...&amp;#34;&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;# for the first 2, do not run if they are in a child/forked process&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			index&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CHILD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; build_index&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			convert&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CHILD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; get_pairs_all&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			qc&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; qc_all &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			align&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; align_all &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			count&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; count_all &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;finished &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some of the core functions in the anylysis are below:&lt;/p&gt;
&lt;h4 id=&#34;build-index&#34;&gt;build index&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;salmon_build_index&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# supports multiple transcripts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# get dir name for the index, which is the transcript names seperated by a hyphen(-)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# eg. for erv.fa and line.fa, you get: erv-line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;salmon/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TRANSCRIPTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[*]%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;building salmon index @: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# salmon requires a decoy, which in this case is the entire reference genome&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;building decoys...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;^&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REF_GENOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; -f &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			sed -i.bak -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/&amp;gt;//g&amp;#39;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# salmon requires all the transcripts being quantified to be concat into one file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_gentrome.fa&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;building gentrome...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			cat &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TRANSCRIPTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REF_TRANSCRIPT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REF_GENOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fa&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# adding --gencode flag due to salmon doing some preprocessing for it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# this flag does nothing for none gencode files (I think)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon index -t &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.fa -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_decoys.txt&amp;#34;&lt;/span&gt; -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; --gencode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;build_index&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ALIGN_METHOD&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		subread&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; subread_build_index &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; salmon_build_index &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;qc&#34;&gt;QC&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fastp_qc&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# results stored in /tmp/{name of the source}/qc/* and all end in *.qc.fq.gz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if pair ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			./fastp -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fq.gz&amp;#34;&lt;/span&gt; -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;				-I &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fq.gz&amp;#34;&lt;/span&gt; -O &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;				-j &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.json&amp;#34;&lt;/span&gt; -h &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if single ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			./fastp -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.fq.gz&amp;#34;&lt;/span&gt; -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;				-j &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.json&amp;#34;&lt;/span&gt; -h &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/fastp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;qc_all&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# only supports fastp as of now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;QC_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;QC_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;qc-ing with &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$QC_METHOD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;, &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r r1 r2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# loop over pair file, csv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ALIGN_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$r1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;#if salmon quant already exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			timed_print &lt;span class=&#34;s2&#34;&gt;&amp;#34;qc-ing &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; and &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$QC_METHOD&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				fastp&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; fastp_qc &lt;span class=&#34;nv&#34;&gt;$r1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$r2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&#34;nv&#34;&gt;$PAIR_FILE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;quantification&#34;&gt;quantification&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;salmon_quant&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;# get the same index_name as specified in &amp;#34;salmon_build_index()&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;salmon/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TRANSCRIPTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[*]%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;#salmon outputs into a dir, so we check for that instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;#results stored in results/salmon/*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OVER_WRITE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/salmon/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir results/salmon/&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if pair ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			salmon quant -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; -l A -1 &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; -2 &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; --validateMappings -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/salmon/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;#sleep 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if single ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			salmon quant -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;index_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_index&amp;#34;&lt;/span&gt; -l A -r &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/qc/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.qc.fq.gz&amp;#34;&lt;/span&gt; --validateMappings -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/salmon/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;#sleep 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;salmon_count&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;, &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r r1 r2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon_quant &lt;span class=&#34;nv&#34;&gt;$r1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$r2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&#34;nv&#34;&gt;$PAIR_FILE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;count_all&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ALIGN_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		mkdir &lt;span class=&#34;s2&#34;&gt;&amp;#34;results/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ALIGN_METHOD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ALIGN_METHOD&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		subread&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; subread_count &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		salmon&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; salmon_count
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>‚ö° SeqWins, An R Package for Flexible Base Trimming and Comprehensive FASTQ Analysis on Windows</title>
      <link>http://localhost:1313/post/00a.seqwins/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/00a.seqwins/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;Please see source codes and Vignette in &lt;a href=&#34;https://github.com/jliu678/SeqWins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Words prevail that Fastq data cannot be elegantly processed in Windows. However, the fundamental low-level R package ShortRead and Rsubread have been available to provide memory-efficient, chunk-wise processing of FASTQ files and offer alignment performance that is competitive with or faster than many Linux-based aligners. Building on these strengths, I developed SeqWins (fastq &lt;strong&gt;Seq&lt;/strong&gt;uence analysis on &lt;strong&gt;Win&lt;/strong&gt;dows system), an R package for flexible base trimming and comprehensive FASTQ analysis on Windows. It achieves on &lt;strong&gt;pure Windows system&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memory-efficient, chunk-wise processing of FASTQ files&lt;/li&gt;
&lt;li&gt;alignment performance competitive with or faster than many Linux-based aligners&lt;/li&gt;
&lt;li&gt;flexible base-level (ATCG) quality control and trimming&lt;/li&gt;
&lt;li&gt;convenient high-level whole-process analysis of fastq data&amp;ndash; spanning quality control report, trimming bases and reads accordingly, alignment and feature count&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Install dependencies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;requireNamespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BiocManager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quietly&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;install.packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BiocManager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BiocManager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ShortRead&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BiocManager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Rsubread&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Install and load SeqWins&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;devtools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;install_github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jliu678/SeqWins&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeqWins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;input-file-wrangling&#34;&gt;Input file wrangling&lt;/h2&gt;
&lt;p&gt;These gemonic data of the same species as with your fastq data are required to build index when aligning reads and get feature counts, and can be download from NCBI assembly website, for example &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/assembly/GCF_000001405.26/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the hg38 files&lt;/a&gt; by clicking the top right &amp;ldquo;&lt;strong&gt;Download Assembly&lt;/strong&gt;&amp;rdquo; button and selecting &amp;ldquo;&lt;strong&gt;Genomic FASTA (.fna)&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;&lt;strong&gt;Genomic GTF (.gtf)&lt;/strong&gt;&amp;rdquo; sequentially on the resultant drop-down options.&lt;/p&gt;
&lt;p&gt;If necessary untar the downloaded files as blow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;untar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/genome_assemblies_genome_fasta.tar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exdir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;untar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/genome_assemblies_genome_gtf.tar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exdir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;modules&#34;&gt;Modules&lt;/h2&gt;
&lt;h3 id=&#34;a-qc-report&#34;&gt;A. QC report&lt;/h3&gt;
&lt;p&gt;Set working directory, it will be where the QC result folder (ShortRead 1.46.0 name it as &amp;ldquo;ShortRead Quality Assessment_files&amp;rdquo;),index files and the folder named &amp;ldquo;bam&amp;rdquo; storing aligned data are located&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;setwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/your/working/directory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and get QC report&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# call ShortRead::qa to generate QC reports of all fastq.gz files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;qa&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;qa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/FastqFolder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;browseURL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the above will generate report of the fastq files retrieved by&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;list.files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/FastqFolder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b-trim-basesfilter-readsalign-and-count-feature&#34;&gt;B. Trim bases,filter reads,align and count feature&lt;/h3&gt;
&lt;p&gt;According to the QC report, customize the parameters used for trimming bases, filtering reads. Although most can be left default,please specify file paths totally decided by yourself; the &lt;code&gt;subReadThreads&lt;/code&gt;, &lt;code&gt;shortreadRAM&lt;/code&gt; decided by your computer; and the sequence tech type decided by your project.&lt;/p&gt;
&lt;h4 id=&#34;specify-file-path&#34;&gt;specify file path&lt;/h4&gt;
&lt;p&gt;If your fastq were generated from single-end sequencing (old-fashioned you are!), only specify &lt;code&gt;fileList1&lt;/code&gt; as blow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;list.files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/FastqFolder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fastq.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genomeRefFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.26_GRCh38_genomic.fna.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#RNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If paired-end,specify both &lt;code&gt;fileList1&lt;/code&gt; i.e. the &amp;ldquo;read 1&amp;rdquo; files and &lt;code&gt;fileList2&lt;/code&gt; i.e. &amp;ldquo;read 2&amp;rdquo; files&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fl_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;list.files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/FastqFolder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;^.*_1\\.fastq\\.gz$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fl_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;list.files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;full/path/FastqFolder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;^.*_2\\.fastq\\.gz$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genomeRefFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.26_GRCh38_genomic.fna.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#RNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please don&amp;rsquo;t forget to specify &lt;code&gt;genomeRefFile&lt;/code&gt; and &lt;code&gt;genomeAnnotFile&lt;/code&gt; i.e. the path of &amp;ldquo;&lt;strong&gt;Genomic FASTA (.fna)&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;&lt;strong&gt;Genomic GTF (.gtf)&lt;/strong&gt;&amp;rdquo; as any of the above examples for the first time when you run &lt;code&gt;seqW&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you already have index files located in the working dir, you can speed it up by setting &lt;code&gt;indexBasename=&amp;quot;my_index&amp;quot;&lt;/code&gt; to avoid regenerating index files like below. And this will make &lt;code&gt;seqW&lt;/code&gt; function ignore whatever is assgned to &lt;code&gt;genomeRefFile&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexBasename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;my_index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#RNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;alignPairedOutput&lt;/code&gt; only works for paired-end input,default is &lt;code&gt;gsub(basename(fileList1),pattern =&amp;quot;_1.*\\.fastq\\.gz&amp;quot;,replacement = &amp;quot;\\.bam&amp;quot;)&lt;/code&gt;, optimize it please if it happens to cause overwriting of output files. For example for fastq files named as &amp;ldquo;a_1_sample1.fastq.gz&amp;rdquo;,  &amp;ldquo;a_2_sample1.fastq.gz&amp;rdquo;, &amp;ldquo;a_1_sample2.fastq.gz&amp;rdquo;, as &amp;ldquo;a_2_sample2.fastq.gz&amp;rdquo;, sample1 and sample2 files will both result in &amp;ldquo;a.bam&amp;rdquo; and either overwriting or error will occur.&lt;/p&gt;
&lt;h4 id=&#34;specify-trim-and-filter&#34;&gt;specify trim and filter&lt;/h4&gt;
&lt;p&gt;Below shows a complete list of trim and filter parameters. Probably most can be left as default except the adaptor sequence specific to your sequence platform&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;endTrimThrs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: Phred score threshold of the end base below which the end base will be trimmed,default &amp;ldquo;?&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;endTrimThrsend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: mean Phred score threshold of five bases in ends,below which the five bases will be trimmed,default &amp;ldquo;4&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;adpter1Seq&lt;/code&gt;,&lt;code&gt;adpter2Seq&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: adapter sequence to be trimmed from end and also inner part of the read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;default &lt;code&gt;adpter1Seq&lt;/code&gt; &amp;ldquo;AGATCGGAAGAGCACACGTCTGAACTCCAGTCA&amp;rdquo; i.e. illumina HT4000 adapter for read 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;default &lt;code&gt;adpter2Seq&lt;/code&gt; &amp;ldquo;AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT&amp;rdquo; i.e. illumina HT4000 adapter for read 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;with.Lindels&lt;/code&gt;,&lt;code&gt;with.Rindels&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: True if your reads contain indels on left end (5&amp;rsquo;,corresponding to &lt;code&gt;with.Lindels&lt;/code&gt;) or right end (3&amp;rsquo;,corresponding to &lt;code&gt;with.Rindels&lt;/code&gt;), default False&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;widthThrs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: width threshold of reads to be filtered out,default 14L&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmplxThrs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: complexity threshold of reads to be filtered out,default 0.5 i.e. half of mean complexity of human genome&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innerNThrs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: number of N inside the read below which the read will be removed,default 2L&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innerS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: which base should be considered the start of inside part of the read after the above trimming,default 4L&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innerE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;: which base should be considered the end of inside part of the read after the above trimming. Negative integer X for width(read)-abs(X) default -4L; positive integer X for Xth base&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;summary-of-trimming-and-filtration&#34;&gt;summary of trimming and filtration&lt;/h4&gt;
&lt;p&gt;A list containing dataframes of which each reports the result of trimming and filtration will be returned by the &lt;code&gt;seqw&lt;/code&gt; function. You can assign the list to an object for further observation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reportList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genomeRefFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.26_GRCh38_genomic.fna.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#RNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;set-aligntype&#34;&gt;set alignType&lt;/h4&gt;
&lt;p&gt;Specifically for RNAseq leave &lt;code&gt;alignType&lt;/code&gt; as default (simply don&amp;rsquo;t mention it). By the way, unit of &amp;ldquo;shortreadRAM&amp;rdquo; is byte,don&amp;rsquo;t panic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subReadThreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shortreadRAM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeRefFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.26_GRCh38_genomic.fna.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For DNAseq, longDNAseq, RNAseq aim at exon-exon junction and microRNAseq, set &lt;code&gt;alignType&lt;/code&gt; as &amp;lsquo;&lt;code&gt;dna&lt;/code&gt;&amp;rsquo;,&amp;rsquo;&lt;code&gt;dnaLong&lt;/code&gt;&amp;rsquo;,&amp;rsquo;&lt;code&gt;rnaExon_Exon&lt;/code&gt;&amp;lsquo;and &amp;lsquo;&lt;code&gt;microRNA&lt;/code&gt;&amp;rsquo; respectively&amp;ndash;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;dna&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#DNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;dnaLong&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#longDNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;rnaExon_Exon&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#RNAseq aim at exon-exon junction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alignType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;microRNA&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#microRNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;set-featurecount&#34;&gt;set featureCount&lt;/h4&gt;
&lt;p&gt;If only gene counts are needed to be output, leave &lt;code&gt;useMetaFeatures&lt;/code&gt; as default (simply don&amp;rsquo;t mention it). Please note each row in the input &amp;ldquo;&lt;strong&gt;Genomic GTF (.gtf)&lt;/strong&gt;&amp;rdquo; is a feature, and many features can belong to one gene while some features have no corresponding gene ID. You can see all fields that define a feature &lt;a href=&#34;https://mblab.wustl.edu/GTF22.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Thus, if feature counts containing information of all the fields rather than gene counts are needed, specify &lt;code&gt;useMetaFeatures=F&lt;/code&gt; as below, so that the output will give information like the number of reads mapped to &amp;ldquo;+&amp;rdquo; strand of chromosome &amp;ldquo;II&amp;rdquo; from &amp;ldquo;380&amp;rdquo; to &amp;ldquo;401&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subReadThreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shortreadRAM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;useMetaFeatures&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeRefFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.26_GRCh38_genomic.fna.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;even-more-flexibility-is-faciliated&#34;&gt;Even more flexibility is faciliated!&lt;/h3&gt;
&lt;p&gt;Hope the package can realize easy but deep appreciation of your fastq data, and you probably have found every parameters you wanna touch through above introduction. But there is even more! &lt;code&gt;...&lt;/code&gt; arguments enable &lt;code&gt;seqW&lt;/code&gt; function to access all the arguments in the classic functions wrapped inside it, including&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Rsubread::align&lt;/code&gt;, called when &lt;code&gt;alignType=&amp;quot;dna&amp;quot;&lt;/code&gt; ,&lt;code&gt;&amp;quot;rna&amp;quot;&lt;/code&gt; ,&lt;code&gt;&amp;quot;microRNA&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rsubread::sublong&lt;/code&gt;, called when &lt;code&gt;alignType=&amp;quot;longDNA&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rsubread::subjunc&lt;/code&gt;, called when &lt;code&gt;alignType=&amp;quot;rnaExon_Exon&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rsubread::featureCounts&lt;/code&gt;, called every time &lt;code&gt;seqW&lt;/code&gt; runs
(
thus simply add their parameters (see what they have by &lt;code&gt;?Rsubread::featureCounts&lt;/code&gt; or &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/vignettes/Rsubread/inst/doc/SubreadUsersGuide.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rsubread vignettes&lt;/a&gt;) when calling &lt;code&gt;seqW&lt;/code&gt;, e.g.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# minFragLength by default is 50L in Rsubread, but you can modify it easily as blow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;seqW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minFragLength&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileList1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genomeRefFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.26_GRCh38_genomic.fna.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;genomeAnnotFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./GCF_000001405.39_GRCh38.p13_genomic.gtf.gz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#RNAseq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;all-are-exported-for-your-own-pipeline&#34;&gt;All are exported for your own pipeline&lt;/h3&gt;
&lt;p&gt;You might even wanna add/alter the trimming and filtration pipeline; No problem! I have exported every units wrapped under the top-level function, including&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;trimEnds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trimTailw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trimAdapter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filterWidth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filterLowQuality&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ShortRead::nFilter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filterLowComplexity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filterInnerN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;simply &lt;code&gt;?trimEnds&lt;/code&gt; for example, to see their function and how to use it as bricks to make your own trimming and filter flow. And then use aforementioned &lt;code&gt;Rsubread&lt;/code&gt; functions to complete alignment and feature count.&lt;/p&gt;
&lt;h3 id=&#34;run-from-trimmed-fastqgz-or-aligned-bam&#34;&gt;Run from trimmed fastq.gz or aligned bam&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;seqW&lt;/code&gt; will sequentially generate&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;index files in working dir, whose names by default start with &amp;ldquo;my_index&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;trimmed &amp;ldquo;.fastq.gz&amp;rdquo; files whose names contain &amp;ldquo;trimed&amp;rdquo; in the same folder as for you initially input &amp;ldquo;.fastq.gz&amp;rdquo; files;&lt;/li&gt;
&lt;li&gt;aligned &amp;ldquo;.bam&amp;rdquo; files in the folder named &amp;ldquo;bam&amp;rdquo; located in working dir;&lt;/li&gt;
&lt;li&gt;feature counts in &amp;ldquo;.rds&amp;rdquo; format in working dir.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above steps are carried out by &lt;code&gt;Rsubread::buildindex&lt;/code&gt;, &lt;code&gt;TrimAndFilter&lt;/code&gt;, &lt;code&gt;Rsubread::align&lt;/code&gt; or its variant and &lt;code&gt;Rsubread::featureCounts&lt;/code&gt;, respectively. We have earlier discussed how to use &lt;code&gt;seqW&lt;/code&gt; funciton avoid repeating generation of index files when there are already index files. Besides, if satisfactory trimmed fastq exist, simply sequentially call necessary functions listed above to achieve your goal, e.g. building index by &lt;code&gt;Rsubread::buildindex&lt;/code&gt; then aligning and count features by  &lt;code&gt;Rsubread::align&lt;/code&gt; and &lt;code&gt;Rsubread::featureCounts&lt;/code&gt;. If you even have aligned bam, just run &lt;code&gt;Rsubread::buildindex&lt;/code&gt; and &lt;code&gt;Rsubread::featureCounts&lt;/code&gt;. If you have got feature counts at hand, well, thank you a lot for using or visiting this package.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üí® Modeling the deposition of infectious agents suggests that aerosolized drugs offer enhanced specificity</title>
      <link>http://localhost:1313/post/00.model_aerosol_depostion/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/00.model_aerosol_depostion/</guid>
      <description>&lt;h2 id=&#34;github-source-code&#34;&gt;Github source code&lt;/h2&gt;
&lt;p&gt;please see &lt;a href=&#34;https://github.com/jliu678/model_aerosol_depostion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source codes in github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Alveolar deposition is indeed a key event in respiratory infections, including pneumonia and viral infections like COVID-19. It allows many infectious agents (like bacteria, viruses, and fungi) to establish infection and cause damage to the lungs and overall health. Aerosols of 1‚Äì5 microns in diameter are able to bypass the upper airways and reach the deep parts of the lungs, including the alveoli. It is through aerosols that respiratory diseases like COVID-19, tuberculosis, and influenza spread so effectively.&lt;/p&gt;
&lt;p&gt;I thought the small size of aerosols that deeply reach alveoli made them subject to &lt;a href=&#34;https://en.wikipedia.org/wiki/Brownian_motion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Brownian motion&lt;/a&gt; and deposit in a random, erratic pattern. But the Fig 1D of &lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC6910245/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rothchild et al.,(2019)&lt;/a&gt; strongly challenged this idea. Specifically, the mice were infected with 2 √ó 10&lt;sup&gt;3&lt;/sup&gt; aerosolized tuberculosis bateria (M.tb), and one day later more than 15% of the infected alveoli contained two bacteria. Considering the &lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC2779834/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;36-hour douling time of M.tb&lt;/a&gt; even in rich growth conditions, we can reasonably ignore M.tb proliferation within the first day, during which the bacteria must acclimate to the immunocompetent lung environment. The frequency, therefore, does not align with the assumption that M.tb deposits randomly in each infection niche‚Äîthe region surveilled by one of the more than 7 √ó 10‚Åµ individual alveolar macrophages‚Äîat the same probability.&lt;/p&gt;
&lt;p&gt;I will demonstrate below that random niche deposition cannot recapitulate the results shown in &lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC6910245/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fig 1D&lt;/a&gt;, however, preferential deposition in certain niches successfully reproduces the findings. This suggests that infectious agents affect alveoli unevenly, and precision medicine should account for this variability to achieve satisfactory specificity and efficacy. Aerosolized drugs with similar deposition patterns are expected to be more advantageous compared to the same drugs delivered by other routes. Also please see &lt;a href=&#34;https://github.com/jliu678/model_aerosol_depostion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source codes in github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;random-deposition&#34;&gt;Random deposition&lt;/h2&gt;
&lt;p&gt;Assume each droplet deposit in alveolar niches independently and all niches ($N_{niche}$
 is total number of niches) have the same probability $p$
 to receive the M.tb. Thus

$$
p N_{niche} = 1
$$


Below R codes applied Monte Carlo simulation one million times for each scenario, traversing the parameter space where the niche population size is $N_{niche} \in [0.1, 2.4] \times 10^6$
, and the total number of M. tuberculosis (M.tb) deposited in the alveoli is $n_{Mtb} \in [2, 4] \times 10^3$
.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#faster Monte_Carlo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Monte_Carlo_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nAlveoli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nSim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extraLabel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nf&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;nNicheOccupiedBy1Bug&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;nNicheOccupiedBy2Bug&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;s&#34;&gt;&amp;#34;nNicheOccupiedByMore&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nSim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  	&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nAlveoli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  	&lt;span class=&#34;n&#34;&gt;t1[1]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t1[1]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  	&lt;span class=&#34;n&#34;&gt;t1[2]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t1[2]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  	&lt;span class=&#34;n&#34;&gt;t1[3]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t1[3]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;saveRDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CFU&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;,nAlveoli&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nAlveoli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.rds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;seq.int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2e3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4e3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nAlveoli&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;seq.int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;proc.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Monte_Carlo_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nAlveoli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extraLabel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;proc.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;
&lt;p&gt;As a result, in all one million simulations, at least 85% of the niches contain a single M.tb. And the means of simulation under representitive scenarios are depicted below. &lt;strong&gt;Contrary to the paper reported, random depostion can only result in less than 5% niches with two M.tb but larger than 95% niches with one M.tb&lt;/strong&gt;
&lt;figure class=&#34;ma0 w-75&#34;&gt;&lt;img src=&#34;http://localhost:1313/uploads/model_aerosol_depostion_random%20deposition.png&#34;&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;preferred-deposition&#34;&gt;Preferred deposition&lt;/h2&gt;
&lt;p&gt;Seek a function $f$
 describing the probability that a pathogen will be deposited into each niche, such that the likelihood of the observation reported by the paper will be maximized, i.e.

$$
\underset{f(x)}{\text{arg max}} \, L(f(x) \mid d_0)
$$


where $x$
 is the whole set of niches pathogens can be deposited into;  $f(x)$
 is the probability density function of $x$
, i.e. $f(x_i)$
 is the probability that a pathogen will be deposited into the niche $x_i$
; $d_0$
 is the distribution of pathogens in the niches reported by the paper; $L(f(x) \mid d_0)$
 is the likelihood of $f(x)$
 given $d_0$
.&lt;/p&gt;
&lt;p&gt;Approximate $d_0$
 by $d&#39;$
 from $\underset{d&#39; \in \mathbb{R}^2}{\arg\min} \| d&#39; - {d_o} \|, \quad {d_o} \in \mathbb{R}^5 $
. Before enough data is available to enable a rigorous theoretical derivation, it is assumed that each droplet deposit in alveolar niches independently and

$$
\begin{equation}
f(x_i) =
\begin{cases} 
P_1, &amp; \forall i \in [1, N_{P1}] \\
P_2, &amp; \forall i \in (N_{P1}, N_{\text{niche}}]
\end{cases}
\end{equation}
$$


where niches were categorized into two classes and $P_i$
 is the probability of being deposited of the niches belonging to &lt;em&gt;i-th&lt;/em&gt; category. Please note adding one class will increase the computation complexity by a factor of ùëÇ(ùëõ) due to the added dimension. $N_{Pi}$
 is the number of niches belonging to &lt;em&gt;i-th&lt;/em&gt; category. $N_{\text{niche}}$
 is the total number of niches.&lt;/p&gt;
&lt;p&gt;A matrix $N$
 below represents k-th possible scenarios that comply with $d_{0}$
, equation $(1)$
 and the total number of M. tuberculosis (M.tb) deposited in the alveoli, given by $n_{Mtb} \in [2, 4] \times 10^3$
.&lt;/p&gt;
&lt;p&gt;
$$
N_k =
\begin{bmatrix}
N_{11} &amp; N_{12} \\
N_{21} &amp; N_{22} \\
\end{bmatrix}
$$


Where $N_{ij}$
 represents the number of niches that were deposited by $i$
 (an integer) M.tb, and each M.tb is deposited with a probability of $P_j$
. Thus, the probability of $N_k$
 given $N_k, d_{0}, P_1, P_2, N_{P1}, N_{\text{niche}},n_{\text{Mtb}}$
 is&lt;/p&gt;

$$
\begin{gather*}
p(N_k \mid d_{0}, P_1, P_2, N_{P1}, N_{\text{niche}}, n_{\text{Mtb}}) =  P_1^{N_{11}+2N_{21}} \times P_2^{N_{12}+2N_{22}} \\
\binom{N_{\text{niche}}}{N_{P1}} \binom{N_{P1}}{N_{11}} \binom{N_{P1}-N_{11}}{N_{21}} \binom{N_{P2}}{N_{12}} \binom{N_{P2}-N_{12}}{N_{22}} \times  \\
\binom{n_{\text{Mtb}}}{N_{11}+N_{12}} \times \prod_{j=0}^{\frac{n_{\text{Mtb}}^{N_2.}}{2}} \binom{n_{\text{Mtb}}^{N_2.}-2j}{2}
\end{gather*}
$$


&lt;p&gt;Where $n_{\text{Mtb}}^{N_2.}=n_{\text{Mtb}}-N_{11}-N_{12}$
 is the number of M.tb deposited into niches that eventually have two M.tb at the same niche. The above formula can be reformulated to clearly reflect its dependency on the independent variables, enabling a more efficient loop design. Specifically, below parts depend on $N_k, d_{0}, P_1, P_2, N_{P1}, N_{\text{niche}},n_{\text{Mtb}}$
:&lt;/p&gt;

$$
\begin{equation}
\binom{N_{P1}}{N_{11}} \binom{N_{P1}-N_{11}}{N_{21}} \binom{N_{P2}}{N_{12}} \binom{N_{P2}-N_{12}}{N_{22}}
\end{equation}
$$


&lt;p&gt;Below depends on $d_{0}, P_1, P_2, N_{P1}, N_{\text{niche}},n_{\text{Mtb}}$
:

$$
\begin{equation}
P_1^{N_{11}+2N_{21}} P_2^{N_{12}+2N_{22}} \binom{N_{\text{niche}}}{N_{P1}}
\end{equation}
$$

&lt;/p&gt;
&lt;p&gt;Below depends on $d_{0}, N_{\text{niche}},n_{\text{Mtb}}$
:

$$
\begin{equation}
\binom{n_{\text{Mtb}}}{N_{11}+N_{12}} \times \prod_{j=0}^{\frac{n_{\text{Mtb}}^{N_2.}}{2}} \binom{n_{\text{Mtb}}^{N_2.}-2j}{2}
\end{equation}
$$

&lt;/p&gt;
&lt;p&gt;Equation (4) can be algebraically derived into below to simplify the calculation significantly:

$$
\begin{equation}
\binom{n_{\text{Mtb}}}{N_{11}+N_{12}} \times {(n_{\text{Mtb}}^{N_2.})!} \prod_{j=1}^{\frac{n_{\text{Mtb}}^{N_2.}}{2}} (2j-1)
\end{equation}
$$

&lt;/p&gt;
&lt;p&gt;Now the probability of $N_k$
 given $N_k, d_{0}, P_1, P_2, N_{P1}, N_{\text{niche}},n_{\text{Mtb}}$
 can be rewriten into:

$$
\begin{equation}
p(N_k \mid d_{0}, P_1, P_2, N_{P1}, N_{\text{niche}}, n_{\text{Mtb}}) =  e^{\ln(2) + \ln(3) + \ln(5)}
\end{equation}
$$

 Note the values of $(2),(3),(5)$
 exceed the limits that are acceptable by R or Python, but their product $(2)(3)(5) \in (0, 1)$
. And $e^{\ln(x)}$
 transformation in equation (6) makes $(2)(3)(5)$
 computable.&lt;/p&gt;
&lt;p&gt;Last, the probability of $P_1, P_2, N_{P1}, N_{\text{niche}}$
 given $d_{0},n_{\text{Mtb}}$
 can be caculated as:

$$
\begin{equation}
L(f(x) \mid d_{0},n_{\text{Mtb}}) \approx L(f(x) \mid d&#39;,n_{\text{Mtb}}) = \sum_{N_k}^{} e^{\ln(2) + \ln(3) + \ln(5)}
\end{equation}
$$

&lt;/p&gt;
&lt;p&gt;Below are R codes to compute equation (7). First, the combinations and permutations are approximated using the Gamma function, developed by the Indian mathematician Srinivasa Ramanujan (1887‚Äì1920), which otherwise exceed the default capabilities of R and Python functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#necessary functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ramanujan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1+2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;logCmbn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;ramanujan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ramanujan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ramanujan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;logPermute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;ramanujan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ramanujan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below pre-computation to speed up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# N is a matrix whose element Nij is the number of niches with Pj (the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# probability that a pathogen will be deposit into the niche) and occupied&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# by i (an integer number, any of 1:1:3) pathogens&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# N=[N11 N12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   N21 N22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   N31 N32]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# for N used in downstream, dim(N) is c(2,2) &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# N=[N11 N12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#   N21 N22]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# CFU should be able to be calculated from N, but for speed we directly input CFU&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#** k=the portion of mtb that goes to a niche of one, two or three-mtb occupied niche**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#** as reported in Fig1D **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# k&amp;lt;-round(c(1:3)*c(81.25,15.625,3.125)/c(c(1:3)%*%c(81.25,15.625,3.125)),3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# k&amp;lt;-round(c(1:2)*c(83,17)/c(c(1:2)%*%c(83,17)),3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pre_computed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%*%&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3e3L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** k*CFU is the number of mtb that  goes to a niche of one, two or three-mtb occupied niche**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** SUMni is the number of niches that are occupied by one, two or three-mtb **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;SUMni&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** below pre-compute matrices or vectors to select N matrices that obeys P matrix **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** Ln1 is argument of f1(). **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** Ln1 is a 4 X I matrix, I is the number of all possible N constrained by CFU and paper&amp;#39;s Fig1D **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#**     Rows 1 to 4 of Ln1 is possible values of {N11}, {N12}, {N21}, {N22} respectively **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;melt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SUMni[2]&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ncol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;SUMni[1]&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Var2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Var1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1L&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln0[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[1]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln0[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln0[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[2]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln0[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0.13s/run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** LsA is argument of f1(). **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** LsA= Ln1[1,] + Ln1[3,], i.e. N11+N21 the total number of niches that have p1 chance to be occupied**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1[1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ln1[3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** LsD is argument of f1(). **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#** LsD= Ln1[2,] + Ln1[4,], i.e. N12+N22 the total number of niches that have p2 chance to be occupied**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# identical(Ln1[2,] + Ln1[4,],LsD)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#logCirCle3 component,Sumini1, and Sumini2=CFU-Sumini1 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Sumini1full&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[2]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#logCircle2 is independent of N P, and is the same for different N P as long as CFU remains the same&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logCmbn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;seq.int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[1]&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;-2L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;logPermute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[2]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUMni[2]&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1full&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we defined $f(x)$
 (the matrix P in below R codes), equation (7) is calculated by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#given CFU,seek a matrix P (which describes f(x) in the text) to maximize f1(P) which calculates equation (7) in the text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# P =[nP1,np2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#     P1 ,p2]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# rowsum(P)=[nAlveoli;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# P[1,] %*% P[2,]=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logProw2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1full&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# f1 gets the probability given a fixed P;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 1. generate all possible N compatible with P and nAlveoli/pathogen distribution&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# in the paper&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1[2]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Sumini1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1full[l]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 2. get logCircle3 of each N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;logCircle3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logProw2[1]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logProw2[2]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;logCmbn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 3. logCircle1 of each N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;logCircle1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getlogCircle1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the &lt;code&gt;getlogCircle1()&lt;/code&gt; is written to be more efficient than data.table using 16 threads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;getlogCircle1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;lLn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln2sbstr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln2sbstr[3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0L&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Ln2sbstr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln2sbstr[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lLn&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lLn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#all components of logCircle1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;alllogCircle1components&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;logCmbn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln2sbstr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#get logCircle1 of each N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#speed on mac: aggregation&amp;lt;data.table&amp;lt;built matrix+colsums&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;colSums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alllogCircle1components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;na.rm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stochastic gradient descent is used to seek the $f(x)$
 with max likelihood, traversing the total number of M. tuberculosis (M.tb) deposited in the alveoli $n_{Mtb} \in [2, 4] \times 10^3$
:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;getdP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nNiches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nNiches&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%*%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1full&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Prow1d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+100L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nNiches&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-100L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%*%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1full&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;relPd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relPd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relPd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%*%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Prow1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LsD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ln1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sumini1full&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logCircle2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;GD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2e5L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nNiches&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e6L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nItr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1e3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%*%&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3e3L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#1&amp;gt;mP11&amp;gt;0 the percentage of last dP11 contribute to new dP11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#1&amp;gt;mrelP&amp;gt;0 the percentage of last drelP contribute to new drelP  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;precomputed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pre_computed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;precomputed_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Ln1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;LsA&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;LsD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Sumini1full&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;logCircle2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;precomputed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;precomputed_names[i]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;precomputed[i]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ncol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nItr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;relP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;P11&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;drelP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dP11&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getdP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nNiches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;is.na&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;current P is 0, try set a better initializaiton&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m[1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nItr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;proc.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getdP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nNiches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mrelP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;m[i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drelP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dP11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;iteration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;done&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;proc.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;[3]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;s\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;result-1&#34;&gt;Result&lt;/h3&gt;
&lt;p&gt;As a result, Monte Carlo simulation using the $f(x)$
 of max likelihood gives a &lt;strong&gt;nealy same result&lt;/strong&gt; as reported in the Fig 1D of &lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC6910245/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rothchild et al.,(2019)&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&#34;ma0 w-75&#34;&gt;&lt;img src=&#34;http://localhost:1313/uploads/model_aerosol_depostion_prefered%20depostion.jpg&#34;&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;animated-visulization&#34;&gt;Animated visulization&lt;/h3&gt;
&lt;p&gt;We can continue to predict the the number of alveolar macrophages initially infected varied with infection dose, and what infection dose can cause acute symptomatic infection. Below animation demonstrates the prediction.
&lt;figure class=&#34;ma0 w-75&#34;&gt;&lt;img src=&#34;http://localhost:1313/uploads/model_aerosol_depostion_bestModel,boostrapDynamicVis1.gif&#34;&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üéâ Easily create your own simple yet highly customizable blog</title>
      <link>http://localhost:1313/post/99.get-started/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/99.get-started/</guid>
      <description>&lt;p&gt;Welcome üëã&lt;/p&gt;



&lt;details class=&#34;print:hidden xl:hidden&#34; open&gt;
  &lt;summary&gt;Table of Contents&lt;/summary&gt;
  &lt;div class=&#34;text-sm&#34;&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#crowd-funded-open-source-software&#34;&gt;Crowd-funded open-source software&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#-click-here-to-become-a-sponsor-and-help-support-hugo-bloxs-future-httpshugobloxcomsponsor&#34;&gt;&lt;a href=&#34;https://hugoblox.com/sponsor/&#34;&gt;‚ù§Ô∏è Click here to become a sponsor and help support Hugo Blox&amp;rsquo;s future ‚ù§Ô∏è&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#ecosystem&#34;&gt;Ecosystem&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#inspiration&#34;&gt;Inspiration&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Hugo Blox website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site&lt;/li&gt;
&lt;li&gt;The template can be modified and customised to suit your needs. It&amp;rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a &lt;strong&gt;no-code solution (write in Markdown and customize with YAML parameters)&lt;/strong&gt; and having &lt;strong&gt;flexibility to later add even deeper personalization with HTML and CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;get-started&#34;&gt;Get Started&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;üëâ &lt;a href=&#34;https://hugoblox.com/templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;üìö &lt;a href=&#34;https://docs.hugoblox.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Personalize your site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;üí¨ &lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;Hugo Blox community&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Hugo community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;üê¶ Twitter: &lt;a href=&#34;https://twitter.com/GetResearchDev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GetResearchDev&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; #MadeWithHugoBlox&lt;/li&gt;
&lt;li&gt;üí° &lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt; for &lt;em&gt;Hugo Blox&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;‚¨ÜÔ∏è &lt;strong&gt;Updating Hugo Blox?&lt;/strong&gt; View the &lt;a href=&#34;https://docs.hugoblox.com/reference/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;crowd-funded-open-source-software&#34;&gt;Crowd-funded open-source software&lt;/h2&gt;
&lt;p&gt;To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.&lt;/p&gt;
&lt;h3 id=&#34;-click-here-to-become-a-sponsor-and-help-support-hugo-bloxs-future-httpshugobloxcomsponsor&#34;&gt;&lt;a href=&#34;https://hugoblox.com/sponsor/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;‚ù§Ô∏è Click here to become a sponsor and help support Hugo Blox&amp;rsquo;s future ‚ù§Ô∏è&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a token of appreciation for sponsoring, you can &lt;strong&gt;unlock &lt;a href=&#34;https://hugoblox.com/sponsor/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;these&lt;/a&gt; awesome rewards and extra features ü¶Ñ‚ú®&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/GetRD/academic-file-converter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bibtex To Markdown&lt;/a&gt;:&lt;/strong&gt; Automatically import publications from BibTeX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hugoblox.com/creators/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learn what other &lt;strong&gt;creators&lt;/strong&gt;&lt;/a&gt; are building with this template.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with no-code &lt;a href=&#34;https://hugoblox.com/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;blocks&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.hugoblox.com/reference/markdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://docs.hugoblox.com/reference/markdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.hugoblox.com/getting-started/cms/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://docs.hugoblox.com/getting-started/cms/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://docs.hugoblox.com/getting-started/customize/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code syntax highlighting and LaTeX math supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one-page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 35+ language packs including English, ‰∏≠Êñá, and Portugu√™s&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Hugo Blox and its templates come with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Visitors can choose their preferred mode by clicking the sun/moon icon in the header.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.hugoblox.com/getting-started/customize/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully customizable.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/blob/main/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üß† Sharpen your thinking with a second brain</title>
      <link>http://localhost:1313/post/99.second-brain/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/99.second-brain/</guid>
      <description>&lt;p&gt;Create a personal knowledge base and share your knowledge with your peers.&lt;/p&gt;
&lt;p&gt;Hugo Blox web framework empowers you with one of the most flexible note-taking capabilities out there.&lt;/p&gt;
&lt;p&gt;Create a powerful knowledge base that works on top of a local folder of plain text Markdown files.&lt;/p&gt;
&lt;p&gt;Use it as your second brain, either publicly sharing your knowledge with your peers via your website, or via a private GitHub repository and password-protected site just for yourself.&lt;/p&gt;
&lt;h2 id=&#34;mindmaps&#34;&gt;Mindmaps&lt;/h2&gt;
&lt;p&gt;Hugo Blox supports a Markdown extension for mindmaps.&lt;/p&gt;
&lt;p&gt;With this open format, can even edit your mindmaps in other popular tools such as Obsidian.&lt;/p&gt;
&lt;p&gt;Simply insert a Markdown code block labelled as &lt;code&gt;markmap&lt;/code&gt; and optionally set the height of the mindmap as shown in the example below.&lt;/p&gt;
&lt;p&gt;Mindmaps can be created by simply writing the items as a Markdown list within the &lt;code&gt;markmap&lt;/code&gt; code block, indenting each item to create as many sub-levels as you need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;
&lt;code&gt;
```markmap {height=&#34;200px&#34;}
- Hugo Modules
  - Hugo Blox
  - blox-plugins-netlify
  - blox-plugins-netlify-cms
  - blox-plugins-reveal
```
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;markmap&#34; style=&#34;height: 200px;&#34;&gt;

&lt;pre&gt;- Hugo Modules
  - Hugo Blox
  - blox-plugins-netlify
  - blox-plugins-netlify-cms
  - blox-plugins-reveal&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anh here&amp;rsquo;s a more advanced mindmap with formatting, code blocks, and math:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;
&lt;code&gt;
```markmap
- Mindmaps
  - Links
    - [Hugo Blox Docs](https://docs.hugoblox.com/)
    - [Discord Community](https://discord.gg/z8wNYzb)
    - [GitHub](https://github.com/HugoBlox/hugo-blox-builder)
  - Features
    - Markdown formatting
    - **inline** ~~text~~ *styles*
    - multiline
      text
    - `inline code`
    -
      ```js
      console.log(&#39;hello&#39;);
      console.log(&#39;code block&#39;);
      ```
    - Math: $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$
```
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;markmap&#34; style=&#34;height: 500px;&#34;&gt;

&lt;pre&gt;- Mindmaps
  - Links
    - [Hugo Blox Docs](https://docs.hugoblox.com/)
    - [Discord Community](https://discord.gg/z8wNYzb)
    - [GitHub](https://github.com/HugoBlox/hugo-blox-builder)
  - Features
    - Markdown formatting
    - **inline** ~~text~~ *styles*
    - multiline
      text
    - `inline code`
    -
      ```js
      console.log(&#39;hello&#39;);
      console.log(&#39;code block&#39;);
      ```
    - Math: $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&#34;highlighting&#34;&gt;Highlighting&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;Highlight&lt;/mark&gt; important text with &lt;code&gt;mark&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Highlighted text&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;callouts&#34;&gt;Callouts&lt;/h2&gt;
&lt;p&gt;Use &lt;a href=&#34;https://docs.hugoblox.com/reference/markdown/#callouts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;callouts&lt;/a&gt; (aka &lt;em&gt;asides&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;) to draw attention to notes, tips, and warnings.&lt;/p&gt;
&lt;p&gt;By wrapping a paragraph in &lt;code&gt;{{% callout note %}} ... {{% /callout %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% callout note %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% /callout %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;flex px-4 py-3 mb-6 rounded-md bg-primary-100 dark:bg-primary-900&#34;&gt;
&lt;span class=&#34;pr-3 pt-1 text-primary-600 dark:text-primary-300&#34;&gt;
  &lt;svg height=&#34;24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;1.5&#34; d=&#34;m11.25 11.25l.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0a9 9 0 0 1 18 0m-9-3.75h.008v.008H12z&#34;/&gt;&lt;/svg&gt;
&lt;/span&gt;
  &lt;span class=&#34;dark:text-neutral-300&#34;&gt;A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;Or use the &lt;code&gt;warning&lt;/code&gt; callout type so your readers don&amp;rsquo;t miss critical details:&lt;/p&gt;
&lt;div class=&#34;flex px-4 py-3 mb-6 rounded-md bg-yellow-100 dark:bg-yellow-900&#34;&gt;
&lt;span class=&#34;pr-3 pt-1 text-red-400&#34;&gt;
  &lt;svg height=&#34;24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;1.5&#34; d=&#34;M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0zM12 15.75h.007v.008H12z&#34;/&gt;&lt;/svg&gt;
&lt;/span&gt;
  &lt;span class=&#34;dark:text-neutral-300&#34;&gt;A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;/span&gt;
&lt;/div&gt;
&lt;h2 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it üôå&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>üìà Communicate your results effectively with the best data visualizations</title>
      <link>http://localhost:1313/post/99.data-visualization/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/99.data-visualization/</guid>
      <description>&lt;p&gt;Hugo Blox is designed to give technical content creators a seamless experience. You can focus on the content and Hugo Blox handles the rest.&lt;/p&gt;
&lt;p&gt;Use popular tools such as Plotly, Mermaid, and data frames.&lt;/p&gt;
&lt;h2 id=&#34;charts&#34;&gt;Charts&lt;/h2&gt;
&lt;p&gt;Hugo Blox supports the popular &lt;a href=&#34;https://plot.ly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly&lt;/a&gt; format for interactive data visualizations. With Plotly, you can design almost any kind of visualization you can imagine!&lt;/p&gt;
&lt;p&gt;Save your Plotly JSON in your page folder, for example &lt;code&gt;line-chart.json&lt;/code&gt;, and then add the &lt;code&gt;{{&amp;lt; chart data=&amp;quot;line-chart&amp;quot; &amp;gt;}}&lt;/code&gt; shortcode where you would like the chart to appear.&lt;/p&gt;
&lt;p&gt;Demo:&lt;/p&gt;




&lt;div id=&#34;chart-781649523&#34; class=&#34;chart&#34;&gt;&lt;/div&gt;
&lt;script&gt;
  async function fetchChartJSON() {
    console.debug(&#39;Hugo Blox fetching chart JSON...&#39;)
    const response = await fetch(&#39;.\/line-chart.json&#39;);
    return await response.json();
  }

  (function() {
    let a = setInterval( function() {
      if ( typeof window.Plotly === &#39;undefined&#39; ) {
        console.debug(&#39;Plotly not loaded yet...&#39;)
        return;
      }
      clearInterval( a );

      fetchChartJSON().then(chart =&gt; {
        console.debug(&#39;Plotting chart...&#39;)
        window.Plotly.newPlot(&#39;chart-781649523&#39;, chart.data, chart.layout, {responsive: true});
      });
    }, 500 );
  })();
&lt;/script&gt;

&lt;p&gt;You might also find the &lt;a href=&#34;http://plotly-json-editor.getforge.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly JSON Editor&lt;/a&gt; useful.&lt;/p&gt;
&lt;h2 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h2&gt;
&lt;p&gt;Hugo Blox supports the &lt;em&gt;Mermaid&lt;/em&gt; Markdown extension for diagrams.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
A[Hard] --&gt;|Text| B(Round)
B --&gt; C{Decision}
C --&gt;|One| D[Result 1]
C --&gt;|Two| E[Result 2]
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
Alice-&gt;&gt;John: Hello John, how are you?
loop Healthcheck
    John-&gt;&gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&gt;&gt;Alice: Great!
John-&gt;&gt;Bob: How about you?
Bob--&gt;&gt;John: Jolly good!
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 &amp;lt;--&amp;gt; C2: Cool label
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;classDiagram
Class01 &lt;|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --&gt; C2 : Where am i?
Class09 --* C3
Class09 --|&gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 &lt;--&gt; C2: Cool label
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;stateDiagram
[*] --&gt; Still
Still --&gt; [*]
Still --&gt; Moving
Moving --&gt; Still
Moving --&gt; Crash
Crash --&gt; [*]
&lt;/div&gt;
&lt;h2 id=&#34;data-frames&#34;&gt;Data Frames&lt;/h2&gt;
&lt;p&gt;Save your spreadsheet as a CSV file in your page&amp;rsquo;s folder and then render it by adding the &lt;em&gt;Table&lt;/em&gt; shortcode to your page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;results.csv&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;caption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Table 1: My results&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;














&lt;table class=&#34;table-auto w-full&#34;&gt;
  
    
    
    &lt;thead&gt;
      &lt;tr&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;customer_id&lt;/th&gt;  &lt;th class=&#34;border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left&#34;&gt;score&lt;/th&gt;  &lt;/tr&gt;
    &lt;/thead&gt;
  
  &lt;tbody&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;number&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;1&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;number&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;0&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;number&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;2&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;0.5&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;number&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;3&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;number&#34; class=&#34;border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400&#34;&gt;1&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
  &lt;/tbody&gt;
  
    &lt;caption class=&#34;table-caption&#34;&gt;Table 1: My results&lt;/caption&gt;
  
&lt;/table&gt;

&lt;h2 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it üôå&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>üë©üèº‚Äçüè´ Teach academic courses</title>
      <link>http://localhost:1313/post/99.teach-courses/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/99.teach-courses/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hugoblox.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Blox Builder&lt;/a&gt; is designed to give technical content creators a seamless experience. You can focus on the content and the Hugo Blox Builder which this template is built upon handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Embed videos, podcasts, code, LaTeX math, and even test students!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Hugo Blox.&lt;/p&gt;
&lt;h2 id=&#34;video&#34;&gt;Video&lt;/h2&gt;
&lt;p&gt;Teach your course by sharing videos with your students. Choose from one of the following approaches:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Youtube&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; youtube D2vj0WcvH5c &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/D2vj0WcvH5c?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Bilibili&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; bilibili BV1WV4y1r7DF &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;w-full h-auto aspect-video relative&#34;&gt;
  &lt;iframe src=&#34;//player.bilibili.com/player.html?bvid=BV1WV4y1r7DF&amp;page=1&#34;
  allow=&#34;accelerometer; clipboard-write; encrypted-media; gyroscope; fullscreen; picture-in-picture;&#34;
  class=&#34;w-full h-full&#34;
  &gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Video file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Videos may be added to a page by either placing them in your &lt;code&gt;assets/media/&lt;/code&gt; media library or in your &lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page&amp;rsquo;s folder&lt;/a&gt;, and then embedding them with the &lt;em&gt;video&lt;/em&gt; shortcode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; video src=&amp;quot;my_video.mp4&amp;quot; controls=&amp;quot;yes&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;podcast&#34;&gt;Podcast&lt;/h2&gt;
&lt;p&gt;You can add a podcast or music to a page by placing the MP3 file in the page&amp;rsquo;s folder or the media library folder and then embedding the audio on your page with the &lt;em&gt;audio&lt;/em&gt; shortcode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; audio src=&amp;quot;ambient-piano.mp3&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try it out:&lt;/p&gt;








  








&lt;audio controls &gt;
  &lt;source src=&#34;http://localhost:1313/post/99.teach-courses/ambient-piano.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
&lt;/audio&gt;

&lt;h2 id=&#34;test-students&#34;&gt;Test students&lt;/h2&gt;
&lt;p&gt;Provide a simple yet fun self-assessment by revealing the solutions to challenges with the &lt;code&gt;spoiler&lt;/code&gt; shortcode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;spoiler&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;üëâ Click to view the solution&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;You found me!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spoiler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary class=&#34;cursor-pointer&#34;&gt;üëâ Click to view the solution&lt;/summary&gt;
  &lt;div class=&#34;rounded-lg bg-neutral-50 dark:bg-neutral-800 p-2&#34;&gt;
    You found me üéâ
  &lt;/div&gt;
&lt;/details&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;Hugo Blox Builder supports a Markdown extension for $\LaTeX$ math. Enable math by setting the &lt;code&gt;math: true&lt;/code&gt; option in your page&amp;rsquo;s front matter, or enable math for your entire site by toggling math in your &lt;code&gt;config/_default/params.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\gamma&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;_{n} &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{ &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; | &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n} &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;^T &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; |}{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\|\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{x}_{n}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{x}_{n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\|&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the math linebreak (&lt;code&gt;\\&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;k;p_{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}^{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\begin&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{cases}p_{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}^{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} &amp;amp; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\text&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{if }k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;p_{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}^{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} &amp;amp; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\text&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{if }k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\end&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{cases}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
$$
f(k;p_{0}^{*}) = \begin{cases}p_{0}^{*} &amp; \text{if }k=1, \\
1-p_{0}^{*} &amp; \text{if }k=0.\end{cases}
$$&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;Hugo Blox Builder utilises Hugo&amp;rsquo;s Markdown extension for highlighting code syntax. The code theme can be selected in the &lt;code&gt;config/_default/params.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inline-images&#34;&gt;Inline Images&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icon&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;}}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;span class=&#34;inline-block  pr-1&#34;&gt;
    &lt;svg style=&#34;height: 1em; transform: translateY(0.1em);&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;1em&#34; viewBox=&#34;0 0 448 512&#34; fill=&#34;currentColor&#34;&gt;&lt;path d=&#34;M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z&#34;/&gt;&lt;/svg&gt;
  &lt;/span&gt; Python&lt;/p&gt;
&lt;h2 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it üôå&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>‚úÖ Manage your projects</title>
      <link>http://localhost:1313/post/99.project-management/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/99.project-management/</guid>
      <description>&lt;p&gt;Easily manage your projects - create ideation mind maps, Gantt charts, todo lists, and more!&lt;/p&gt;
&lt;h2 id=&#34;ideation&#34;&gt;Ideation&lt;/h2&gt;
&lt;p&gt;Hugo Blox supports a Markdown extension for mindmaps.&lt;/p&gt;
&lt;p&gt;Simply insert a Markdown code block labelled as &lt;code&gt;markmap&lt;/code&gt; and optionally set the height of the mindmap as shown in the example below.&lt;/p&gt;
&lt;p&gt;Mindmaps can be created by simply writing the items as a Markdown list within the &lt;code&gt;markmap&lt;/code&gt; code block, indenting each item to create as many sub-levels as you need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;
&lt;code&gt;
```markmap {height=&#34;200px&#34;}
- Hugo Modules
  - Hugo Blox
  - blox-plugins-netlify
  - blox-plugins-netlify-cms
  - blox-plugins-reveal
```
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;markmap&#34; style=&#34;height: 200px;&#34;&gt;

&lt;pre&gt;- Hugo Modules
  - Hugo Blox
  - blox-plugins-netlify
  - blox-plugins-netlify-cms
  - blox-plugins-reveal&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h2&gt;
&lt;p&gt;Hugo Blox supports the &lt;em&gt;Mermaid&lt;/em&gt; Markdown extension for diagrams.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/div&gt;
&lt;h2 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h2&gt;
&lt;p&gt;You can even write your todo lists in Markdown too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;- [x]&lt;/span&gt; Write math example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;- [x]&lt;/span&gt; Write diagram example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;- [ ]&lt;/span&gt; Do something else
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it üôå&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_derive_time-varying_alpha_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_derive_time-varying_alpha_model/</guid>
      <description>&lt;h1 id=&#34;rna-kinetics-derivation-for-time-varying-transcription&#34;&gt;RNA Kinetics Derivation for Time-Varying Transcription&lt;/h1&gt;
&lt;p&gt;This derivation focuses on the general case for $k \in \{1,2\}$
, as states $k \in \{3,4\}$
 correspond to steady-state or fully repressed ($\alpha=0$
) conditions, which simplify the general solution. The derivation appears to be for a general time $t$
, and $\tau^{(k)} = t - t_0^{(k)}$
 is the time elapsed since the start of the current kinetic phase. $t_0^{(k)}$
 is the starting time of the current kinetic phase $k$
.&lt;/p&gt;
&lt;h2 id=&#34;initial-setup-the-kinetic-equations&#34;&gt;Initial Setup: The Kinetic Equations&lt;/h2&gt;
&lt;p&gt;The fundamental differential equations governing RNA dynamics are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unspliced RNA:&lt;/strong&gt;

$$ \frac{du}{dt} = \alpha(t) - \beta u \quad \text{(1)} $$

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spliced RNA:&lt;/strong&gt;

$$ \frac{ds}{dt} = \beta u - \gamma s \quad \text{(2)} $$

&lt;/p&gt;
&lt;p&gt;Here, $\alpha(t)$
 is the time-varying transcription rate, $\beta$
 is the splicing rate, and $\gamma$
 is the degradation rate. These are assumed to be constant within a phase.&lt;/p&gt;
&lt;p&gt;The given $\alpha^{(k)}(t)$
 for $k \in \{1,2\}$
 is:&lt;/p&gt;

$$ \alpha^{(k)}(t) = \alpha_1 - (\alpha_1 - \alpha_0) e^{-\lambda_\alpha t} \quad \text{(3)} $$


&lt;p&gt;We are given the initial conditions at the start of the phase $k$
: $u(t_0^{(k)}) = u_0^{(k)}$
 and $s(t_0^{(k)}) = s_0^{(k)}$
. Let $\tau^{(k)} = t - t_0^{(k)}$
. So, $t = t_0^{(k)} + \tau^{(k)}$
.&lt;/p&gt;
&lt;h2 id=&#34;derivation-of-equation-4-for-ut&#34;&gt;Derivation of Equation (4) for u(t)&lt;/h2&gt;
&lt;p&gt;The differential equation for unspliced RNA is a first-order linear ODE:&lt;/p&gt;

$$ \frac{du}{dt} + \beta u = \alpha^{(k)}(t) \quad \text{(4)} $$


&lt;p&gt;We can solve this using an integrating factor, which is $e^{\int \beta dt} = e^{\beta t}$
.&lt;/p&gt;
&lt;p&gt;Multiply both sides by the integrating factor:&lt;/p&gt;

$$ e^{\beta t} \frac{du}{dt} + \beta e^{\beta t} u = \alpha^{(k)}(t) e^{\beta t} \quad \text{(5)} $$


&lt;p&gt;The left side is the derivative of a product:&lt;/p&gt;

$$ \frac{d}{dt}(e^{\beta t} u) = \alpha^{(k)}(t) e^{\beta t} \quad \text{(6)} $$


&lt;p&gt;Now, integrate both sides from $t_0^{(k)}$
 to $t$
:&lt;/p&gt;

$$ \int_{t_0^{(k)}}^t \frac{d}{dt&#39;}(e^{\beta t&#39;} u(t&#39;)) dt&#39; = \int_{t_0^{(k)}}^t \alpha^{(k)}(t&#39;) e^{\beta t&#39;} dt&#39; \quad \text{(7)} $$



$$ [e^{\beta t&#39;} u(t&#39;)]_{t_0^{(k)}}^t = \int_{t_0^{(k)}}^t \alpha^{(k)}(t&#39;) e^{\beta t&#39;} dt&#39; \quad \text{(8)} $$



$$ e^{\beta t} u(t) - e^{\beta t_0^{(k)}} u_0^{(k)} = \int_{t_0^{(k)}}^t \alpha^{(k)}(t&#39;) e^{\beta t&#39;} dt&#39; \quad \text{(9)} $$


&lt;p&gt;Rearrange to solve for $u(t)$
:&lt;/p&gt;

$$ u(t) = u_0^{(k)} e^{-\beta(t-t_0^{(k)})} + e^{-\beta t} \int_{t_0^{(k)}}^t \alpha^{(k)}(t&#39;) e^{\beta t&#39;} dt&#39; \quad \text{(10)} $$


&lt;p&gt;Let $\tau^{(k)} = t - t_0^{(k)}$
.&lt;/p&gt;

$$ u(t) = u_0^{(k)} e^{-\beta \tau^{(k)}} + e^{-\beta t} \int_{t_0^{(k)}}^t \alpha^{(k)}(t&#39;) e^{\beta t&#39;} dt&#39; \quad \text{(11)} $$


&lt;p&gt;Now, substitute the expression for $\alpha^{(k)}(t&#39;)$
:&lt;/p&gt;

$$ \alpha^{(k)}(t&#39;) = \alpha_1 - (\alpha_1 - \alpha_0) e^{-\lambda_\alpha t&#39;} \quad \text{(12)} $$


&lt;p&gt;The integral becomes:&lt;/p&gt;

$$ \int_{t_0^{(k)}}^t (\alpha_1 - (\alpha_1 - \alpha_0) e^{-\lambda_\alpha t&#39;}) e^{\beta t&#39;} dt&#39; \quad \text{(13)} $$



$$ = \int_{t_0^{(k)}}^t \alpha_1 e^{\beta t&#39;} dt&#39; - \int_{t_0^{(k)}}^t (\alpha_1 - \alpha_0) e^{-(\lambda_\alpha - \beta) t&#39;} dt&#39; \quad \text{(14)} $$


&lt;p&gt;Let&amp;rsquo;s solve each integral separately:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integral 1:&lt;/strong&gt;

$$ \int_{t_0^{(k)}}^t \alpha_1 e^{\beta t&#39;} dt&#39; = \alpha_1 \left[\frac{1}{\beta} e^{\beta t&#39;}\right]_{t_0^{(k)}}^t = \frac{\alpha_1}{\beta}(e^{\beta t} - e^{\beta t_0^{(k)}}) \quad \text{(15)} $$

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integral 2:&lt;/strong&gt;

$$ \int_{t_0^{(k)}}^t (\alpha_1 - \alpha_0) e^{-(\lambda_\alpha - \beta) t&#39;} dt&#39; = (\alpha_1 - \alpha_0) \left[\frac{1}{-(\lambda_\alpha - \beta)} e^{-(\lambda_\alpha - \beta) t&#39;}\right]_{t_0^{(k)}}^t \quad \text{(16)} $$

&lt;/p&gt;

$$ = \frac{-(\alpha_1 - \alpha_0)}{\lambda_\alpha - \beta}(e^{-(\lambda_\alpha - \beta) t} - e^{-(\lambda_\alpha - \beta) t_0^{(k)}}) \quad \text{(17)} $$



$$ = \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha}(e^{-(\lambda_\alpha - \beta) t} - e^{-(\lambda_\alpha - \beta) t_0^{(k)}}) \quad \text{(18)} $$


&lt;p&gt;Now, substitute these back into the expression for $u(t)$
:&lt;/p&gt;

\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + e^{-\beta t} \left[\frac{\alpha_1}{\beta}(e^{\beta t} - e^{\beta t_0^{(k)}}) \right. \\
&amp;\quad \left. - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha}(e^{-(\lambda_\alpha - \beta) t} - e^{-(\lambda_\alpha - \beta) t_0^{(k)}})\right] \quad \text{(19)}
\end{align}


&lt;p&gt;Distribute $e^{-\beta t}$
:&lt;/p&gt;

\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + \frac{\alpha_1}{\beta}(1 - e^{-\beta(t-t_0^{(k)})}) \\
&amp;\quad - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha}(e^{-\lambda_\alpha t} e^{\beta t_0^{(k)}} - e^{-\lambda_\alpha t_0^{(k)}} e^{\beta t_0^{(k)}}) \quad \text{(20)}
\end{align}


&lt;p&gt;This term $\frac{\alpha_1}{\beta}(1 - e^{-\beta(t-t_0^{(k)})})$
 matches $\frac{\alpha_1}{\beta}(1 - e^{-\beta \tau^{(k)}})$
.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s rewrite the last term using $\tau^{(k)} = t - t_0^{(k)}$
:&lt;/p&gt;

$$ e^{-\lambda_\alpha t} e^{\beta t_0^{(k)}} = e^{-\lambda_\alpha (t_0^{(k)} + \tau^{(k)})} e^{\beta t_0^{(k)}} = e^{-\lambda_\alpha \tau^{(k)}} e^{-(\lambda_\alpha - \beta) t_0^{(k)}} \quad \text{(21)} $$



$$ e^{-\lambda_\alpha t_0^{(k)}} e^{\beta t_0^{(k)}} = e^{-(\lambda_\alpha - \beta) t_0^{(k)}} \quad \text{(22)} $$


&lt;p&gt;So the last term in the parenthesis becomes:&lt;/p&gt;

$$ (e^{-\lambda_\alpha t} e^{\beta t_0^{(k)}} - e^{-(\lambda_\alpha - \beta) t_0^{(k)}}) = e^{-(\lambda_\alpha - \beta) t_0^{(k)}}(e^{-\lambda_\alpha \tau^{(k)}} - 1) \quad \text{(23)} $$


&lt;p&gt;Let&amp;rsquo;s transform the variables systematically. Using $t&#39; = t_0^{(k)} + \tau&#39;$
, then $dt&#39; = d\tau&#39;$
.&lt;/p&gt;

$$ \int_0^{\tau^{(k)}} \alpha^{(k)}(t_0^{(k)} + \tau&#39;) e^{\beta(t_0^{(k)} + \tau&#39;)} d\tau&#39; \quad \text{(24)} $$



\begin{align}
&amp;= \int_0^{\tau^{(k)}} (\alpha_1 - (\alpha_1 - \alpha_0) e^{-\lambda_\alpha (t_0^{(k)} + \tau&#39;)}) e^{\beta(t_0^{(k)} + \tau&#39;)} d\tau&#39; \\
&amp;= \alpha_1 e^{\beta t_0^{(k)}} \int_0^{\tau^{(k)}} e^{\beta \tau&#39;} d\tau&#39; - (\alpha_1 - \alpha_0) e^{-\lambda_\alpha t_0^{(k)}} e^{\beta t_0^{(k)}} \int_0^{\tau^{(k)}} e^{-(\lambda_\alpha - \beta) \tau&#39;} d\tau&#39; \quad \text{(25)}
\end{align}


&lt;p&gt;&lt;strong&gt;Integral 1 (in $\tau&#39;$
):&lt;/strong&gt;

$$ \alpha_1 e^{\beta t_0^{(k)}} \left[\frac{1}{\beta} e^{\beta \tau&#39;}\right]_0^{\tau^{(k)}} = \frac{\alpha_1}{\beta} e^{\beta t_0^{(k)}} (e^{\beta \tau^{(k)}} - 1) \quad \text{(26)} $$

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integral 2 (in $\tau&#39;$
):&lt;/strong&gt;

\begin{align}
&amp;(\alpha_1 - \alpha_0) e^{-(\lambda_\alpha - \beta) t_0^{(k)}} \left[\frac{1}{-(\lambda_\alpha - \beta)} e^{-(\lambda_\alpha - \beta) \tau&#39;}\right]_0^{\tau^{(k)}} \\
&amp;= \frac{-(\alpha_1 - \alpha_0)}{\lambda_\alpha - \beta} e^{-(\lambda_\alpha - \beta) t_0^{(k)}} (e^{-(\lambda_\alpha - \beta) \tau^{(k)}} - 1) \\
&amp;= \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-(\lambda_\alpha - \beta) t_0^{(k)}} (e^{-(\lambda_\alpha - \beta) \tau^{(k)}} - 1) \quad \text{(27)}
\end{align}

&lt;/p&gt;
&lt;p&gt;Substitute these back into the $u(t)$
 equation:&lt;/p&gt;

\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + e^{-\beta t} \left[\frac{\alpha_1}{\beta} e^{\beta t_0^{(k)}} (e^{\beta \tau^{(k)}} - 1) \right. \\
&amp;\quad \left. - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-(\lambda_\alpha - \beta) t_0^{(k)}} (e^{-(\lambda_\alpha - \beta) \tau^{(k)}} - 1)\right] \quad \text{(28)}
\end{align}


&lt;p&gt;Distribute $e^{-\beta t}$
:&lt;/p&gt;

\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + \frac{\alpha_1}{\beta} e^{-\beta(t-t_0^{(k)})} (e^{\beta \tau^{(k)}} - 1) \\
&amp;\quad - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\beta t} e^{-(\lambda_\alpha - \beta) t_0^{(k)}} (e^{-(\lambda_\alpha - \beta) \tau^{(k)}} - 1) \quad \text{(29)}
\end{align}



\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + \frac{\alpha_1}{\beta} e^{-\beta \tau^{(k)}} (e^{\beta \tau^{(k)}} - 1) \\
&amp;\quad - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\beta(t_0^{(k)} + \tau^{(k)})} e^{-(\lambda_\alpha - \beta) t_0^{(k)}} (e^{-(\lambda_\alpha - \beta) \tau^{(k)}} - 1) \quad \text{(30)}
\end{align}



\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + \frac{\alpha_1}{\beta} (1 - e^{-\beta \tau^{(k)}}) \\
&amp;\quad - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\beta \tau^{(k)}} e^{-\lambda_\alpha t_0^{(k)}} (e^{-(\lambda_\alpha - \beta) \tau^{(k)}} - 1) \quad \text{(31)}
\end{align}



\begin{align}
u(t) &amp;= u_0^{(k)} e^{-\beta \tau^{(k)}} + \frac{\alpha_1}{\beta} (1 - e^{-\beta \tau^{(k)}}) \\
&amp;\quad - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} (e^{-\lambda_\alpha \tau^{(k)}} - e^{-\beta \tau^{(k)}}) \quad \text{(32)}
\end{align}


&lt;p&gt;This matches the final form of the unspliced RNA equation.&lt;/p&gt;
&lt;h2 id=&#34;derivation-of-equation-33-for-st&#34;&gt;Derivation of Equation (33) for s(t)&lt;/h2&gt;
&lt;p&gt;The differential equation for spliced RNA is:&lt;/p&gt;

$$ \frac{ds}{dt} = \beta u - \gamma s \Rightarrow \frac{ds}{dt} + \gamma s = \beta u(t) \quad \text{(33)} $$


&lt;p&gt;This is again a first-order linear ODE. The integrating factor is $e^{\gamma t}$
.&lt;/p&gt;

$$ \frac{d}{dt}(e^{\gamma t} s) = \beta u(t) e^{\gamma t} \quad \text{(34)} $$


&lt;p&gt;Integrate from $t_0^{(k)}$
 to $t$
:&lt;/p&gt;

$$ e^{\gamma t} s(t) - e^{\gamma t_0^{(k)}} s_0^{(k)} = \int_{t_0^{(k)}}^t \beta u(t&#39;) e^{\gamma t&#39;} dt&#39; \quad \text{(35)} $$



$$ s(t) = s_0^{(k)} e^{-\gamma(t-t_0^{(k)})} + e^{-\gamma t} \int_{t_0^{(k)}}^t \beta u(t&#39;) e^{\gamma t&#39;} dt&#39; \quad \text{(36)} $$



$$ s(t) = s_0^{(k)} e^{-\gamma \tau^{(k)}} + \beta e^{-\gamma t} \int_{t_0^{(k)}}^t u(t&#39;) e^{\gamma t&#39;} dt&#39; \quad \text{(37)} $$


&lt;p&gt;Now substitute the derived expression for $u(t&#39;)$
 from Eq (32), replacing $t$
 with $t&#39;$
 and $\tau^{(k)}$
 with $\tau&#39; = t&#39; - t_0^{(k)}$
:&lt;/p&gt;

\begin{align}
u(t&#39;) &amp;= u_0^{(k)} e^{-\beta \tau&#39;} + \frac{\alpha_1}{\beta} (1 - e^{-\beta \tau&#39;}) \\
&amp;\quad - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} (e^{-\lambda_\alpha \tau&#39;} - e^{-\beta \tau&#39;}) \quad \text{(38)}
\end{align}


&lt;p&gt;The integral $\int_{t_0^{(k)}}^t u(t&#39;) e^{\gamma t&#39;} dt&#39;$
 becomes (using $t&#39; = t_0^{(k)} + \tau&#39;$
):&lt;/p&gt;

$$ \int_0^{\tau^{(k)}} u(t_0^{(k)} + \tau&#39;) e^{\gamma(t_0^{(k)} + \tau&#39;)} d\tau&#39; \quad \text{(39)} $$



\begin{align}
&amp;= e^{\gamma t_0^{(k)}} \int_0^{\tau^{(k)}} \left[u_0^{(k)} e^{-\beta \tau&#39;} + \frac{\alpha_1}{\beta} (1 - e^{-\beta \tau&#39;}) \right. \\
&amp;\quad \left. - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} (e^{-\lambda_\alpha \tau&#39;} - e^{-\beta \tau&#39;})\right] e^{\gamma \tau&#39;} d\tau&#39; \quad \text{(40)}
\end{align}


&lt;p&gt;This integral can be split into three parts:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt;

$$ \int_0^{\tau^{(k)}} u_0^{(k)} e^{-\beta \tau&#39;} e^{\gamma \tau&#39;} d\tau&#39; = u_0^{(k)} \int_0^{\tau^{(k)}} e^{(\gamma - \beta) \tau&#39;} d\tau&#39; \quad \text{(41)} $$

&lt;/p&gt;

$$ = u_0^{(k)} \left[\frac{1}{\gamma - \beta} e^{(\gamma - \beta) \tau&#39;}\right]_0^{\tau^{(k)}} = \frac{u_0^{(k)}}{\gamma - \beta} (e^{(\gamma - \beta) \tau^{(k)}} - 1) \quad \text{(42)} $$


&lt;p&gt;&lt;strong&gt;Part 2:&lt;/strong&gt;

$$ \int_0^{\tau^{(k)}} \frac{\alpha_1}{\beta} (1 - e^{-\beta \tau&#39;}) e^{\gamma \tau&#39;} d\tau&#39; \quad \text{(43)} $$

&lt;/p&gt;

$$ = \frac{\alpha_1}{\beta} \left[\int_0^{\tau^{(k)}} e^{\gamma \tau&#39;} d\tau&#39; - \int_0^{\tau^{(k)}} e^{(\gamma - \beta) \tau&#39;} d\tau&#39;\right] \quad \text{(44)} $$



$$ = \frac{\alpha_1}{\beta} \left[\frac{1}{\gamma} (e^{\gamma \tau^{(k)}} - 1) - \frac{1}{\gamma - \beta} (e^{(\gamma - \beta) \tau^{(k)}} - 1)\right] \quad \text{(45)} $$


&lt;p&gt;&lt;strong&gt;Part 3:&lt;/strong&gt;

$$ -\int_0^{\tau^{(k)}} \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} (e^{-\lambda_\alpha \tau&#39;} - e^{-\beta \tau&#39;}) e^{\gamma \tau&#39;} d\tau&#39; \quad \text{(46)} $$

&lt;/p&gt;

\begin{align}
&amp;= -\frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} \left[\int_0^{\tau^{(k)}} e^{(\gamma - \lambda_\alpha) \tau&#39;} d\tau&#39; - \int_0^{\tau^{(k)}} e^{(\gamma - \beta) \tau&#39;} d\tau&#39;\right] \quad \text{(47)}
\end{align}



\begin{align}
&amp;= -\frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} \left[\frac{1}{\gamma - \lambda_\alpha} (e^{(\gamma - \lambda_\alpha) \tau^{(k)}} - 1) \right. \\
&amp;\quad \left. - \frac{1}{\gamma - \beta} (e^{(\gamma - \beta) \tau^{(k)}} - 1)\right] \quad \text{(48)}
\end{align}


&lt;p&gt;Now, substitute these three parts back into the integral for $s(t)$
, and multiply by $\beta e^{-\gamma t} e^{\gamma t_0^{(k)}} = \beta e^{-\gamma \tau^{(k)}}$
:&lt;/p&gt;
&lt;p&gt;The expression for $s(t)$
 becomes:&lt;/p&gt;

$$ s(t) = s_0^{(k)} e^{-\gamma \tau^{(k)}} + \beta e^{-\gamma \tau^{(k)}} \cdot [\text{Part 1} + \text{Part 2} + \text{Part 3}] \quad \text{(49)} $$


&lt;p&gt;Let&amp;rsquo;s expand the terms and simplify to match the final form:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initial condition term:&lt;/strong&gt; $s_0^{(k)} e^{-\gamma \tau^{(k)}}$
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Term from Part 1 ($u_0^{(k)}$
 part):&lt;/strong&gt;

$$ \beta e^{-\gamma \tau^{(k)}} \cdot \frac{u_0^{(k)}}{\gamma - \beta} (e^{(\gamma - \beta) \tau^{(k)}} - 1) \quad \text{(50)} $$

&lt;/p&gt;

$$ = \frac{\beta u_0^{(k)}}{\gamma - \beta} (e^{-\beta \tau^{(k)}} - e^{-\gamma \tau^{(k)}}) \quad \text{(51)} $$


&lt;p&gt;This matches the third term with a sign flip on $e^{-\gamma \tau^{(k)}} - e^{-\beta \tau^{(k)}}$
 and factor $\frac{\beta u_0^{(k)}}{\gamma - \beta}$
.
It&amp;rsquo;s $\frac{\beta u_0^{(k)}}{\beta - \gamma} (e^{-\gamma \tau^{(k)}} - e^{-\beta \tau^{(k)}})$
. This matches (re-arranging the denominator).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Term from Part 2 (Œ±‚ÇÅ part):&lt;/strong&gt;&lt;/p&gt;
 
$$ \beta e^{-\gamma\tau^{(k)}} \cdot \frac{\beta}{\alpha_1} \left[ \frac{1}{\gamma}(e^{\gamma\tau^{(k)}} - 1) - \frac{1}{\gamma-\beta}(e^{(\gamma-\beta)\tau^{(k)}} - 1) \right] \quad (1)$$


&lt;p&gt;This simplifies to:&lt;/p&gt;
 
$$ = \alpha_1 \left[ \frac{1}{\gamma}(1 - e^{-\gamma\tau^{(k)}}) - \frac{1}{\gamma-\beta}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \right] \quad (2)$$


 
$$ = \frac{\alpha_1}{\gamma}(1 - e^{-\gamma\tau^{(k)}}) + \frac{\alpha_1}{\beta-\gamma}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (3)$$


&lt;p&gt;Let&amp;rsquo;s look at the second term in Eq (37):  $\frac{\alpha_1}{\gamma}(1 - e^{-\gamma\tau^{(k)}})$ 
. This matches.&lt;/p&gt;
&lt;p&gt;The Œ±‚ÇÅ term also contributes to other parts implicitly. The full expression for constant Œ± is:&lt;/p&gt;
 
$$ s(t) = s_0^{(k)} e^{-\gamma\tau^{(k)}} + \frac{\beta u_0^{(k)}}{\beta-\gamma}(e^{-\gamma\tau^{(k)}} - e^{-\beta\tau^{(k)}}) + \frac{\alpha}{\gamma}(1 - e^{-\gamma\tau^{(k)}}) + \frac{\alpha\beta}{(\beta-\gamma)\gamma}(e^{-\gamma\tau^{(k)}} - e^{-\beta\tau^{(k)}}) \quad (4)$$


&lt;p&gt;So this implies the Œ±‚ÇÅ terms must combine.&lt;/p&gt;
&lt;h3 id=&#34;overall-structure-analysis&#34;&gt;Overall Structure Analysis&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at the overall structure for s(t):&lt;/p&gt;
 
$$ s(t) = s_0^{(k)} e^{-\gamma\tau^{(k)}} + \frac{\beta u_0^{(k)}}{\gamma-\beta}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) + \frac{\alpha_1}{\gamma}(1 - e^{-\gamma\tau^{(k)}}) \quad (5)$$


&lt;p&gt;(This is the solution for constant Œ±‚ÇÅ)&lt;/p&gt;
&lt;p&gt;The remaining terms must come from Part 3 and the Œ±‚ÇÅ part that was separated.&lt;/p&gt;
&lt;h3 id=&#34;general-solution-approach&#34;&gt;General Solution Approach&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s try to express it directly based on the expected form of solutions for such ODEs:&lt;/p&gt;
&lt;p&gt;A general solution for  $\frac{ds}{dt} + \gamma s = F(t)$ 
 is:&lt;/p&gt;
 
$$ s(t) = s_0 e^{-\gamma(t-t_0)} + \int_{t_0}^{t} e^{-\gamma(t-t&#39;)} F(t&#39;) dt&#39; \quad (6)$$


&lt;p&gt;Here  $F(t) = \beta u(t)$ 
. So we have:&lt;/p&gt;
 
$$ s(t) = s_0^{(k)} e^{-\gamma\tau^{(k)}} + \beta \int_{t_0^{(k)}}^{t} e^{-\gamma(t-t&#39;)} u(t&#39;) dt&#39; \quad (7)$$


&lt;p&gt;Now substitute  $u(t&#39;)$ 
:&lt;/p&gt;
 
$$ u(t&#39;) = u_0^{(k)} e^{-\beta(t&#39; - t_0^{(k)})} + \frac{\alpha_1}{\beta}(1 - e^{-\beta(t&#39; - t_0^{(k)})}) - \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\lambda_\alpha(t&#39; - t_0^{(k)})} - e^{-\beta(t&#39; - t_0^{(k)})}) \quad (8)$$


&lt;p&gt;This leads to a long integral with three main terms.&lt;/p&gt;
&lt;p&gt;Let  $\tau&#39; = t&#39; - t_0^{(k)}$ 
. Then  $t&#39; = t_0^{(k)} + \tau&#39;$ 
.&lt;/p&gt;
 
$$ \beta \int_0^{\tau^{(k)}} e^{-\gamma(\tau^{(k)} - \tau&#39;)} u(t_0^{(k)} + \tau&#39;) d\tau&#39; = \beta e^{-\gamma\tau^{(k)}} \int_0^{\tau^{(k)}} e^{\gamma\tau&#39;} u(t_0^{(k)} + \tau&#39;) d\tau&#39; \quad (9)$$


&lt;p&gt;This is what we solved previously. Let&amp;rsquo;s re-group the terms to match the final form in Eq (37).&lt;/p&gt;
&lt;h3 id=&#34;term-analysis&#34;&gt;Term Analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Term 1&lt;/strong&gt; (from  $u_0^{(k)}$ 
):&lt;/p&gt;
 
$$ \frac{\beta u_0^{(k)}}{\gamma-\beta}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (10)$$


&lt;p&gt;(Matches third term of Eq 37 when denominator is  $(\gamma-\beta)$ 
).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Term 2&lt;/strong&gt; (from  $\alpha_1$ 
):&lt;/p&gt;
 
$$ \frac{\alpha_1}{\gamma}(1 - e^{-\gamma\tau^{(k)}}) \quad (11)$$


&lt;p&gt;(Matches second term of Eq 37).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Term 3&lt;/strong&gt; (from  $\alpha_1 - \alpha_0$ 
 and  $\lambda_\alpha$ 
 terms): This is the most complex part.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s collect the terms after multiplying by  $\beta e^{-\gamma\tau^{(k)}}$ 
 from Part 3:&lt;/p&gt;
 
$$ \beta e^{-\gamma\tau^{(k)}} \left[- \frac{\alpha_1 - \alpha_0}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} \left( \frac{1}{\gamma - \lambda_\alpha}(e^{(\gamma - \lambda_\alpha)\tau^{(k)}} - 1) - \frac{1}{\gamma - \beta}(e^{(\gamma - \beta)\tau^{(k)}} - 1) \right) \right] \quad (12)$$


 
$$ = -\frac{\beta(\alpha_1 - \alpha_0)}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} \left[ \frac{1}{\gamma - \lambda_\alpha}(e^{-\lambda_\alpha\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) - \frac{1}{\gamma - \beta}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \right] \quad (13)$$


&lt;p&gt;Now, we need to match this with the last two terms of Eq (37):&lt;/p&gt;
 
$$ + \frac{\beta(\alpha_1 - \alpha_0)}{(\beta - \lambda_\alpha)(\gamma - \lambda_\alpha)} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\lambda_\alpha\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (14)$$


 
$$ - \frac{\beta(\alpha_1 - \alpha_0)}{(\beta - \lambda_\alpha)(\gamma - \beta)} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (15)$$


&lt;h3 id=&#34;verification-of-derived-terms&#34;&gt;Verification of Derived Terms&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at our derived terms:&lt;/p&gt;
&lt;p&gt;The first part of our derived term 3:&lt;/p&gt;
 
$$ -\frac{\beta(\alpha_1 - \alpha_0)}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} \frac{1}{\gamma - \lambda_\alpha}(e^{-\lambda_\alpha\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (16)$$


 
$$ = \frac{\beta(\alpha_1 - \alpha_0)(\lambda_\alpha - \gamma)}{(\beta - \lambda_\alpha)} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\lambda_\alpha\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (17)$$


&lt;p&gt;This is exactly the fifth term in Eq (37), if  $(\lambda_\alpha - \gamma)$ 
 is written as  $-(\gamma - \lambda_\alpha)$ 
. ‚úì&lt;/p&gt;
&lt;p&gt;The second part of our derived term 3:&lt;/p&gt;
 
$$ -\frac{\beta(\alpha_1 - \alpha_0)}{\beta - \lambda_\alpha} e^{-\lambda_\alpha t_0^{(k)}} \left(-\frac{1}{\gamma - \beta}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \right) \quad (18)$$


 
$$ = \frac{\beta(\alpha_1 - \alpha_0)(\gamma - \beta)}{(\beta - \lambda_\alpha)} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (19)$$


&lt;p&gt;This is exactly the sixth term in Eq (37). ‚úì&lt;/p&gt;
&lt;h3 id=&#34;summary-of-st-derivation&#34;&gt;Summary of s(t) Derivation&lt;/h3&gt;
&lt;p&gt;The complete solution consists of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial condition term&lt;/strong&gt;:  $s_0^{(k)} e^{-\gamma\tau^{(k)}}$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Term from&lt;/strong&gt;  $u_0^{(k)}$ 
:  $\frac{\beta u_0^{(k)}}{\gamma-\beta}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}})$ 
&lt;/p&gt;
&lt;p&gt;(Note:  $\frac{1}{\gamma-\beta} = -\frac{1}{\beta-\gamma}$ 
, so this matches).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Term from constant&lt;/strong&gt;  $\alpha_1$ 
 &lt;strong&gt;part&lt;/strong&gt;:  $\frac{\alpha_1}{\gamma}(1 - e^{-\gamma\tau^{(k)}})$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Terms from&lt;/strong&gt;  $\alpha_0$ 
 &lt;strong&gt;and&lt;/strong&gt;  $\lambda_\alpha$ 
 &lt;strong&gt;(decaying alpha)&lt;/strong&gt;:&lt;/p&gt;
 
   $$ \frac{\beta(\alpha_1 - \alpha_0)}{(\beta - \lambda_\alpha)(\gamma - \lambda_\alpha)} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\lambda_\alpha\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (20)$$
   

 
   $$ \frac{\beta(\alpha_1 - \alpha_0)}{(\beta - \lambda_\alpha)(\gamma - \beta)} e^{-\lambda_\alpha t_0^{(k)}}(e^{-\beta\tau^{(k)}} - e^{-\gamma\tau^{(k)}}) \quad (21)$$
   

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Combining these terms in order gives &lt;strong&gt;Equation (37)&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_elbo_kl_breakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_elbo_kl_breakdown/</guid>
      <description>&lt;h1 id=&#34;breaking-kl-terms-into-manageable-conditional-pieces&#34;&gt;Breaking KL Terms into Manageable, Conditional Pieces&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;break the KL terms into manageable, conditional pieces&lt;/strong&gt; in the context of your ELBO&amp;ndash;&lt;/p&gt;
&lt;p&gt; $$\mathcal{L}_{\text{elbo}}(\theta, \phi; u, s) = \sum_n - \mathbb{E}_{q_\phi(z_n, \pi_n | u_n, s_n)} [\log p_\theta(u_n, s_n | z_n, \pi_n)]$$ 

 $$+ \text{KL} (q_\phi(z_n | u_n, s_n) \| p(z))$$ 

 $$+ \mathbb{E}_{q_\phi(z_n | u_n, s_n)} \left[\sum_g \text{KL} (q_\phi(\pi_{ng} | z_n) \| p(\pi_{ng}))\right], \tag{26}$$ 
&lt;/p&gt;
&lt;h2 id=&#34;-starting-point-whats-the-kl-term-in-a-basic-elbo&#34;&gt;üîÅ Starting Point: What&amp;rsquo;s the KL term in a basic ELBO?&lt;/h2&gt;
&lt;p&gt;In standard variational inference, we approximate the true posterior  $p(z|x)$ 
 with a simpler distribution  $q(z|x)$ 
. The &lt;strong&gt;Evidence Lower Bound (ELBO)&lt;/strong&gt; becomes:&lt;/p&gt;
 $$ \text{ELBO} = \mathbb{E}_{q(z)}[\log p(x | z)] - \text{KL}(q(z) \| p(z)) $$ 

&lt;p&gt;This KL divergence:
 $$ \text{KL}(q(z) \| p(z)) $$ 
&lt;/p&gt;
&lt;p&gt;measures how far the approximate posterior  $q(z)$ 
 is from the true prior  $p(z)$ 
. That&amp;rsquo;s the &lt;strong&gt;standard, single-latent variable case&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;-now-enter-hierarchical-latents-like-z-œÄ&#34;&gt;üåø Now Enter: Hierarchical Latents (like z, œÄ)&lt;/h2&gt;
&lt;p&gt;In your ELBO, the model has &lt;em&gt;multiple&lt;/em&gt; latent variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $z_n$ 
 (global, per-cell latent)&lt;/li&gt;
&lt;li&gt; $\pi_{ng}$ 
 (local, per-gene latent for each cell)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now have an &lt;strong&gt;approximate joint posterior&lt;/strong&gt;:
 $$ q(z_n, \pi_n | u_n, s_n) $$ 
&lt;/p&gt;
&lt;p&gt;This could be intractable or too complex. So we factor it to &lt;strong&gt;make it more manageable&lt;/strong&gt;:
 $$ q(z_n, \pi_n | u_n, s_n) = q(z_n | u_n, s_n) \prod_g q(\pi_{ng} | z_n) $$ 
&lt;/p&gt;
&lt;p&gt;This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First infer  $z_n$ 
 from data.&lt;/li&gt;
&lt;li&gt;Then, infer each  $\pi_{ng}$ 
 from  $z_n$ 
, &lt;strong&gt;not directly from the full data&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes the math simpler and lets us &lt;strong&gt;break the big KL divergence&lt;/strong&gt;:
 $$ \text{KL}(q(z_n, \pi_n | u_n, s_n) \| p(z_n, \pi_n)) $$ 
&lt;/p&gt;
&lt;p&gt;into &lt;strong&gt;two smaller, manageable pieces&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;KL between  $q(z_n)$ 
 and prior  $p(z_n)$ 
:&lt;/strong&gt;
 $$ \text{KL}(q(z_n | u_n, s_n) \| p(z_n)) $$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;KLs between each gene-level posterior and its prior, conditioned on  $z_n$ 
:&lt;/strong&gt;
 $$ \mathbb{E}_{q(z_n)} \left[ \sum_g \text{KL}(q(\pi_{ng} | z_n) \| p(\pi_{ng})) \right] $$ 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These KL terms are easier to compute, optimize, and interpret.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_elbo_term_with_expectation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_elbo_term_with_expectation/</guid>
      <description>&lt;h1 id=&#34;velovi-elbo-third-term-with-expectation&#34;&gt;VeloVI ELBO Third Term with Expectation&lt;/h1&gt;
&lt;h2 id=&#34;the-expression&#34;&gt;The Expression&lt;/h2&gt;
 $$E_{q_\phi(z_1|u_1,s_1)} \left[ \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1) \| p(\pi_{1g})) \right]$$ 

&lt;p&gt;This is the third term of the ELBO for a single cell n (in your example, n=1), as seen in Equation (26) of the VeloVI model description.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dissect each part:&lt;/p&gt;
&lt;h3 id=&#34;hahahugoshortcode265s1hbhb&#34;&gt; $z_1$ 
&lt;/h3&gt;
&lt;p&gt;This represents the low-dimensional latent variable for Cell 1. It&amp;rsquo;s a vector that summarizes the latent state of Cell 1 (e.g., its overall position in the developmental trajectory or cell cycle).&lt;/p&gt;
&lt;h3 id=&#34;hahahugoshortcode265s2hbhb&#34;&gt; $u_1, s_1$ 
&lt;/h3&gt;
&lt;p&gt;These are the observed unspliced and spliced transcript abundances for Cell 1, across all genes. So,  $u_1$ 
 is a vector  $(u_{1A}, u_{1B}, u_{1C})$ 
 and  $s_1$ 
 is  $(s_{1A}, s_{1B}, s_{1C})$ 
 in your three-gene example.&lt;/p&gt;
&lt;h3 id=&#34;hahahugoshortcode265s7hbhb&#34;&gt; $q_\phi(z_1|u_1,s_1)$ 
&lt;/h3&gt;
&lt;p&gt;This is the approximate posterior distribution over the latent variable  $z_1$ 
, conditioned on the observed data  $(u_1,s_1)$ 
 for Cell 1.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s part of the variational posterior  $q_\phi(z,\pi|u,s)$ 
 (Eq. 22).&lt;/li&gt;
&lt;li&gt;The subscript  $\phi$ 
 indicates that this distribution is parameterized by the neural network parameters  $\phi$ 
. Specifically, an &amp;ldquo;encoder&amp;rdquo; neural network takes  $(u_1,s_1)$ 
 as input and outputs the parameters (e.g., mean and variance if it&amp;rsquo;s a Gaussian) for this distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hahahugoshortcode265s14hbhb&#34;&gt; $E_{q_\phi(z_1|u_1,s_1)}[\ldots]$ 
&lt;/h3&gt;
&lt;p&gt;This denotes an expectation with respect to the distribution  $q_\phi(z_1|u_1,s_1)$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In variational inference, we often can&amp;rsquo;t compute this expectation in closed form.&lt;/li&gt;
&lt;li&gt;Instead, it&amp;rsquo;s typically approximated using Monte Carlo sampling. We sample one or more  $z_1^*$ 
 values from  $q_\phi(z_1|u_1,s_1)$ 
 and then compute the term inside the expectation for each sample, averaging the results.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;reparameterization trick&amp;rdquo; is often used to make this sampling process differentiable, allowing gradients to flow back through the sampling process to update  $\phi$ 
.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hahahugoshortcode265s19hbhb&#34;&gt; $\sum_g$ 
&lt;/h3&gt;
&lt;p&gt;This simply means a summation over all genes g (Gene A, Gene B, Gene C in your example).&lt;/p&gt;
&lt;h3 id=&#34;hahahugoshortcode265s20hbhb&#34;&gt; $\pi_{1g}$ 
&lt;/h3&gt;
&lt;p&gt;This is the probability distribution over the four transcriptional states for gene g in cell 1 (i.e.,  $[\pi_{1g,k=1}, \pi_{1g,k=2}, \pi_{1g,k=3}, \pi_{1g,k=4}]$ 
).&lt;/p&gt;
&lt;h3 id=&#34;hahahugoshortcode265s22hbhb&#34;&gt; $q_\phi(\pi_{1g}|z_1)$ 
&lt;/h3&gt;
&lt;p&gt;This is the approximate posterior distribution over the state assignment probabilities  $\pi_{1g}$ 
, conditioned on the latent variable  $z_1$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is also part of the variational posterior (Eq. 22).&lt;/li&gt;
&lt;li&gt;Another neural network (part of  $\phi$ 
) takes  $z_1$ 
 as input and outputs the parameters (e.g., concentration parameters for a Dirichlet distribution) for this distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hahahugoshortcode265s27hbhb&#34;&gt; $p(\pi_{1g})$ 
&lt;/h3&gt;
&lt;p&gt;This is the prior distribution over the state assignment probabilities  $\pi_{1g}$ 
.&lt;/p&gt;
&lt;p&gt;As specified in Eq. 14, it&amp;rsquo;s a uniform Dirichlet distribution:  $p(\pi_{1g}) = \text{Dirichlet}(0.25, 0.25, 0.25, 0.25)$ 
. This means, a priori, all four states are considered equally likely for any gene in any cell.&lt;/p&gt;
&lt;h3 id=&#34;hahahugoshortcode265s30hbhb&#34;&gt; $\text{KL}(Q \| P)$ 
&lt;/h3&gt;
&lt;p&gt;This is the Kullback-Leibler (KL) divergence between two probability distributions Q and P. It&amp;rsquo;s a measure of how one probability distribution Q diverges from a second, expected probability distribution P.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\text{KL}(Q \| P) \geq 0$ 
. It is 0 if and only if  $Q = P$ 
.&lt;/li&gt;
&lt;li&gt;In this context, it measures how much our inferred posterior  $q_\phi(\pi_{1g}|z_1)$ 
 deviates from the prior  $p(\pi_{1g})$ 
.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;The term  $E_{q_\phi(z_1|u_1,s_1)} \left[ \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1) \| p(\pi_{1g})) \right]$ 
 represents the expected sum of KL divergences between the approximate posterior distribution over state assignments ( $\pi_{1g}$ 
) and its prior, where the expectation is taken over the approximate posterior distribution of the cell&amp;rsquo;s latent variable ( $z_1$ 
).&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;understanding-expectations-in-variational-inference&#34;&gt;Understanding Expectations in Variational Inference&lt;/h1&gt;
&lt;p&gt;The phrase &amp;ldquo;expectation with respect to the distribution  $q_\phi(z_1|u_1,s_1)$ 
&amp;rdquo; refers to the average value of a function or random variable, where the averaging is performed according to the probabilities defined by the distribution  $q_\phi(z_1|u_1,s_1)$ 
.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break it down in the context of VeloVI:&lt;/p&gt;
&lt;h2 id=&#34;hahahugoshortcode265s40hbhb&#34;&gt; $q_\phi(z_1|u_1,s_1)$ 
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This is the approximate posterior distribution of the latent variable  $z_1$ 
 (for Cell 1), given the observed unspliced ( $u_1$ 
) and spliced ( $s_1$ 
) expression data for that cell.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s an &amp;ldquo;approximate&amp;rdquo; posterior because, in variational inference, we cannot directly calculate the true posterior  $p(z_1|u_1,s_1)$ 
. Instead, we use a simpler, parameterized distribution (in this case, often a Gaussian) to approximate it.&lt;/li&gt;
&lt;li&gt;The subscript  $\phi$ 
 indicates that the parameters of this distribution (e.g., its mean and variance if it&amp;rsquo;s a Gaussian) are determined by a neural network (an &amp;ldquo;encoder&amp;rdquo;) that takes the observed data  $(u_1,s_1)$ 
 as input.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;expectation-e&#34;&gt;Expectation (E)&lt;/h2&gt;
&lt;p&gt;In probability theory, the expectation of a random variable X with respect to a probability density function  $f(x)$ 
 is denoted  $E_{f(x)}[X]$ 
 or  $E[X]$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For a continuous random variable X with PDF  $f(x)$ 
, the expectation of a function  $h(X)$ 
 is calculated as an integral:&lt;/li&gt;
&lt;/ul&gt;
 $$E_{f(x)}[h(X)] = \int h(x)f(x)dx$$ 

&lt;ul&gt;
&lt;li&gt;For a discrete random variable X with PMF  $P(x)$ 
, it&amp;rsquo;s a sum:&lt;/li&gt;
&lt;/ul&gt;
 $$E_{P(x)}[h(X)] = \sum_x h(x)P(x)$$ 

&lt;h2 id=&#34;what-is-being-averaged&#34;&gt;What is being averaged?&lt;/h2&gt;
&lt;p&gt;In the ELBO term you referenced,  $E_{q_\phi(z_1|u_1,s_1)} \left[ \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1) \| p(\pi_{1g})) \right]$ 
, the function being averaged is  $\left[ \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1) \| p(\pi_{1g})) \right]$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notice that this function depends on  $z_1$ 
. The KL divergence calculation for  $\pi_{1g}$ 
 requires  $z_1$ 
 as an input to  $q_\phi(\pi_{1g}|z_1)$ 
.&lt;/li&gt;
&lt;li&gt;Since  $z_1$ 
 itself is a random variable drawn from  $q_\phi(z_1|u_1,s_1)$ 
, the entire expression  $\left[ \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1) \| p(\pi_{1g})) \right]$ 
 is also a random variable whose value depends on the specific  $z_1$ 
 sampled. The expectation averages this quantity over all possible  $z_1$ 
 values, weighted by their probabilities according to  $q_\phi(z_1|u_1,s_1)$ 
.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-is-it-necessary&#34;&gt;Why is it necessary?&lt;/h2&gt;
&lt;p&gt;The ELBO is defined as an expectation because the true posterior distribution (which is what we ideally want to work with) is intractable. By taking an expectation with respect to the approximate posterior, we are essentially trying to make our approximation  $q_\phi$ 
 as close as possible to the true posterior, on average, across all possible values of  $z_1$ 
 that are deemed probable by  $q_\phi$ 
.&lt;/p&gt;
&lt;h2 id=&#34;how-is-it-calculated-in-practice-monte-carlo-approximation&#34;&gt;How is it calculated in practice (Monte Carlo Approximation)&lt;/h2&gt;
&lt;p&gt;Since the integral (for continuous  $z_1$ 
) is usually intractable, this expectation is approximated using Monte Carlo sampling. The process is as follows:&lt;/p&gt;
&lt;h3 id=&#34;1-sample-from-hahahugoshortcode265s71hbhb&#34;&gt;1. Sample from  $q_\phi(z_1|u_1,s_1)$ 
&lt;/h3&gt;
&lt;p&gt;Draw one or more samples, say  $z_1^{(m)}$ 
 for  $m=1,\ldots,M$ 
, from the approximate posterior distribution  $q_\phi(z_1|u_1,s_1)$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If  $q_\phi(z_1|u_1,s_1)$ 
 is a Gaussian, you sample from a Gaussian.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;reparameterization trick&amp;rdquo; is often used here. Instead of sampling directly, you sample from a simple base distribution (e.g., standard normal) and then transform this sample using the mean and variance produced by the neural network, making the sampling process differentiable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-evaluate-the-function-for-each-sample&#34;&gt;2. Evaluate the function for each sample&lt;/h3&gt;
&lt;p&gt;For each sampled  $z_1^{(m)}$ 
, calculate the value of the function:&lt;/p&gt;
 $$h(z_1^{(m)}) = \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1^{(m)}) \| p(\pi_{1g}))$$ 

&lt;h3 id=&#34;3-average-the-results&#34;&gt;3. Average the results&lt;/h3&gt;
&lt;p&gt;The expectation is then approximated by the average of these function evaluations:&lt;/p&gt;
 $$E_{q_\phi(z_1|u_1,s_1)} \left[ \sum_g \text{KL}(q_\phi(\pi_{1g}|z_1) \| p(\pi_{1g})) \right] \approx \frac{1}{M} \sum_{m=1}^M h(z_1^{(m)})$$ 

&lt;p&gt;In VeloVI, typically  $M=1$ 
 (a single sample per element of the mini-batch) is used for efficiency in deep learning models, particularly during training. While this introduces more variance into the gradient estimates, it&amp;rsquo;s often sufficient for practical optimization.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;why-simple-averaging-works-in-monte-carlo&#34;&gt;Why Simple Averaging Works in Monte Carlo&lt;/h1&gt;
&lt;p&gt;The expression  $\frac{1}{M} \sum_{m=1}^M h(z_1^{(m)})$ 
 does not explicitly show a &amp;ldquo;weighting by their probabilities according to  $q_\phi(z_1|u_1,s_1)$ 
&amp;rdquo; in the way one might typically see in a discrete weighted average (e.g.,  $\sum x_i P(X=x_i)$ 
).&lt;/p&gt;
&lt;p&gt;However, this simple average is the correct Monte Carlo approximation for an expectation when the samples  $z_1^{(m)}$ 
 are drawn directly from the distribution  $q_\phi(z_1|u_1,s_1)$ 
.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s clarify why this is the case:&lt;/p&gt;
&lt;h2 id=&#34;the-definition-of-expectation&#34;&gt;The Definition of Expectation&lt;/h2&gt;
&lt;p&gt;For a function  $h(z)$ 
 and a probability distribution  $q(z)$ 
, the expectation  $E_{q(z)}[h(z)]$ 
 is defined as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For continuous z&lt;/strong&gt;:  $\int h(z)q(z)dz$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;For discrete z&lt;/strong&gt;:  $\sum_z h(z)q(z)$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;monte-carlo-approximation-simple-sampling&#34;&gt;Monte Carlo Approximation (Simple Sampling)&lt;/h2&gt;
&lt;p&gt;The fundamental idea of Monte Carlo approximation for an expectation is based on the Law of Large Numbers. If you draw M independent and identically distributed (i.i.d.) samples  $z^{(1)}, z^{(2)}, \ldots, z^{(M)}$ 
 from the distribution  $q(z)$ 
, then the sample mean of the function values  $h(z^{(m)})$ 
 will converge to the true expectation as  $M \to \infty$ 
:&lt;/p&gt;
 $$E_{q(z)}[h(z)] \approx \frac{1}{M} \sum_{m=1}^M h(z^{(m)})$$ 

&lt;h2 id=&#34;why-this-works-implicit-weighting&#34;&gt;Why this works (implicit weighting)&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;weighting&amp;rdquo; is implicitly handled by the sampling process itself. When you draw samples  $z^{(m)}$ 
 directly from  $q_\phi(z_1|u_1,s_1)$ 
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values of  $z_1$ 
 that have a higher probability (higher density) under  $q_\phi$ 
 will naturally be sampled more frequently.&lt;/li&gt;
&lt;li&gt;Values of  $z_1$ 
 that have a lower probability (lower density) under  $q_\phi$ 
 will be sampled less frequently.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, when you take the simple average of {{&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_expected_state_n_latent_time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_expected_state_n_latent_time/</guid>
      <description>&lt;h1 id=&#34;expected-value-of-kinetic-state-probability-vector&#34;&gt;Expected Value of Kinetic State Probability Vector&lt;/h1&gt;
&lt;p&gt;This document explains how to calculate the expected value of the kinetic state probability vector $\pi_{ng}$
, where this expectation is taken twice: first conditional on a latent variable $z_n$
, and then averaged over the possible values of $z_n$
 for a given cell.&lt;/p&gt;
&lt;p&gt;The main expression we&amp;rsquo;re evaluating is:&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(z_n|u_n,s_n)} \left[ \mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [\pi_{ng}] \right] \tag{1}
$$


&lt;p&gt;This represents VeloVI&amp;rsquo;s average belief about the kinetic state probabilities ($\pi_{ng}$
) for gene $g$
 in cell $n$
, considering all possible latent representations ($z_n$
) that could explain the observed data ($u_n, s_n$
).&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-components&#34;&gt;Understanding the Components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$\pi_{ng}$
&lt;/strong&gt;: The vector of probabilities for the 4 kinetic states: $(\pi_{ng,1}, \pi_{ng,2}, \pi_{ng,3}, \pi_{ng,4})$
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$q_\phi(\pi_{ng}|z_n)$
&lt;/strong&gt;: The approximate posterior distribution for $\pi_{ng}$
 given a specific latent variable $z_n$
. This is a Dirichlet distribution with concentration parameters $\alpha_{q,ng}(z_n) = (\alpha_{q,ng,1}(z_n), \ldots, \alpha_{q,ng,K}(z_n))$
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$q_\phi(z_n|u_n,s_n)$
&lt;/strong&gt;: The approximate posterior distribution for the latent variable $z_n$
 given the observed counts. This is a Gaussian distribution $\mathcal{N}(\mu_{z_n}, \Sigma_{z_n})$
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-calculate-the-inner-expectation&#34;&gt;Step 1: Calculate the Inner Expectation&lt;/h2&gt;
&lt;p&gt;The inner expectation $\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [\pi_{ng}]$
 is the expected value of a Dirichlet-distributed random variable.&lt;/p&gt;
&lt;p&gt;If $\pi_{ng} \sim \text{Dirichlet}(\alpha_{q,ng,1}(z_n), \ldots, \alpha_{q,ng,K}(z_n))$
, then the expected value of its $i$
-th component is:&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [\pi_{ng,i}] = \frac{\alpha_{q,ng,i}(z_n)}{\sum_{j=1}^K \alpha_{q,ng,j}(z_n)} \tag{2}
$$


&lt;p&gt;The result of the inner expectation is a vector of expected probabilities:&lt;/p&gt;

$$
\bar{\pi}_{ng}(z_n) = \left( \frac{\alpha_{q,ng,1}(z_n)}{\sum_j \alpha_{q,ng,j}(z_n)}, \ldots, \frac{\alpha_{q,ng,K}(z_n)}{\sum_j \alpha_{q,ng,j}(z_n)} \right) \tag{3}
$$


&lt;h3 id=&#34;numeric-example-for-cell-1-gene-a&#34;&gt;Numeric Example for Cell 1, Gene A&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s assume we sample $z_1^* = (0.6558, -0.3779)$
.&lt;/p&gt;
&lt;p&gt;The encoder outputs Dirichlet concentration parameters for Gene A:
$\alpha_{q,1A}(z_1^*) = (5.0, 0.1, 0.2, 0.1)$
&lt;/p&gt;
&lt;p&gt;Calculate the expected $\pi_{1A}$
 for this $z_1^*$
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sum of concentrations: $5.0 + 0.1 + 0.2 + 0.1 = 5.4$
&lt;/li&gt;
&lt;li&gt;$\mathbb{E}[\pi_{1A,1}|z_1^*] = 5.0/5.4 \approx 0.9259$
&lt;/li&gt;
&lt;li&gt;$\mathbb{E}[\pi_{1A,2}|z_1^*] = 0.1/5.4 \approx 0.0185$
&lt;/li&gt;
&lt;li&gt;$\mathbb{E}[\pi_{1A,3}|z_1^*] = 0.2/5.4 \approx 0.0370$
&lt;/li&gt;
&lt;li&gt;$\mathbb{E}[\pi_{1A,4}|z_1^*] = 0.1/5.4 \approx 0.0185$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So $\bar{\pi}_{1A}(z_1^*) = (0.9259, 0.0185, 0.0370, 0.0185)$
.&lt;/p&gt;
&lt;h2 id=&#34;step-2-calculate-the-outer-expectation&#34;&gt;Step 2: Calculate the Outer Expectation&lt;/h2&gt;
&lt;p&gt;Now we need to average $\bar{\pi}_{ng}(z_n)$
 over the distribution $q_\phi(z_n|u_n,s_n) = \mathcal{N}(\mu_{z_n}, \Sigma_{z_n})$
. Since $\bar{\pi}_{ng}(z_n)$
 involves a neural network mapping, this expectation is intractable and we use Monte Carlo approximation.&lt;/p&gt;
&lt;h3 id=&#34;monte-carlo-approximation&#34;&gt;Monte Carlo Approximation&lt;/h3&gt;
&lt;p&gt;For each sample $m \in \{1, \ldots, M\}$
:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Draw random noise: $\epsilon_z^{(m)} \sim \mathcal{N}(0, I_d)$
&lt;/li&gt;
&lt;li&gt;Calculate sample: $z_n^{*(m)} = \mu_{z_n} + \sqrt{\Sigma_{z_n}} \odot \epsilon_z^{(m)}$
 (reparameterization trick)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;numeric-example-continued&#34;&gt;Numeric Example Continued&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Known parameters for Cell 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mu_{z_1} = (0.5, -0.3)$
&lt;/li&gt;
&lt;li&gt;$\log\Sigma_{z_1} = (-0.5, -0.5) \rightarrow \Sigma_{z_1} = \text{diag}(0.6065, 0.6065)$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sample 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\epsilon_z^{(1)} = (0.2, -0.1)$
&lt;/li&gt;
&lt;li&gt;$z_1^{*(1)} = (0.5, -0.3) + (0.7788, 0.7788) \odot (0.2, -0.1) = (0.6558, -0.3779)$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sample 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\epsilon_z^{(2)} = (-0.5, 0.3)$
&lt;/li&gt;
&lt;li&gt;$z_1^{*(2)} = (0.5, -0.3) + (0.7788, 0.7788) \odot (-0.5, 0.3) = (0.1106, -0.0663)$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For $z_1^{*(2)}$
, assume encoder outputs $\alpha_{q,1A}(z_1^{*(2)}) = (4.0, 0.3, 0.1, 0.1)$
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sum of concentrations: $4.0 + 0.3 + 0.1 + 0.1 = 4.5$
&lt;/li&gt;
&lt;li&gt;$\bar{\pi}_{1A}^{(2)} \approx (0.8889, 0.0667, 0.0222, 0.0222)$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Final average (with M=2):&lt;/strong&gt;&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(z_n|u_n,s_n)} [\bar{\pi}_{ng}(z_n)] \approx \frac{1}{M} \sum_{m=1}^M \bar{\pi}_{ng}^{(m)} \tag{4}
$$


&lt;ul&gt;
&lt;li&gt;Component 1: $(0.9259 + 0.8889)/2 = 0.9074$
&lt;/li&gt;
&lt;li&gt;Component 2: $(0.0185 + 0.0667)/2 = 0.0426$
&lt;/li&gt;
&lt;li&gt;Component 3: $(0.0370 + 0.0222)/2 = 0.0296$
&lt;/li&gt;
&lt;li&gt;Component 4: $(0.0185 + 0.0222)/2 = 0.0204$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Final result:&lt;/strong&gt; $\approx (0.9074, 0.0426, 0.0296, 0.0204)$
&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;expected-latent-time-calculation&#34;&gt;Expected Latent Time Calculation&lt;/h1&gt;
&lt;p&gt;Now we calculate the average latent time $t_{ng}$
 for gene $g$
 in cell $n$
, accounting for uncertainty in both the cell&amp;rsquo;s latent representation and the kinetic state.&lt;/p&gt;
&lt;p&gt;The expression is:&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(z_n|u_n,s_n)} \left[ \mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [t^{(k_{ng})}_{ng}] \right] \tag{5}
$$


&lt;p&gt;where $t^{(k_{ng})}_{ng}$
 represents the latent time for gene $g$
 in cell $n$
 if it&amp;rsquo;s in kinetic state $k_{ng}$
.&lt;/p&gt;
&lt;h2 id=&#34;derive-the-inner-expectation-for-time&#34;&gt;Derive the Inner Expectation for Time&lt;/h2&gt;
&lt;p&gt;The inner expectation over kinetic states is:&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [t^{(k_{ng})}_{ng}] = \sum_{k=1}^K P(k_{ng} = k | z_n) \cdot t_{ng}^{(k)}(z_n) \tag{6}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P(k_{ng} = k | z_n) = \frac{\alpha_{q,ng,k}(z_n)}{\sum_{j=1}^K \alpha_{q,ng,j}(z_n)}$
&lt;/li&gt;
&lt;li&gt;$t_{ng}^{(k)}(z_n) = \rho_{ng}^{(k)}(z_n) \times t_g^s$
 (decoder output times switching time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our expression $\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [t^{(k_{ng})}_{ng}]$
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The random variable:&lt;/strong&gt; The random variable is $t^{(k_{ng})}_{ng}$
. This variable&amp;rsquo;s value &lt;em&gt;depends&lt;/em&gt; on the discrete kinetic state $k_{ng}$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Possible Values of the Random Variable&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The kinetic state $k_{ng}$
 can take on $K$
 discrete values (1, 2, 3, 4 for VeloVI&amp;rsquo;s four states).&lt;/li&gt;
&lt;li&gt;For each specific state $k$
, the corresponding value of our random variable is $t_{ng}^{(k)}(z_n)$
.&lt;/li&gt;
&lt;li&gt;This notation $t_{ng}^{(k)}(z_n)$
 explicitly shows that the latent time is specific to state $k$
 and is determined by $z_n$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Probability Distribution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expectation is taken with respect to $q_\phi(\pi_{ng}|z_n)$
.&lt;/li&gt;
&lt;li&gt;This distribution tells us the probabilities of being in each kinetic state $k$
.&lt;/li&gt;
&lt;li&gt;Specifically, $\pi_{ng}$
 is a vector of probabilities for the states, and $q_\phi(\pi_{ng}|z_n)$
 is a Dirichlet distribution that &lt;em&gt;governs&lt;/em&gt; these probabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We know that $k_{ng} \sim \text{Categorical}(\pi_{ng})$
. This means, if we knew the exact value of $\pi_{ng}$
, then $P(k_{ng}=k|\pi_{ng}) = \pi_{ng,k}$
.&lt;/p&gt;
&lt;p&gt;However, $\pi_{ng}$
 itself is a random variable distributed according to $q_\phi(\pi_{ng}|z_n)$
.&lt;/p&gt;
&lt;p&gt;So, to get the marginal probability $P(k_{ng}=k|z_n)$
, we need to integrate over $\pi_{ng}$
:&lt;/p&gt;

$$
P(k_{ng}=k|z_n) = \int P(k_{ng}=k|\pi_{ng}) q_\phi(\pi_{ng}|z_n) d\pi_{ng} \tag{6.1}
$$



$$
P(k_{ng}=k|z_n) = \int \pi_{ng,k} q_\phi(\pi_{ng}|z_n) d\pi_{ng} \tag{6.2}
$$


&lt;p&gt;This integral is simply the definition of the expected value of the $k$
-th component of $\pi_{ng}$
 under the distribution $q_\phi(\pi_{ng}|z_n)$
:&lt;/p&gt;

$$
P(k_{ng}=k|z_n) = \mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [\pi_{ng,k}] \tag{6.3}
$$


&lt;p&gt;For a Dirichlet distribution $\text{Dir}(\alpha_{q,ng,1}(z_n), \ldots, \alpha_{q,ng,K}(z_n))$
, this expectation has a closed form:&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [\pi_{ng,k}] = \frac{\alpha_{q,ng,k}(z_n)}{\sum_{j=1}^K \alpha_{q,ng,j}(z_n)} \tag{6.4}
$$


&lt;p&gt;So, $P(k_{ng}=k|z_n)$
 is precisely this fraction.&lt;/p&gt;
&lt;p&gt;Therefore:&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [t^{(k_{ng})}_{ng}] = \sum_{k=1}^K \left( t_{ng}^{(k)}(z_n) \cdot P(k_{ng}=k|z_n) \right) \tag{6}
$$


&lt;p&gt;Substituting equation (4) into equation (6):&lt;/p&gt;

$$
\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} [t^{(k_{ng})}_{ng}] = \sum_{k=1}^K \left( t_{ng}^{(k)}(z_n) \cdot \frac{\alpha_{q,ng,k}(z_n)}{\sum_{j=1}^K \alpha_{q,ng,j}(z_n)} \right) \tag{6.5}
$$


&lt;p&gt;This is exactly the equation we use in practice, explicitly showing that the expectation is a &lt;strong&gt;weighted sum&lt;/strong&gt; where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each possible latent time $t_{ng}^{(k)}(z_n)$
 is weighted by&lt;/li&gt;
&lt;li&gt;The probability of its corresponding state $k$
 occurring, as determined by the approximate posterior $q_\phi(\pi_{ng}|z_n)$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;numeric-example-for-expected-time&#34;&gt;Numeric Example for Expected Time&lt;/h2&gt;
&lt;p&gt;This expression asks for the average latent time $t_{ng}$
 for gene g in cell n, taking into account both:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The uncertainty in the cell&amp;rsquo;s underlying latent representation $z_n$
&lt;/li&gt;
&lt;li&gt;The uncertainty in which kinetic state $k_{ng}$
 gene g is in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similar to the previous expectation, this involves an intractable integral, so we will use Monte Carlo sampling for approximation.&lt;/p&gt;
&lt;p&gt;The expression is:&lt;/p&gt;

$$\mathbb{E}_{q_\phi(z_n|u_n,s_n)} \left[\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} \left[t(k_{ng})_{ng}\right]\right] \tag{1}$$


&lt;p&gt;Where $t(k_{ng})_{ng}$
 represents the latent time for gene g in cell n if it&amp;rsquo;s in kinetic state $k_{ng}$
. Note that this latent time $t_{ng}$
 is itself a function of $z_n$
 and the specific kinetic state k.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break down the calculation in steps with a numeric example for Cell 1 and Gene A.&lt;/p&gt;
&lt;h3 id=&#34;what-we-assume-we-have-after-velovi-training&#34;&gt;What We Assume We Have (after VeloVI training)&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Observed Data for Cell 1, Gene A:&lt;/strong&gt; $u_{1A} = 0.8, s_{1A} = 0.2$
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learned Biophysical Parameters (Œ∏) for Gene A:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switching Time $(t_A^s) = 8.0$
&lt;/li&gt;
&lt;li&gt;(Other Œ∏ like Œ±,Œ≤,Œ≥ are not directly used in this specific calculation of expected time, but they would be used to calculate expected RNA levels from this time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Learned Neural Network Parameters (œÜ) for Encoder and Decoder:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Encoder outputs for&lt;/em&gt; $z_1$
 &lt;em&gt;(given&lt;/em&gt; $u_1, s_1$
*):* Defines $q_\phi(z_1|u_1,s_1) = \mathcal{N}(\mu_{z_1}, \Sigma_{z_1})$
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mu_{z_1} = (0.5, -0.3)$
&lt;/li&gt;
&lt;li&gt;$\Sigma_{z_1} = \text{diag}(e^{-0.5}, e^{-0.5}) \approx \text{diag}(0.6065, 0.6065)$
 (for $z_n$
 as 2D)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Encoder outputs for&lt;/em&gt; $\pi_{1A}$
 &lt;em&gt;(given&lt;/em&gt; $z_1$
*):* Defines $q_\phi(\pi_{1A}|z_1) = \text{Dirichlet}(\alpha_{q,1A}(z_1))$
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Decoder outputs for&lt;/em&gt; $\rho_{1A}^{(k)}$
 &lt;em&gt;(given&lt;/em&gt; $z_1$
*):* For each state k, the decoder outputs a scaled latent time $\rho_{1A}^{(k)}$
, where $t_{1A}^{(k)} = \rho_{1A}^{(k)} \times t_A^s$
.&lt;/p&gt;
&lt;h3 id=&#34;step-1-calculate-the-inner-expectation-1&#34;&gt;Step 1: Calculate the Inner Expectation&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;recall-the-inner-expectation&#34;&gt;&lt;strong&gt;Recall the Inner Expectation&lt;/strong&gt;&lt;/h4&gt;

$$\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} \left[t(k_{ng})_{ng}\right] \tag{2}$$


&lt;p&gt;This inner expectation is over the kinetic states $k_{ng}$
, weighted by their probabilities. The latent time $t(k_{ng})_{ng}$
 is specific to the state $k_{ng}$
. We can write this expectation as a sum:&lt;/p&gt;

$$\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} \left[t(k_{ng})_{ng}\right] = \sum_{k=1}^K P(k_{ng} = k|z_n) \cdot t_{ng}^{(k)}(z_n) \tag{3}$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K is the number of kinetic states (4 in VeloVI)&lt;/li&gt;
&lt;li&gt;$P(k_{ng} = k|z_n)$
 is the probability that gene g in cell n is in state k, given $z_n$
. This is the k-th component of the expected $\pi_{ng}$
 vector from the Dirichlet distribution:&lt;/li&gt;
&lt;/ul&gt;

$$P(k_{ng} = k|z_n) = \frac{\alpha_{q,ng,k}(z_n)}{\sum_{j=1}^K \alpha_{q,ng,j}(z_n)} \tag{4}$$


&lt;ul&gt;
&lt;li&gt;$t_{ng}^{(k)}(z_n)$
 is the latent time for gene g in cell n if it is in state k. This is a deterministic output of the decoder, given $z_n$
: $t_{ng}^{(k)}(z_n) = \text{Decoder}_k(z_n) \times t_g^s = \rho_{ng}^{(k)}(z_n) \times t_g^s$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result of this inner expectation will be a single scalar value, let&amp;rsquo;s call it $\bar{t}_{ng}(z_n)$
, which is still a function of $z_n$
.&lt;/p&gt;
&lt;h4 id=&#34;numeric-example-for-cell-1-gene-a-1&#34;&gt;&lt;strong&gt;Numeric Example for Cell 1, Gene A&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Here we take Cell 1, Gene A for a Numeric Example: assume we have a sample $z_1^* = (0.6558, -0.3779)$
 (we&amp;rsquo;ll show how to get this in Step 2).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;From&lt;/strong&gt; $z_1^*$
**, get Dirichlet concentration parameters:**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume encoder outputs: $\alpha_{q,1A}(z_1^*) = (5.0, 0.1, 0.2, 0.1)$
&lt;/li&gt;
&lt;li&gt;Sum of concentrations = 5.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Calculate&lt;/strong&gt; $P(k_{1A} = k|z_1^*)$
 &lt;strong&gt;for each state:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P(k_{1A} = 1|z_1^*) = 5.0/5.4 \approx 0.9259$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 2|z_1^*) = 0.1/5.4 \approx 0.0185$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 3|z_1^*) = 0.2/5.4 \approx 0.0370$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 4|z_1^*) = 0.1/5.4 \approx 0.0185$
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;From&lt;/strong&gt; $z_1^*$
**, get latent times** $t_{1A}^{(k)}(z_1^*)$
 &lt;strong&gt;for each state:&lt;/strong&gt;
(These are specific outputs from the decoder for this $z_1^*$
)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume decoder outputs $\rho_{1A}^{(1)}(z_1^*) = 0.5$
 (for Induction)
$t_{1A}^{(1)}(z_1^*) = 0.5 \times t_A^s = 0.5 \times 8.0 = 4.0$
&lt;/li&gt;
&lt;li&gt;Assume decoder outputs $\rho_{1A}^{(2)}(z_1^*) = 0.3$
 (for Repression)
$t_{1A}^{(2)}(z_1^*) = 0.3 \times t_A^s = 0.3 \times 8.0 = 2.4$
&lt;/li&gt;
&lt;li&gt;Assume decoder outputs $\rho_{1A}^{(3)}(z_1^*) = 0.8$
 (for Steady-State Induction)
$t_{1A}^{(3)}(z_1^*) = 0.8 \times t_A^s = 0.8 \times 8.0 = 6.4$
&lt;/li&gt;
&lt;li&gt;Assume decoder outputs $\rho_{1A}^{(4)}(z_1^*) = 0.1$
 (for Steady-State Repression)
$t_{1A}^{(4)}(z_1^*) = 0.1 \times t_A^s = 0.1 \times 8.0 = 0.8$
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Calculate the weighted sum&lt;/strong&gt; $\bar{t}_{1A}(z_1^*)$
**:**&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

$$\bar{t}_{1A}(z_1^*) = (0.9259 \times 4.0) + (0.0185 \times 2.4) + (0.0370 \times 6.4) + (0.0185 \times 0.8) \tag{5}$$



$$\bar{t}_{1A}(z_1^*) = 3.7036 + 0.0444 + 0.2368 + 0.0148 \tag{6}$$



$$\bar{t}_{1A}(z_1^*) \approx 3.9996 \text{ (This is a scalar value for this specific } z_1^*) \tag{7}$$


&lt;h3 id=&#34;step-2-monte-carlo-approximation-calculates-the-outer-expectation&#34;&gt;Step 2: Monte Carlo Approximation Calculates the Outer Expectation&lt;/h3&gt;
&lt;hr&gt;

$$\mathbb{E}_{q_\phi(z_n|u_n,s_n)} \left[\bar{t}_{ng}(z_n)\right] \tag{8}$$


&lt;p&gt;Now we need to average this $\bar{t}_{ng}(z_n)$
 value over the distribution of $z_n$
. Since $\bar{t}_{ng}(z_n)$
 is a complex, non-linear function of $z_n$
 (involving neural network outputs), we use Monte Carlo approximation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Draw M samples of&lt;/strong&gt; $z_n^*$
 &lt;strong&gt;from&lt;/strong&gt; $q_\phi(z_n|u_n,s_n)$
**:**&lt;/p&gt;
&lt;p&gt;Recall $q_\phi(z_1|u_1,s_1) = \mathcal{N}(\mu_{z_1}, \Sigma_{z_1})$
 with $\mu_{z_1} = (0.5, -0.3)$
 and $\Sigma_{z_1} = \text{diag}(0.6065, 0.6065)$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For each sample&lt;/strong&gt; $m \in \{1, ..., M\}$
**:**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Draw a random noise vector $\varepsilon_z^{(m)} \sim \mathcal{N}(0, I_d)$
&lt;/li&gt;
&lt;li&gt;Calculate $z_n^{*(m)} = \mu_{z_n} + \sqrt{\Sigma_{z_n}} \odot \varepsilon_z^{(m)}$
 (This is the reparameterization trick)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just two samples for brevity, usually M=1000+:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sample 1:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\varepsilon_z^{(1)} = (0.2, -0.1)$
&lt;/li&gt;
&lt;li&gt;$z_1^{*(1)} = (0.5, -0.3) + (\sqrt{0.6065}, \sqrt{0.6065}) \odot (0.2, -0.1) = (0.6558, -0.3779)$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Sample 2:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\varepsilon_z^{(2)} = (-0.5, 0.3)$
&lt;/li&gt;
&lt;li&gt;$z_1^{*(2)} = (0.5, -0.3) + (\sqrt{0.6065}, \sqrt{0.6065}) \odot (-0.5, 0.3) = (0.1106, -0.0663)$
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For each sampled&lt;/strong&gt; $z_n^{*(m)}$
**, calculate** $\bar{t}_{ng}(z_n^{*(m)})$
**:**&lt;/p&gt;
&lt;p&gt;Follow the steps for the inner expectation (from above) for each $z_n^{*(m)}$
.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;For&lt;/em&gt; $z_1^{*(1)} = (0.6558, -0.3779)$
*:*
We already calculated: $\bar{t}_{1A}^{(1)} \approx 3.9996$
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For&lt;/em&gt; $z_1^{*(2)} = (0.1106, -0.0663)$
*:*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume encoder outputs $\alpha_{q,1A}(z_1^{*(2)}) = (4.0, 0.3, 0.1, 0.1)$
 (differs from first sample). Sum = 4.5&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 1|z_1^{*(2)}) = 4.0/4.5 \approx 0.8889$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 2|z_1^{*(2)}) = 0.3/4.5 \approx 0.0667$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 3|z_1^{*(2)}) = 0.1/4.5 \approx 0.0222$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 4|z_1^{*(2)}) = 0.1/4.5 \approx 0.0222$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assume decoder outputs (different for this $z_1^{*(2)}$
):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\rho_{1A}^{(1)}(z_1^{*(2)}) = 0.4 \rightarrow t_{1A}^{(1)}(z_1^{*(2)}) = 0.4 \times 8.0 = 3.2$
&lt;/li&gt;
&lt;li&gt;$\rho_{1A}^{(2)}(z_1^{*(2)}) = 0.2 \rightarrow t_{1A}^{(2)}(z_1^{*(2)}) = 0.2 \times 8.0 = 1.6$
&lt;/li&gt;
&lt;li&gt;$\rho_{1A}^{(3)}(z_1^{*(2)}) = 0.7 \rightarrow t_{1A}^{(3)}(z_1^{*(2)}) = 0.7 \times 8.0 = 5.6$
&lt;/li&gt;
&lt;li&gt;$\rho_{1A}^{(4)}(z_1^{*(2)}) = 0.05 \rightarrow t_{1A}^{(4)}(z_1^{*(2)}) = 0.05 \times 8.0 = 0.4$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calculate weighted sum $\bar{t}_{1A}(z_1^{*(2)})$
 for this sample:&lt;/p&gt;

$$\bar{t}_{1A}(z_1^{*(2)}) = (0.8889 \times 3.2) + (0.0667 \times 1.6) + (0.0222 \times 5.6) + (0.0222 \times 0.4) \tag{9}$$



$$\bar{t}_{1A}(z_1^{*(2)}) = 2.8445 + 0.1067 + 0.1243 + 0.0089 \tag{10}$$



$$\bar{t}_{1A}(z_1^{*(2)}) \approx 3.0844 \tag{11}$$


&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;Average the results:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The overall expectation is approximated by the average of these M scalar values:&lt;/p&gt;

$$\mathbb{E}_{q_\phi(z_n|u_n,s_n)} [\bar{t}_{ng}(z_n)] \approx \frac{1}{M} \sum_{m=1}^M \bar{t}_{ng}^{(m)} \tag{12}$$


&lt;p&gt;For our example with M=2:&lt;/p&gt;
&lt;p&gt;Average latent time for Gene A in Cell 1:&lt;/p&gt;

$$\frac{3.9996 + 3.0844}{2} = 3.542 \tag{13}$$


&lt;p&gt;This final scalar value (e.g., 3.542) represents VeloVI&amp;rsquo;s average estimated latent time for Gene A in Cell 1, taking into account all the uncertainties modeled by the variational distributions.&lt;/p&gt;
&lt;h2 id=&#34;summary-table&#34;&gt;Summary Table&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Item&lt;/th&gt;
          &lt;th&gt;Status&lt;/th&gt;
          &lt;th&gt;Role&lt;/th&gt;
          &lt;th&gt;Example Value&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;$u_n, s_n$
&lt;/td&gt;
          &lt;td&gt;Known (observed)&lt;/td&gt;
          &lt;td&gt;Input data&lt;/td&gt;
          &lt;td&gt;Cell 1 observations&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;$\phi$
&lt;/td&gt;
          &lt;td&gt;Learned &amp;amp; Fixed&lt;/td&gt;
          &lt;td&gt;Neural network parameters&lt;/td&gt;
          &lt;td&gt;(Internal to networks)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;$\mu_{z_n}, \Sigma_{z_n}$
&lt;/td&gt;
          &lt;td&gt;Calculated by encoder&lt;/td&gt;
          &lt;td&gt;Parameters of $q_\phi(z_n\|u_n,s_n)$
&lt;/td&gt;
          &lt;td&gt;$(0.5, -0.3)$
, $\text{diag}(0.6065, 0.6065)$
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;$z_n^{*(m)}$
&lt;/td&gt;
          &lt;td&gt;Sampled&lt;/td&gt;
          &lt;td&gt;Sample from $q_\phi(z_n\|u_n,s_n)$
&lt;/td&gt;
          &lt;td&gt;$(0.6558, -0.3779)$
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;$\alpha_{q,ng}(z_n^{*(m)})$
&lt;/td&gt;
          &lt;td&gt;Calculated by encoder&lt;/td&gt;
          &lt;td&gt;Dirichlet parameters&lt;/td&gt;
          &lt;td&gt;$(5.0, 0.1, 0.2, 0.1)$
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;$\bar{\pi}_{ng}(z_n^{*(m)})$
&lt;/td&gt;
          &lt;td&gt;Calculated&lt;/td&gt;
          &lt;td&gt;Inner expectation result&lt;/td&gt;
          &lt;td&gt;$(0.9259, 0.0185, 0.0370, 0.0185)$
&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Final average&lt;/td&gt;
          &lt;td&gt;Calculated&lt;/td&gt;
          &lt;td&gt;Overall approximation&lt;/td&gt;
          &lt;td&gt;$(0.9074, 0.0426, 0.0296, 0.0204)$
&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;calculate-expected-velocity-for-a-sampled-hahahugoshortcode266s214hbhb&#34;&gt;Calculate Expected Velocity for a sampled $z_n$
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: Posterior Velocity Distribution, i.e. the full posterior predictive velocity distribution, is just the distribution of all the expected velocity values for the sample $z_n^*$
 (drawn from $q_\phi(z_n|u_n, s_n)$
).&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

$$\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} \left[v^{(g)}(t(k_{ng})_{ng}, k_{ng})\right] \tag{1}$$


&lt;p&gt;This term represents the expected velocity for gene g in cell n, given a specific latent variable $z_n$
, averaging over the uncertainty in its kinetic state $k_{ng}$
.&lt;/p&gt;
&lt;p&gt;We will use the same logic as the previous expectation for latent time, as the structure is identical: we are calculating the expectation of a quantity ($v^{(g)}$
) that depends on a discrete random variable ($k_{ng}$
), whose probabilities are determined by the Dirichlet distribution $q_\phi(\pi_{ng}|z_n)$
.&lt;/p&gt;
&lt;h2 id=&#34;1-recall-the-general-expectation-for-a-discrete-variable&#34;&gt;1. Recall the General Expectation for a Discrete Variable&lt;/h2&gt;
&lt;p&gt;If X is a discrete random variable that can take on values $x_1, x_2, \ldots, x_K$
 with corresponding probabilities $P(X=x_1), P(X=x_2), \ldots, P(X=x_K)$
, then:&lt;/p&gt;

$$\mathbb{E}[X] = \sum_{i=1}^K x_i \cdot P(X=x_i) \tag{2}$$


&lt;h2 id=&#34;2-applying-to-our-velocity-case&#34;&gt;2. Applying to Our Velocity Case&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The Random Variable:&lt;/strong&gt; Our random variable is $v^{(g)}(t(k_{ng})_{ng}, k_{ng})$
. Its value depends on the specific kinetic state $k_{ng}$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Possible Values:&lt;/strong&gt; For each state $k \in \{1,2,3,4\}$
, the value of the velocity is $v^{(g)}(t_{ng}^{(k)}(z_n), k)$
. This velocity depends on the latent time $t_{ng}^{(k)}(z_n)$
 (which is a function of $z_n$
 and k) and the state k itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Probabilities:&lt;/strong&gt; The probability of being in state k is $P(k_{ng} = k|z_n)$
. As derived previously, this is given by the expected value of the k-th component of $\pi_{ng}$
 under the Dirichlet distribution:&lt;/p&gt;

$$P(k_{ng} = k|z_n) = \mathbb{E}_{q_\phi(\pi_{ng}|z_n)}[\pi_{ng,k}] = \frac{\alpha_{q,ng,k}(z_n)}{\sum_{j=1}^K \alpha_{q,ng,j}(z_n)} \tag{3}$$


&lt;p&gt;Putting it together, the inner expectation for velocity becomes:&lt;/p&gt;

$$\mathbb{E}_{q_\phi(\pi_{ng}|z_n)} \left[v^{(g)}(t(k_{ng})_{ng}, k_{ng})\right] = \sum_{k=1}^K P(k_{ng} = k|z_n) \cdot v^{(g)}(t_{ng}^{(k)}(z_n), k) \tag{4}$$


&lt;p&gt;This will result in a single scalar value for each gene and cell, given a specific $z_n$
.&lt;/p&gt;
&lt;h2 id=&#34;numeric-example-for-cell-1-gene-a-2&#34;&gt;Numeric Example for Cell 1, Gene A&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use the same example inputs from our previous discussions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assumed Sampled&lt;/strong&gt; $z_1^*$
: $(0.6558, -0.3779)$
 (This comes from the first step in the &amp;ldquo;posterior predictive velocity distribution&amp;rdquo; process).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learned Biophysical Parameters (Œ∏) for Gene A:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha_A = 1.2$
 (Transcription rate in Induction)&lt;/li&gt;
&lt;li&gt;$\beta_A = 0.2$
 (Splicing rate)&lt;/li&gt;
&lt;li&gt;$\gamma_A = 0.1$
 (Degradation rate)&lt;/li&gt;
&lt;li&gt;$t_A^s = 8.0$
 (Switching time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Encoder Output for&lt;/strong&gt; $\pi_{1A}$
 &lt;strong&gt;(given&lt;/strong&gt; $z_1^*$
**):**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha_{q,1A}(z_1^*) = (5.0, 0.1, 0.2, 0.1)$
&lt;/li&gt;
&lt;li&gt;Sum = 5.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives us the state probabilities $P(k_{1A} = k|z_1^*)$
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P(k_{1A} = 1|z_1^*) = 5.0/5.4 \approx 0.9259$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 2|z_1^*) = 0.1/5.4 \approx 0.0185$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 3|z_1^*) = 0.2/5.4 \approx 0.0370$
&lt;/li&gt;
&lt;li&gt;$P(k_{1A} = 4|z_1^*) = 0.1/5.4 \approx 0.0185$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Decoder Output for&lt;/strong&gt; $\rho_{1A}^{(k)}$
 &lt;strong&gt;(given&lt;/strong&gt; $z_1^*$
**) and corresponding latent times** $t_{1A}^{(k)}$
**:**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\rho_{1A}^{(1)} = 0.5 \Rightarrow t_{1A}^{(1)} = 0.5 \times 8.0 = 4.0$
&lt;/li&gt;
&lt;li&gt;$\rho_{1A}^{(2)} = 0.3 \Rightarrow t_{1A}^{(2)} = 0.3 \times 8.0 = 2.4$
&lt;/li&gt;
&lt;li&gt;$\rho_{1A}^{(3)} = 0.8 \Rightarrow t_{1A}^{(3)} = 0.8 \times 8.0 = 6.4$
&lt;/li&gt;
&lt;li&gt;$\rho_{1A}^{(4)} = 0.1 \Rightarrow t_{1A}^{(4)} = 0.1 \times 8.0 = 0.8$
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Velocity Formula:&lt;/strong&gt;&lt;/p&gt;

$$v^{(g)}(t^{(k)}, k) = \beta_g \bar{u}^{(g)}(t^{(k)}, k) - \gamma_g \bar{s}^{(g)}(t^{(k)}, k) \tag{5}$$


&lt;p&gt;We need the expected unspliced ($\bar{u}$
) and spliced ($\bar{s}$
) counts for each state at its corresponding latent time. These are given by the kinetic equations in VeloVI.&lt;/p&gt;
&lt;h3 id=&#34;calculations-for-each-state-k-and-its-corresponding-hahahugoshortcode266s261hbhb&#34;&gt;Calculations for each state k and its corresponding $t_{1A}^{(k)}$
:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;State 1 (Induction, k=1): t=4.0&lt;/strong&gt;&lt;/p&gt;

$$\bar{u}^{(A)}(4.0, 1) = \frac{\alpha_A}{\beta_A}(1 - e^{-\beta_A t}) = \frac{1.2}{0.2}(1 - e^{-0.2 \times 4.0}) = 6(1 - e^{-0.8}) \approx 6(1 - 0.4493) = 3.3042 \tag{6}$$



$$\bar{s}^{(A)}(4.0, 1) = \frac{\alpha_A}{\gamma_A}\left(1 - \frac{\gamma_A}{\gamma_A - \beta_A}e^{-\beta_A t} + \frac{\beta_A}{\gamma_A - \beta_A}e^{-\gamma_A t}\right) \tag{7}$$



$$= \frac{1.2}{0.1}\left(1 - \frac{0.1}{0.1 - 0.2}e^{-0.8} + \frac{0.2}{0.1 - 0.2}e^{-0.4}\right) = 12(1 + e^{-0.8} - 2e^{-0.4}) \tag{8}$$



$$\approx 12(1 + 0.4493 - 2 \times 0.6703) = 12(1.4493 - 1.3406) \approx 1.3044 \tag{9}$$



$$v^{(A)}(4.0, 1) = \beta_A \bar{u}^{(A)}(4.0, 1) - \gamma_A \bar{s}^{(A)}(4.0, 1) = (0.2 \times 3.3042) - (0.1 \times 1.3044) = 0.66084 - 0.13044 = 0.5304 \tag{10}$$


&lt;p&gt;&lt;strong&gt;State 2 (Repression, k=2): t=2.4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(For repression, we need the values at $t_A^s = 8.0$
 (end of induction) as initial conditions for decay.)&lt;/p&gt;

$$\bar{u}^{(A)}(t_A^s, 1) = 6(1 - e^{-0.2 \times 8.0}) \approx 6(1 - 0.2019) = 4.7886 \tag{11}$$



$$\bar{s}^{(A)}(t_A^s, 1) = 12(1 + e^{-1.6} - 2e^{-0.8}) \approx 12(1 + 0.2019 - 2 \times 0.4493) = 3.6396 \tag{12}$$



$$\bar{u}^{(A)}(2.4, 2) = \bar{u}^{(A)}(t_A^s, 1)e^{-\beta_A t_{1A}^{(2)}} = 4.7886 \times e^{-0.2 \times 2.4} \approx 4.7886 \times 0.6188 = 2.9634 \tag{13}$$



$$\bar{s}^{(A)}(2.4, 2) = \bar{s}^{(A)}(t_A^s, 1)e^{-\gamma_A t_{1A}^{(2)}} + \frac{\beta_A \bar{u}^{(A)}(t_A^s, 1)}{\gamma_A - \beta_A}(e^{-\beta_A t_{1A}^{(2)}} - e^{-\gamma_A t_{1A}^{(2)}}) \tag{14}$$



$$= 3.6396e^{-0.1 \times 2.4} + \frac{0.2 \times 4.7886}{0.1 - 0.2}(e^{-0.2 \times 2.4} - e^{-0.1 \times 2.4}) \tag{15}$$



$$\approx 3.6396 \times 0.7866 + (-9.5772)(0.6188 - 0.7866) \approx 2.8617 + 1.6072 = 4.4689 \tag{16}$$



$$v^{(A)}(2.4, 2) = (0.2 \times 2.9634) - (0.1 \times 4.4689) = 0.59268 - 0.44689 = 0.1458 \tag{17}$$


&lt;p&gt;&lt;strong&gt;State 3 (Steady-State Induction, k=3): t=6.4&lt;/strong&gt;&lt;/p&gt;

$$\bar{u}^{(A)}(6.4, 3) = \alpha_A/\beta_A = 1.2/0.2 = 6.0 \tag{18}$$



$$\bar{s}^{(A)}(6.4, 3) = \alpha_A/\gamma_A = 1.2/0.1 = 12.0 \tag{19}$$



$$v^{(A)}(6.4, 3) = \beta_A \bar{u}^{(A)}(6.4, 3) - \gamma_A \bar{s}^{(A)}(6.4, 3) = (0.2 \times 6.0) - (0.1 \times 12.0) = 1.2 - 1.2 = 0.0 \tag{20}$$


&lt;p&gt;&lt;strong&gt;State 4 (Steady-State Repression, k=4): t=0.8&lt;/strong&gt;&lt;/p&gt;

$$\bar{u}^{(A)}(0.8, 4) = 0.0 \tag{21}$$



$$\bar{s}^{(A)}(0.8, 4) = 0.0 \tag{22}$$



$$v^{(A)}(0.8, 4) = \beta_A \bar{u}^{(A)}(0.8, 4) - \gamma_A \bar{s}^{(A)}(0.8, 4) = (0.2 \times 0.0) - (0.1 \times 0.0) = 0.0 \tag{23}$$


&lt;h3 id=&#34;calculate-the-weighted-sum&#34;&gt;Calculate the weighted sum:&lt;/h3&gt;
&lt;p&gt;Now, we multiply each calculated velocity by its corresponding state probability $P(k_{1A} = k|z_1^*)$
 and sum them up:&lt;/p&gt;

$$\mathbb{E}_{q_\phi(\pi_{1A}|z_1^*)} \left[v^{(A)}(t(k_{1A})_{1A}, k_{1A})\right] = \tag{24}$$



$$(0.9259 \times 0.5304) + (0.0185 \times 0.1458) + (0.0370 \times 0.0) + (0.0185 \times 0.0) \tag{25}$$



$$= 0.4900 + 0.0027 + 0.0 + 0.0 \approx 0.4927 \tag{26}$$


&lt;h2 id=&#34;get-posterior-predictive-velocity-distribution&#34;&gt;Get Posterior Predictive Velocity Distribution&lt;/h2&gt;
&lt;p&gt;The value &lt;strong&gt;0.4927&lt;/strong&gt; is the expected velocity for Gene A in Cell 1, given the specific sampled latent variable $z_1^* = (0.6558, -0.3779)$
.&lt;/p&gt;
&lt;p&gt;This value is one sample of the posterior predictive velocity. To get the full posterior predictive velocity distribution, you would repeat this entire calculation for many different samples of $z_n^*$
 (drawn from $q_\phi(z_n|u_n, s_n)$
) and then analyze the distribution of these resulting expected velocity values.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_model_n_inference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_model_n_inference/</guid>
      <description>&lt;h1 id=&#34;velovi-model-description&#34;&gt;VeloVI Model Description&lt;/h1&gt;
&lt;p&gt;Let  $\alpha_{gk}$ 
 be the gene-state-specific reaction rate of transcription.
Let  $\beta_g$ 
 be the gene-specific splicing rate constant and let  $\gamma_g$ 
 be the
gene-specific degradation rate constant. Each gene has a switching
time  $t^s_g$ 
 when the system switches from induction phase to repression
phase.&lt;/p&gt;
&lt;p&gt;Given the solution to the ordinary differential equations $^{11}$ 
, the
unspliced transcript abundance at time  $t_{ng}$ 
 for cell  $n$ 
 and gene  $g$ 
 is
defined as&lt;/p&gt;
 $$\bar{u}^{(g)}(t_{ng}, k) := u^0_{gk} e^{-\beta_g(t_{ng} - t^0_{gk})} + \frac{\alpha_{gk}}{\beta_g}(1 - e^{-\beta_g(t_{ng} - t^0_{gk})}) \tag{1}$$ 

&lt;p&gt;where  $t^0_{gk}$ 
 is the initial time of the system in state  $k$ 
. The spliced transcript
abundance is defined as&lt;/p&gt;
 $$\bar{s}^{(g)}(t_{ng}, k) := s^0_{gk} e^{-\gamma_g \tau} + \frac{\alpha_{gk}}{\gamma_g} (1 - e^{-\gamma_g(t_{ng} - t^0_{gk})}) + \frac{\alpha_{gk} - \beta_g u^0_{gk}}{\gamma_g - \beta_g} (e^{-\gamma_g(t_{ng} - t^0_{gk})} - e^{-\beta_g(t_{ng} - t^0_{gk})}) \tag{2}$$ 

&lt;h2 id=&#34;induction-state&#34;&gt;Induction state&lt;/h2&gt;
&lt;p&gt;For the induction state,  $k = 1$ 
, we have  $u^0_{g1} = 0$ 
,  $s^0_{g1} = 0$ 
,
 $\alpha_{g1} &gt; 0$ 
 and  $t^0_{g1} = 0$ 
. Thus, the unspliced transcript abundance can then
be expressed as&lt;/p&gt;
 $$\bar{u}^{(g)}(t_{ng}, k=1) := \frac{\alpha_{g1}}{\beta_g}(1 - e^{-\beta_g t_{ng}}) \tag{3}$$ 

&lt;p&gt;Likewise, the spliced transcript abundance can be simplified to&lt;/p&gt;
 $$\bar{s}^{(g)}(t_{ng}, k = 1) := \frac{\alpha_{g1}}{\gamma_g}(1 - e^{-\gamma_g t_{ng}}) + \frac{\alpha_{g1}}{\gamma_g - \beta_g} (e^{-\gamma_g t_{ng}} - e^{-\beta_g t_{ng}}) \tag{4}$$ 

&lt;h2 id=&#34;induction-steady-state&#34;&gt;Induction steady state&lt;/h2&gt;
&lt;p&gt;For the induction steady state,  $k = 2$ 
, the
unspliced and spliced transcript abundances are defined as limits of
the system:&lt;/p&gt;
 $$\bar{u}^{(g)}(t_{ng}, k=1) := \lim_{t_{ng} \to \infty} \bar{u}^{(g)}(t_{ng}, k=1) = \frac{\alpha_{g1}}{\beta_g} \tag{5}$$ 

 $$\bar{s}^{(g)}(t_{ng}, k = 2) := \lim_{t_{ng} \to \infty} \bar{s}^{(g)}(t^s_g, k = 1) = \frac{\alpha_{g1}}{\gamma_g} \tag{6}$$ 

&lt;h2 id=&#34;repression-state&#34;&gt;Repression state&lt;/h2&gt;
&lt;p&gt;For the repression state,  $k = 3$ 
, we have  $\alpha_{g3} = 0$ 
 and
 $t^0_{g3} = t^s_g$ 
. Thus, the number of unspliced transcripts can then be
expressed as&lt;/p&gt;
 $$\bar{u}^{(g)}(t_{ng}, k=3) := u^0_{g3} e^{-\beta_g(t_{ng} - t^0_{g3})} \tag{7}$$ 

&lt;p&gt;Likewise, the number of spliced transcripts can be simplified to&lt;/p&gt;
 $$\bar{s}^{(g)}(t_{ng}, k = 3) := s^0_{g3} e^{-\gamma_g(t_{ng} - t^0_{g3})} - \frac{\beta_g u^0_{g3}}{\gamma_g - \beta_g} (e^{-\gamma_g \tau} - e^{-\beta_g(t_{ng} - t^0_{g3})}) \tag{8}$$ 

&lt;p&gt;The initial conditions,  $u^0_{g3}$ 
 and  $s^0_{g3}$ 
 are defined by the induction
model at the switching time  $t^s_g$ 
, such that&lt;/p&gt;
 $$u^0_{g3} = \bar{u}^{(g)}(t^s_g, k = 2) \tag{9}$$ 

 $$s^0_{g3} = \bar{s}^{(g)}(t^s_g, k = 2) \tag{10}$$ 

&lt;h2 id=&#34;repression-steady-state&#34;&gt;Repression steady state&lt;/h2&gt;
&lt;p&gt;For the repression steady state, the limit
upon which  $t_{ng} \to \infty$ 
, there is no expression, so we have&lt;/p&gt;
 $$\bar{u}^{(g)}(t_{ng}, k=4) := 0 \tag{11}$$ 

 $$\bar{s}^{(g)}(t_{ng}, k = 4) := 0 \tag{12}$$ 

&lt;h2 id=&#34;model-assumptions&#34;&gt;Model assumptions&lt;/h2&gt;
&lt;p&gt;As in ref. 11, this model assumes that for one gene,
at the initial time of the system, cells are first in induction phase in which
both spliced and unspliced expression increases. Then cells potentially
reach a steady state of this induction state. Next at some future time  $t^s_g$ 

the system switches to repression state. Finally, the repression reaches
a steady state in which there is no expression. Further assumptions are
necessary to identify the dynamical model parameters $^{44}$ 
; thus, we
assume that each gene is on the same time scale (precisely each gene
has a maximum time of  $t = 20$ 
 as shown previously $^{11}$ 
).&lt;/p&gt;
&lt;h1 id=&#34;velovi-generative-process&#34;&gt;veloVI generative process&lt;/h1&gt;
&lt;p&gt;We posit a generative process that takes into account the underlying dynamics of the system. Compared to Bergen et al. $^{11}$ 
, the model
here does not treat each gene independently; instead, the latent time
and states for each (cell and gene) pair are tied together via a local
low-dimensional latent variable.&lt;/p&gt;
&lt;p&gt;For each cell we draw a low-dimensional ( $d = 10$ 
 dimensions
throughout this manuscript) latent variable&lt;/p&gt;
 $$z_n \sim \text{Normal}(0, I_d) \tag{13}$$ 

&lt;p&gt;that summarizes the latent state of each cell. Next, for each gene  $g$ 
 in
cell  $n$ 
 we draw the distribution over the state assignments as well as the
state assignment itself&lt;/p&gt;
 $$\pi_{ng} \sim \text{Dirichlet}(0.25, 0.25, 0.25, 0.25) \tag{14}$$ 

 $$k_{ng} \sim \text{Categorical}(\pi_{ng}) \tag{15}$$ 

&lt;p&gt;Here  $\pi_{ng}$ 
 is sampled from a Dirichlet distribution, which has the
support of the probability simplex. In other words, the Dirichlet provides a distribution over discrete probability distributions. If  $k_{ng} = 1$ 

(induction), then the time is a function of  $z_n$ 
,&lt;/p&gt;
 $$\rho^{(1)}_{ng} = [h_{\text{ind}}(z_n)]_g \tag{16}$$ 

 $$(t^1)_{ng} = \rho^{(1)}_{ng} t^s_g \tag{17}$$ 

&lt;p&gt;where  $h_{\text{ind}} : \mathbb{R}^d \to (0, 1)^G$ 
 is parameterized as a fully connected neural
network. Notably, this parameterization results in an induction-specific
time that is constrained to be less than the switching time.&lt;/p&gt;
&lt;p&gt;Else, if  $k_{ng} = 3$ 
 (repression),&lt;/p&gt;
 $$\rho^{(3)}_{ng} = [h_{\text{rep}}(z_n)]_g \tag{18}$$ 

 $$(t^3)_{ng} = (t_{\max} - t^s_g)\rho^{(3)}_{ng} + t^s_g \tag{19}$$ 

&lt;p&gt;where  $t_{\max} := 20$ 
 is used to fix the time scale across genes and identify
the rate parameters of the model. Similarly to the previously defined
function,  $h_{\text{rep}} : \mathbb{R}^d \to (0, 1)^G$ 
 and is also a neural network.&lt;/p&gt;
&lt;p&gt;We also consider two potential steady states. If  $k_{ng} = 2$ 
 (induction
steady state) or if  $k_{ng} = 4$ 
 (repression steady state), we consider the
limit as time approaches  $\infty$ 
, which is described in the previous section.&lt;/p&gt;
&lt;p&gt;Finally, the observed data are sampled from normal distributions as&lt;/p&gt;
 $$u_{ng} \sim \text{Normal} \left(\bar{u}^{(g)}\left(t_{ng}^{(k_{ng})}, k_{ng}\right), (c_k\sigma_{gu})^2\right) \tag{20} $$

 $$s_{ng} \sim \text{Normal} \left(\bar{s}^{(g)}\left(t_{ng}^{(k_{ng})}, k_{ng}\right), (c_k\sigma_{gs})^2\right) \tag{21} $$ 

&lt;p&gt;For veloVI, we consider the observed data  $\{(s_n, u_n)\}_{n=1}^N$ 
 to be the nearest-neighbor smoothed expression data that is also used as input to scVelo as well as velocyto. In addition, we assume the data have been preprocessed such that for each gene, the smoothed spliced and unspliced abundances are independently min-max scaled into [0, 1]. By using the normal distribution, we assume that the smoothed expression (which represents an average of random variables) has a sampling distribution centered on some mean value and that this sampling distribution is approximately normal; however, the flexibility of this modeling framework will enable extensions that consider the discrete nature of unique molecular identifiers used in standard scRNA-seq assays.&lt;/p&gt;
&lt;p&gt;We include a state-dependent scaling factor on the variance. For all experiments in this manuscript, we used  $c_k = 1$ 
 except for the repression steady state in which  $c_4 = 0.1$ 
. This hyperparameter choice forces the variance of abundance in the repression steady state to be less than that of other transcriptional states, which reflects the notion that the repression steady state corresponds to zero transcriptional activity. Despite the assumption of zero transcriptional activity, the normal distribution here captures noise that arises during the experimental process (ambient transcripts) as well as during preprocessing (for example, KNN smoothing). Finally, in the following, let  $\theta$ 
 be the set of parameters of the generative process ( $\alpha, \beta, \gamma, t_s$ 
 and neural network parameters).&lt;/p&gt;
&lt;h1 id=&#34;multivariate-normal-distribution-described-in-equation-13&#34;&gt;Multivariate Normal Distribution Described in Equation (13)&lt;/h1&gt;
&lt;p&gt;The expression:&lt;/p&gt;
 
$$z_n \sim \text{Normal}(0, I_d) \tag{13}$$


&lt;p&gt;means that the random variable  $z_n$ 
 is drawn from a multivariate normal (Gaussian) distribution with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mean vector&lt;/strong&gt;  $0$ 
: a vector of all zeros, of dimension  $d$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Covariance matrix&lt;/strong&gt;  $I_d$ 
: the  $d \times d$ 
 identity matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-what-this-means&#34;&gt;üîç What this means:&lt;/h2&gt;
&lt;p&gt; $z_n \in \mathbb{R}^d$ 
, so it&amp;rsquo;s a  $d$ 
-dimensional vector.&lt;/p&gt;
&lt;p&gt;Each component of  $z_n$ 
 is independent and follows a standard normal distribution:&lt;/p&gt;
 
$$z_n^{(i)} \sim N(0,1) \quad \text{for } i=1,\ldots,d \tag{13.1}$$


&lt;p&gt;The identity matrix  $I_d$ 
 as covariance means there&amp;rsquo;s no correlation between dimensions.&lt;/p&gt;
&lt;h2 id=&#34;-common-context&#34;&gt;‚úÖ Common context:&lt;/h2&gt;
&lt;p&gt;This type of distribution is often used in Variational Autoencoders (VAEs) or other latent variable models, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $z_n$ 
 is a latent (hidden) variable representing compressed features.&lt;/li&gt;
&lt;li&gt;We assume a standard normal prior for simplicity and tractability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-simple-numeric-example&#34;&gt;üìå Simple Numeric Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dimension&lt;/strong&gt;  $d = 3$ 
&lt;/p&gt;
&lt;p&gt;So,  $z \sim N(0, I_3)$ 
, where&lt;/p&gt;
 
$$I_3 = \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix} \tag{13.2}$$


&lt;p&gt;This means  $z = [z_1, z_2, z_3]$ 
, where each  $z_i \sim N(0,1)$ 
, independently.&lt;/p&gt;
&lt;h2 id=&#34;-sample-values-drawn-randomly&#34;&gt;üé≤ Sample values (drawn randomly):&lt;/h2&gt;
&lt;p&gt;Suppose we draw one sample and get:&lt;/p&gt;
 
$$z = \begin{bmatrix} 0.15 \\ -1.23 \\ 0.84 \end{bmatrix} \tag{13.3}$$


&lt;p&gt;That means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $z_1 = 0.15$ 
&lt;/li&gt;
&lt;li&gt; $z_2 = -1.23$ 
&lt;/li&gt;
&lt;li&gt; $z_3 = 0.84$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and each of these values came from a standard normal distribution.&lt;/p&gt;
&lt;h2 id=&#34;-in-python-if-youre-curious&#34;&gt;üîß In Python (if you&amp;rsquo;re curious):&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give a different 3D sample from  $N(0, I_3)$ 
 each time you run it.&lt;/p&gt;
&lt;h1 id=&#34;velovi-inference-procedure&#34;&gt;veloVI inference procedure&lt;/h1&gt;
&lt;p&gt;We seek the following: (1) point estimates of the transcription rate, degradation and splicing rate constants and the switching time point; (2) point estimates of the parameters of the neural networks; and (3), a posterior distribution over the latent variables, which in this case includes  $z$ 
 and  $\pi$ 
. Noting that the model evidence  $p_\theta(u, s)$ 
 cannot be computed in closed form, we use variational inference to approximate the posterior distribution as well as accomplish the other tasks. Following inference, velocity can be calculated as a functional of the variational posterior distribution.&lt;/p&gt;
&lt;h3 id=&#34;variational-posterior&#34;&gt;Variational posterior&lt;/h3&gt;
&lt;p&gt;We posit the following factorization on the approximate posterior distribution&lt;/p&gt;
 $$q_\phi(z, \pi | u, s) := \prod_{n}^N q_\phi(z_n | u_n, s_n) \prod_{g}^G q_\phi(\pi_{ng} | z_n), \tag{22} $$ 

&lt;p&gt;in which dependencies are specified using neural networks with parameter set  $\phi$ 
. Here  $z$ 
 factorizes over all  $n$ 
 cells and  $\pi_{ng}$ 
 over all  $n$ 
 cells and  $g$ 
 genes.&lt;/p&gt;
&lt;p&gt;For the likelihoods, we integrate over the choice of transcriptional state  $k_{ng}$ 
, such that the likelihoods for unspliced and spliced transcript abundances,&lt;/p&gt;
 $$p_\theta(u_{ng} | z_n, \pi_n) = \sum_{k_{ng} \in \{1,2,3,4\}} \pi_{ng}^{k_{ng}} \text{Normal} \left(\bar{u}^{(g)}\left(t_{ng}^{(k_{ng})}, k_{ng}\right), (c_k\sigma_{gu})^2\right) \tag{23} $$ 

 $$p_\theta(s_{ng} | z_n, \pi_n) = \sum_{k_{ng} \in \{1,2,3,4\}} \pi_{ng}^{k_{ng}} \text{Normal} \left(\bar{s}^{(g)}\left(t_{ng}^{(k_{ng})}, k_{ng}\right), (c_k\sigma_{gs})^2\right)\tag{24} $$ 

&lt;p&gt;are mixtures of normal distributions.&lt;/p&gt;
&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;
&lt;p&gt;The objective that is minimized during inference is composed of two terms&lt;/p&gt;
 $$\mathcal{L}_{\text{velo}}(\theta, \phi; u, s) = \mathcal{L}_{\text{elbo}}(\theta, \phi; u, s) + \lambda \mathcal{L}_{\text{switch}}(\theta; u, s), \tag{25} $$ 

&lt;p&gt;where  $\mathcal{L}_{\text{elbo}}$ 
 is the negative evidence lower bound of  $\log p_\theta(u, s)$ 
 and  $\mathcal{L}_{\text{switch}}$ 
 is an additional penalty that regularizes the location of the transcriptional switch in the phase portrait. In more detail,&lt;/p&gt;
&lt;p&gt; $$\mathcal{L}_{\text{elbo}}(\theta, \phi; u, s) = \sum_n - \mathbb{E}_{q_\phi(z_n, \pi_n | u_n, s_n)} [\log p_\theta(u_n, s_n | z_n, \pi_n)]$$ 

 $$+ \text{KL} (q_\phi(z_n | u_n, s_n) \| p(z))$$ 

 $$+ \mathbb{E}_{q_\phi(z_n | u_n, s_n)} \left[\sum_g \text{KL} (q_\phi(\pi_{ng} | z_n) \| p(\pi_{ng}))\right], \tag{26}$$ 
&lt;/p&gt;
 $$\phantom{\mathcal{L}_{\text{elbo}}(\theta, \phi; u, s) = \sum_n - \mathbb{E}_{q_\phi(z_n, \pi_n | u_n, s_n)} [\log p_\theta(u_n, s_n | z_n, \pi_n)]}$$ 

&lt;p&gt;which can be estimated using minibatches of data. In particular, we use randomly sampled minibatches of 256 cells for inference. For the penalty term  $\mathcal{L}_{\text{switch}}$ 
, we start by only considering cells that are above the 99th percentile of unspliced abundance for each gene. Using these cells we compute the median unspliced and spliced abundance for each gene separately. Let  $u^*$ 
 and  $s^*$ 
 be the outcome of this procedure, then&lt;/p&gt;
 $$\mathcal{L}_{\text{switch}}(\theta; u, s) = \sum_g (u_{0g3} - u_g^*)^2 + (s_{0g3} - s_g^*)^2, \tag{27}$$ 

&lt;p&gt;where  $u_{0g3}$ 
 and  $s_{0g3}$ 
 were defined as the initial conditions of the repression phase at the switch time  $t_{sg}$ 
.&lt;/p&gt;
&lt;h3 id=&#34;initialization&#34;&gt;Initialization&lt;/h3&gt;
&lt;p&gt;We initialize  $\alpha_{g1}$ 
 to be equal to the median unspliced abundance for the cells above the 99th percentile for each gene. The other global parameters, including the splicing, degradation and switch time are initialized to a constant value shared by all genes. All neural network initialization uses the default implementation in PyTorch.&lt;/p&gt;
&lt;h3 id=&#34;optimization&#34;&gt;Optimization&lt;/h3&gt;
&lt;p&gt;To optimize  $\mathcal{L}_{\text{velo}}$ 
 we use stochastic gradients along with the Adam optimizer with weight decay as implemented in PyTorch. For all experiments we use  $\lambda = 0.2$ 
 for scaling the regularization term in the loss. As a result of minibatching, veloVI&amp;rsquo;s memory usage is constant throughout training. Unless otherwise specified, all neural networks are fully connected feedforward networks that use standard activation functions such as ReLU for hidden layers and softplus or exponential for parameterizing non-negative distributional parameters.&lt;/p&gt;
&lt;h3 id=&#34;architecture&#34;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;An overview of the veloVI architecture is shown in Supplementary Fig. 9.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_parameter_initialize_n_learn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_parameter_initialize_n_learn/</guid>
      <description>&lt;h1 id=&#34;velovi-parameter-initialization-and-learning-process&#34;&gt;VeloVI Parameter Initialization and Learning Process&lt;/h1&gt;
&lt;p&gt;Illustration of the initiation and learning process for all parameters in VeloVI for our scenario of three genes (Gene A, Gene B, Gene C) in four cells (Cell 1, Cell 2, Cell 3, Cell 4).&lt;/p&gt;
&lt;p&gt;This includes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Biophysical Parameters&lt;/strong&gt; ( $\theta$ 
):  $\alpha_{g1}, \beta_g, \gamma_g, t_g^s$ 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variance Parameters&lt;/strong&gt; ( $\theta$ 
):  $\sigma_{gu}, \sigma_{gs}$ 
 (gene-specific standard deviations for unspliced and spliced RNA)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neural Network Parameters&lt;/strong&gt; ( $\phi$ 
): Weights and biases of the encoder and decoder networks.&lt;/p&gt;
&lt;h2 id=&#34;1-initial-data-and-preprocessing&#34;&gt;1. Initial Data and Preprocessing&lt;/h2&gt;
&lt;p&gt;Our simplified min-max scaled data:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Cell&lt;/th&gt;
          &lt;th&gt;Gene&lt;/th&gt;
          &lt;th&gt;Unspliced (u)&lt;/th&gt;
          &lt;th&gt;Spliced (s)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;A&lt;/td&gt;
          &lt;td&gt;0.8&lt;/td&gt;
          &lt;td&gt;0.2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;B&lt;/td&gt;
          &lt;td&gt;0.1&lt;/td&gt;
          &lt;td&gt;0.9&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;C&lt;/td&gt;
          &lt;td&gt;0.5&lt;/td&gt;
          &lt;td&gt;0.5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;A&lt;/td&gt;
          &lt;td&gt;0.9&lt;/td&gt;
          &lt;td&gt;0.1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;B&lt;/td&gt;
          &lt;td&gt;0.2&lt;/td&gt;
          &lt;td&gt;0.8&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;C&lt;/td&gt;
          &lt;td&gt;0.6&lt;/td&gt;
          &lt;td&gt;0.4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;A&lt;/td&gt;
          &lt;td&gt;0.2&lt;/td&gt;
          &lt;td&gt;0.7&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;B&lt;/td&gt;
          &lt;td&gt;0.7&lt;/td&gt;
          &lt;td&gt;0.3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;C&lt;/td&gt;
          &lt;td&gt;0.1&lt;/td&gt;
          &lt;td&gt;0.9&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;A&lt;/td&gt;
          &lt;td&gt;0.1&lt;/td&gt;
          &lt;td&gt;0.8&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;B&lt;/td&gt;
          &lt;td&gt;0.8&lt;/td&gt;
          &lt;td&gt;0.2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;C&lt;/td&gt;
          &lt;td&gt;0.2&lt;/td&gt;
          &lt;td&gt;0.8&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;2-initialization-of-all-parameters&#34;&gt;2. Initialization of All Parameters&lt;/h2&gt;
&lt;h3 id=&#34;a-biophysical-parameters-hahahugoshortcode268s5hbhb&#34;&gt;a. Biophysical Parameters ( $\theta$ 
)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; $\alpha_{g1}$ 
 (Transcription Rate for Induction):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\alpha_{A1} = 0.85$ 
 (median unspliced for top 99th percentile, e.g., Cells 1, 2 for Gene A)&lt;/li&gt;
&lt;li&gt; $\alpha_{B1} = 0.75$ 
 (median unspliced for top 99th percentile, e.g., Cells 3, 4 for Gene B)&lt;/li&gt;
&lt;li&gt; $\alpha_{C1} = 0.55$ 
 (median unspliced for top 99th percentile, e.g., Cells 1, 2 for Gene C)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; $\beta_g$ 
 (Splicing Rate):&lt;/strong&gt; Initialized to a small positive constant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\beta_A = \beta_B = \beta_C = 0.1$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; $\gamma_g$ 
 (Degradation Rate):&lt;/strong&gt; Initialized to a small positive constant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\gamma_A = \gamma_B = \gamma_C = 0.05$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; $t_g^s$ 
 (Switching Time):&lt;/strong&gt; Initialized to a constant value within  $[0, t_{\max}]$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $t_A^s = t_B^s = t_C^s = 10.0$ 
 (assuming  $t_{\max} = 20$ 
)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b-variance-parameters-hahahugoshortcode268s18hbhb&#34;&gt;b. Variance Parameters ( $\theta$ 
)&lt;/h3&gt;
&lt;p&gt;These are also part of the  $\theta$ 
 parameters learned by the model. They are gene-specific.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; $\sigma_{gu}, \sigma_{gs}$ 
 (Unspliced and Spliced Standard Deviations):&lt;/strong&gt; Typically initialized to a small, common positive constant, reflecting initial uncertainty or baseline noise.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\sigma_{Au} = \sigma_{Bu} = \sigma_{Cu} = 0.1$ 
&lt;/li&gt;
&lt;li&gt; $\sigma_{As} = \sigma_{Bs} = \sigma_{Cs} = 0.1$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note:  $c_k$ 
 is a fixed scalar, not a learnable parameter, e.g.,  $c_4 = 0.1$ 
, others  $c_k = 1.0$ 
)&lt;/p&gt;
&lt;h3 id=&#34;c-neural-network-parameters-hahahugoshortcode268s26hbhb&#34;&gt;c. Neural Network Parameters ( $\phi$ 
)&lt;/h3&gt;
&lt;p&gt;These are the weights and biases of all neural networks in the model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoder Network Weights/Biases:&lt;/strong&gt; This network takes  $(u_n, s_n)$ 
 as input and outputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parameters for  $q_\phi(z_n | u_n, s_n)$ 
 (e.g.,  $\mu_{z_n}, \log\Sigma_{z_n}$ 
 for a Gaussian).&lt;/li&gt;
&lt;li&gt;Parameters for  $q_\phi(\pi_{ng} | z_n)$ 
 (e.g., concentration parameters for a Dirichlet).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Initialization:&lt;/em&gt; Typically initialized randomly, often using methods like Xavier/Glorot or Kaiming initialization, which help with training stability. Let&amp;rsquo;s represent this as a large set of random numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decoder Network&lt;/strong&gt; ( $h_{\text{ind}}, h_{\text{rep}}$ 
) &lt;strong&gt;Weights/Biases:&lt;/strong&gt; These networks take  $z_n$ 
 as input and output the scaled latent times  $\rho_{ng}^{(1)}$ 
 and  $\rho_{ng}^{(3)}$ 
.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Initialization:&lt;/em&gt; Also randomly initialized, similar to the encoder.&lt;/p&gt;
&lt;h2 id=&#34;3-learning-process-one-iteration-of-optimization&#34;&gt;3. Learning Process (One Iteration of Optimization)&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s trace one optimization step focusing on a mini-batch of Cell 1 and Cell 3.&lt;/p&gt;
&lt;h3 id=&#34;a-forward-pass-calculate-loss-hahahugoshortcode268s35hbhb&#34;&gt;a. Forward Pass (Calculate Loss  $L_{\text{velo}}$ 
)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;For Cell 1&lt;/strong&gt; ( $u_1, s_1$ 
):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoder Inference&lt;/strong&gt; ( $q_\phi(z_1 | u_1, s_1)$ 
 and  $q_\phi(\pi_{1g} | z_1)$ 
):&lt;/p&gt;
&lt;p&gt;The encoder network (with its current  $\phi$ 
 weights/biases) takes  $(u_{1A}, s_{1A}, u_{1B}, s_{1B}, u_{1C}, s_{1C})$ 
 as input.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Output 1:&lt;/strong&gt;  $\mu_{z_1}$ 
 and  $\log\Sigma_{z_1}$ 
 (e.g., a 10-dimensional vector for  $\mu$ 
 and  $\log\Sigma$ 
).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output 2:&lt;/strong&gt; For each gene  $g$ 
, Dirichlet concentration parameters for  $\pi_{1g}$ 
 (e.g., for Gene A,  $\text{Dirichlet}(\text{conc}_{1A,1}, \text{conc}_{1A,2}, \text{conc}_{1A,3}, \text{conc}_{1A,4})$ 
).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sampling Latent Variables&lt;/strong&gt; ( $z_1^*$ 
 and  $\pi_{1g}^*$ 
, leading to  $k_{1g}$ 
 and  $t_{1g}^{(k)}$ 
):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; $z_1^*$ 
:&lt;/strong&gt; Sample  $z_1^*$ 
 using the reparameterization trick:  $z_1^* = \mu_{z_1} + \exp(0.5\log\Sigma_{z_1}) \odot \epsilon_z$ 
 (where  $\epsilon_z \sim \mathcal{N}(0, I_d)$ 
).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; $\pi_{1g}^*$ 
 and  $k_{1g}$ 
:&lt;/strong&gt; For each gene, sample  $\pi_{1g}^*$ 
 from its Dirichlet. Then, based on  $\pi_{1g}^*$ 
, a state  $k_{1g}$ 
 is determined (e.g., if  $\pi_{1A}^* = [0.7, 0.1, 0.1, 0.1]$ 
,  $k_{1A}$ 
 is likely 1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Latent Times:&lt;/strong&gt; The decoder networks ( $h_{\text{ind}}, h_{\text{rep}}$ 
), using  $z_1^*$ 
 and their current  $\phi$ 
 weights/biases, output  $\rho_{1g}^{(1)}$ 
 and  $\rho_{1g}^{(3)}$ 
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If  $k_{1g} = 1$ 
, then  $(t_1)_{1g} = \rho_{1g}^{(1)} \times t_g^s$ 
.&lt;/li&gt;
&lt;li&gt;If  $k_{1g} = 3$ 
, then  $(t_3)_{1g} = t_g^s + (t_{\max} - t_g^s)\rho_{1g}^{(3)}$ 
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Example for Cell 1, Gene A:&lt;/em&gt; Assume  $z_1^*$ 
 leads to  $k_{1A} = 1$ 
 and  $(t_1)_{1A} = 8.0$ 
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculate Predicted Abundances&lt;/strong&gt; ( $\bar{u}^{(g)}, \bar{s}^{(g)}$ 
):&lt;/p&gt;
&lt;p&gt;Using the sampled  $k_{1g}$ 
 and  $t_{1g}^{(k)}$ 
, along with the current biophysical parameters ( $\alpha_{g1}, \beta_g, \gamma_g, t_g^s$ 
), calculate  $\bar{u}^{(g)}$ 
 and  $\bar{s}^{(g)}$ 
 using the kinetic equations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example for Cell 1, Gene A:&lt;/em&gt; Using initial  $\alpha_{A1} = 0.85, \beta_A = 0.1, \gamma_A = 0.05, t_A^s = 10.0$ 
 and  $t_{1A}^{(1)} = 8.0$ 
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\bar{u}^{(A)}(8.0, 1) \approx 4.68$ 
&lt;/li&gt;
&lt;li&gt; $\bar{s}^{(A)}(8.0, 1) \approx 1.85$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Observed:  $u_{1A} = 0.8, s_{1A} = 0.2$ 
. Still a large mismatch.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculate Likelihoods&lt;/strong&gt; (using  $\sigma_{gu}, \sigma_{gs}$ 
):&lt;/p&gt;
&lt;p&gt;For each gene, compare observed  $(u_{ng}, s_{ng})$ 
 to predicted  $(\bar{u}^{(g)}, \bar{s}^{(g)})$ 
 using Normal distributions. The variance for these Normal distributions comes from the variance parameters ( $\sigma_{gu}, \sigma_{gs}$ 
) and the state-dependent scaling  $c_k$ 
.&lt;/p&gt;
&lt;p&gt;E.g., for Cell 1, Gene A ( $k=1$ 
):
 $$\text{Likelihood}_{1A} = \mathcal{N}(u_{1A} | \bar{u}^{(A)}, \sigma_{Au}^2) \times \mathcal{N}(s_{1A} | \bar{s}^{(A)}, \sigma_{As}^2)$$ 
&lt;/p&gt;
&lt;p&gt;Using initial  $\sigma_{Au} = 0.1, \sigma_{As} = 0.1$ 
:
 $\mathcal{N}(0.8 | 4.68, 0.1^2) \times \mathcal{N}(0.2 | 1.85, 0.1^2)$ 
 will yield an extremely tiny number, leading to a very large negative log-likelihood contribution.&lt;/p&gt;
&lt;p&gt;The total reconstruction term is the sum of these log-likelihoods over all genes and cells in the mini-batch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculate KL Divergence Terms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;KL for  $z_n$ 
:&lt;/strong&gt;  $\text{KL}(q_\phi(z_1 | u_1, s_1) \| p(z))$ 
. This is calculated directly from the  $\mu_{z_1}$ 
 and  $\log\Sigma_{z_1}$ 
 outputs of the encoder network. This term penalizes deviation from a standard normal prior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KL for  $\pi_{ng}$ 
:&lt;/strong&gt;  $\mathbb{E}_{q_\phi(z_1 | u_1, s_1)}[\sum_g \text{KL}(q_\phi(\pi_{1g} | z_1) \| p(\pi_{1g}))]$ 
. This is approximated using  $z_1^*$ 
. It penalizes deviation of state probabilities from a uniform prior.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Calculate Switching Time Penalty&lt;/strong&gt; ( $L_{\text{switch}}$ 
):&lt;/p&gt;
&lt;p&gt;This term depends on biophysical parameters ( $\alpha_{g1}, \beta_g, \gamma_g, t_g^s$ 
) as it compares the model&amp;rsquo;s steady-state predictions at  $t_g^s$ 
 to the empirically derived switch points.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example for Gene A:&lt;/em&gt; Initial  $u_{A3}^0 = \alpha_{A1}/\beta_A = 0.85/0.1 = 8.5$ 
. If  $u_A^* = 0.85$ 
, then  $(8.5 - 0.85)^2$ 
 is a large penalty.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total Loss&lt;/strong&gt; ( $L_{\text{velo}}$ 
): Sum all these terms (negative ELBO components + switch penalty) for Cell 1 and Cell 3. This will be a large positive number due to poor initial fit.&lt;/p&gt;
&lt;h3 id=&#34;b-backward-pass-backpropagation-to-compute-gradients&#34;&gt;b. Backward Pass (Backpropagation to Compute Gradients)&lt;/h3&gt;
&lt;p&gt;Backpropagation efficiently computes  $\frac{\partial L_{\text{velo}}}{\partial \text{parameter}}$ 
 for every single parameter in the model ( $\theta$ 
 and  $\phi$ 
).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Start from the Loss:&lt;/strong&gt; The process begins with  $\frac{\partial L_{\text{velo}}}{\partial L_{\text{velo}}} = 1$ 
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradients through Likelihoods to Predicted Means and Variances:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gradients flow from  $L_{\text{velo}}$ 
 back through the log-likelihood terms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\frac{\partial L_{\text{velo}}}{\partial \bar{u}^{(g)}}, \frac{\partial L_{\text{velo}}}{\partial \bar{s}^{(g)}}$ 
 (how much changing predictions affects loss).&lt;/li&gt;
&lt;li&gt;Crucially, gradients also flow to the variance parameters:  $\frac{\partial L_{\text{velo}}}{\partial \sigma_{gu}}, \frac{\partial L_{\text{velo}}}{\partial \sigma_{gs}}$ 
. If the current  $\sigma_g$ 
 values make the likelihood too sharp (if observed is far from predicted) or too flat (if observed is very close to predicted but  $\sigma_g$ 
 is huge), these gradients will indicate how to adjust  $\sigma_g$ 
 to better fit the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gradients to Biophysical Parameters&lt;/strong&gt; ( $\alpha_{g1}, \beta_g, \gamma_g, t_g^s$ 
):&lt;/p&gt;
&lt;p&gt;From  $\frac{\partial L_{\text{velo}}}{\partial \bar{u}^{(g)}}, \frac{\partial L_{\text{velo}}}{\partial \bar{s}^{(g)}}$ 
, gradients propagate back through the kinetic equations (Eq. 3, 4, 9, 10, etc.) to  $\alpha_{g1}, \beta_g, \gamma_g$ 
.&lt;/p&gt;
&lt;p&gt;The  $L_{\text{switch}}$ 
 term also provides direct gradients to  $\alpha_{g1}, \beta_g, \gamma_g, t_g^s$ 
 as it explicitly depends on them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;  $\frac{\partial L_{\text{velo}}}{\partial \alpha_{A1}}$ 
 will be a large positive value, indicating  $\alpha_{A1}$ 
 needs to decrease to reduce the high  $\bar{u}^{(A)}$ 
 prediction for Cell 1, Gene A.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradients to Latent Times&lt;/strong&gt; ( $t_{ng}^{(k)}$ 
):&lt;/p&gt;
&lt;p&gt;Gradients from  $\bar{u}^{(g)}, \bar{s}^{(g)}$ 
 also flow back to the latent times  $(t_1)_{ng}$ 
 and  $(t_3)_{ng}$ 
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradients to Decoder Network Parameters&lt;/strong&gt; ( $\phi$ 
):&lt;/p&gt;
&lt;p&gt;From the latent times, gradients flow back through the decoder networks ( $h_{\text{ind}}, h_{\text{rep}}$ 
) to update their internal weights and biases (part of  $\phi$ 
). This teaches the decoder how to map  $z_n^*$ 
 to meaningful latent times that best fit the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradients to Sampled Latent Variable&lt;/strong&gt; ( $z_n^*$ 
):&lt;/p&gt;
&lt;p&gt;Gradients from the decoder (and from the  $\text{KL}(q_\phi(\pi_{ng} | z_n) \| p(\pi_{ng}))$ 
 term) flow back to  $z_n^*$ 
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradients to Encoder Network Outputs&lt;/strong&gt; ( $\mu_{z_n}, \log\Sigma_{z_n}$ 
):&lt;/p&gt;
&lt;p&gt;This is where the reparameterization trick is vital. The gradients from  $z_n^*$ 
 are propagated back to  $\mu_{z_n}$ 
 and  $\log\Sigma_{z_n}$ 
 (the parameters defining  $q_\phi(z_n | u_n, s_n)$ 
).&lt;/p&gt;
 $$\frac{\partial L_{\text{velo}}}{\partial \mu_{z_n}} = \frac{\partial L_{\text{velo}}}{\partial z_n^*} \times 1$$ 

 $$\frac{\partial L_{\text{velo}}}{\partial \log\Sigma_{z_n}} = \frac{\partial L_{\text{velo}}}{\partial z_n^*} \times \frac{\partial z_n^*}{\partial \log\Sigma_{z_n}} = \frac{\partial L_{\text{velo}}}{\partial z_n^*} \times 0.5 \times \exp(0.5\log\Sigma_{z_n}) \times \epsilon_z$$ 

&lt;p&gt;Additionally, the  $\text{KL}(q_\phi(z_n | u_n, s_n) \| p(z))$ 
 term directly provides gradients to  $\mu_{z_n}$ 
 and  $\log\Sigma_{z_n}$ 
, pulling them towards 0 and  $I_d$ 
 respectively.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradients to Encoder Network Parameters&lt;/strong&gt; ( $\phi$ 
):&lt;/p&gt;
&lt;p&gt;Finally, the gradients for  $\mu_{z_n}, \log\Sigma_{z_n}$ 
 (and the Dirichlet parameters for  $\pi_{ng}$ 
) flow back through the encoder neural network to update its internal weights and biases (part of  $\phi$ 
). This teaches the encoder how to map raw  $(u_n, s_n)$ 
 data to a latent space ( $z_n$ 
) and state probabilities ( $\pi_{ng}$ 
) that are useful for modeling.&lt;/p&gt;
&lt;h3 id=&#34;c-parameter-update&#34;&gt;c. Parameter Update&lt;/h3&gt;
&lt;p&gt;All computed gradients for the mini-batch are summed.
The optimizer (Adam) updates all parameters using the learning rate:  $\text{Parameter}_{\text{new}} = \text{Parameter}_{\text{old}} - \text{learning\_rate} \times \frac{\partial L_{\text{velo}}}{\partial \text{Parameter}}$ 
&lt;/p&gt;
&lt;h2 id=&#34;4-conceptual-evolution-of-parameters-over-training&#34;&gt;4. Conceptual Evolution of Parameters Over Training&lt;/h2&gt;
&lt;p&gt;This single iteration is just one small step. The entire process repeats for many mini-batches and epochs (hundreds to thousands of times). Over time, all parameters will adapt:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Biophysical Parameters&lt;/strong&gt; ( $\alpha, \beta, \gamma, t_s$ 
): Will converge to gene-specific values that accurately describe the transcription, splicing, degradation, and switching kinetics, fitting the observed data and satisfying the switch point penalty.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; $\alpha_{A1}$ 
 will likely decrease from 0.85, as it was overpredicting.&lt;/li&gt;
&lt;li&gt; $\beta_A, \gamma_A$ 
 will adjust to shape the kinetic curves.&lt;/li&gt;
&lt;li&gt; $t_A^s$ 
 will shift so that  $\bar{u}^{(A)}(t_A^s, k=2)$ 
 and  $\bar{s}^{(A)}(t_A^s, k=2)$ 
 match  $u_A^*$ 
 and  $s_A^*$ 
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Variance Parameters&lt;/strong&gt; ( $\sigma_{gu}, \sigma_{gs}$ 
): Will adjust to reflect the appropriate level of noise and variability for each gene. They will likely increase initially from 0.1 because current predictions are very far off, so a larger variance would lead to a higher (less negative) likelihood. As the predictions improve, they might stabilize at values reflecting the true biological and technical noise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neural Network Parameters&lt;/strong&gt; ( $\phi$ 
 - Encoder/Decoder weights/biases):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encoder:&lt;/strong&gt; Learns to map observed  $(u_n, s_n)$ 
 data to a meaningful latent space ( $z_n$ 
) and accurate state probabilities ( $\pi_{ng}$ 
), effectively compressing the high-dimensional data into low-dimensional biological insights. It is constrained by the KL terms to avoid overfitting and ensure a regularized latent space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decoder:&lt;/strong&gt; Learns to map the latent variable  $z_n$ 
 to specific latent times that, in combination with the biophysical parameters, accurately reconstruct the observed RNA dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-calculate-kl-divergence-terms-during-learning&#34;&gt;5. Calculate KL Divergence Terms During Learning&lt;/h2&gt;
&lt;p&gt;KL divergence is a measure of how one probability distribution diverges from a second, expected probability distribution. In VAEs, it&amp;rsquo;s used as a regularization term to keep the learned approximate posterior distributions close to simple, predefined prior distributions.&lt;/p&gt;
&lt;h3 id=&#34;1-kl-for-hahahugoshortcode268s171hbhb-hahahugoshortcode268s172hbhb&#34;&gt;1. KL for $z_n$
: $\text{KL}(q_\phi(z_1 \mid u_1, s_1) \| p(z))$
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;What it represents:&lt;/strong&gt; This term measures the divergence between the approximate posterior distribution for the latent variable $z_n$
 (which is learned by your encoder network) and its prior distribution $p(z)$
.&lt;/p&gt;
&lt;h4 id=&#34;components&#34;&gt;Components:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;$q_\phi(z_1 \mid u_1, s_1)$
 (Approximate Posterior):&lt;/strong&gt; This is the distribution that your encoder neural network outputs for cell 1&amp;rsquo;s latent representation. As previously discussed, the encoder takes the observed unspliced and spliced RNA counts $(u_1, s_1)$
 and produces the parameters (mean $\mu_{z_1}$
 and log-variance $\log\Sigma_{z_1}$
) of this distribution. It&amp;rsquo;s typically a Gaussian distribution, so $q_\phi(z_1 \mid u_1, s_1) = \mathcal{N}(\mu_{z_1}, \Sigma_{z_1})$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$p(z)$
 (Prior Distribution):&lt;/strong&gt; This is the simple, assumed prior distribution for the latent variable $z$
. In VAEs, it&amp;rsquo;s almost universally chosen to be a standard normal distribution: $p(z) = \mathcal{N}(0, I_d)$
, where $0$
 is the zero vector and $I_d$
 is the identity matrix (meaning a mean of zero and unit variance for each dimension, with no covariance).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Calculated directly from $\mu_{z_1}$
 and $\log\Sigma_{z_1}$
 outputs&amp;rdquo;:&lt;/strong&gt; For two Gaussian distributions, the KL divergence has a well-known analytical (closed-form) solution. You don&amp;rsquo;t need to sample to calculate it; you just plug in the means and variances of the two Gaussians. For $q(z) = \mathcal{N}(\mu, \Sigma)$
 and $p(z) = \mathcal{N}(0, I)$
, the KL divergence is:&lt;/p&gt;

$$
\text{KL}(\mathcal{N}(\mu, \Sigma) \| \mathcal{N}(0, I)) = \frac{1}{2} \left( \text{tr}(\Sigma) + \mu^T\mu - \log(\det(\Sigma)) - d \right) \quad (1)
$$


&lt;p&gt;where $d$
 is the dimensionality of $z$
. This makes it very efficient to compute.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Penalizes deviation from a standard normal prior&amp;rdquo;:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The goal of this term is to ensure that the latent space learned by the encoder is well-behaved and regularized.&lt;/li&gt;
&lt;li&gt;Without this term, the encoder could learn to map inputs to arbitrary regions of the latent space to perfectly reconstruct them, leading to a disorganized latent space where points are not clustered meaningfully and sampling new data (by sampling from $p(z)$
 and passing through the decoder) would be ineffective.&lt;/li&gt;
&lt;li&gt;By forcing $q_\phi(z_n \mid u_n, s_n)$
 to be similar to a standard normal distribution, the model encourages the latent representations of different cells to be compactly distributed around the origin. This helps with generalization and ensures that the latent space is &amp;ldquo;interpretable&amp;rdquo; or at least traversable for generating new samples.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-hahahugoshortcode268s194hbhb-hahahugoshortcode268s195hbhb&#34;&gt;2. $\pi_{ng}$
: $E_{q_\phi(z_1 \mid u_1, s_1)}[\sum_g \text{KL}(q_\phi(\pi_{1g} \mid z_1) \| p(\pi_{1g}))]$
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;What it represents:&lt;/strong&gt; This term measures the divergence between the approximate posterior distribution for the gene kinetic state probabilities $\pi_{ng}$
 and its prior distribution $p(\pi_{ng})$
. It&amp;rsquo;s an expectation over the uncertainty in $z_n$
.&lt;/p&gt;
&lt;h4 id=&#34;components-1&#34;&gt;Components:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;$q_\phi(\pi_{1g} \mid z_1)$
 (Approximate Posterior):&lt;/strong&gt; This is the distribution that your encoder network outputs for the kinetic state probabilities of gene $g$
 in cell 1, conditioned on the latent variable $z_1$
. As previously discussed, the encoder (or a part of it) takes $z_1$
 as input and produces the concentration parameters for this Dirichlet distribution. It is typically a Dirichlet distribution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$p(\pi_{1g})$
 (Prior Distribution):&lt;/strong&gt; This is the prior you specified in Equation (14): $p(\pi_{1g}) = \text{Dirichlet}(0.25, 0.25, 0.25, 0.25)$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Approximated using $z_1^*$
&amp;rdquo;:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notice the expectation $E_{q_\phi(z_1 \mid u_1, s_1)}[\ldots]$
. This means we need to average the KL divergence for $\pi_{ng}$
 over all possible values of $z_1$
, weighted by their probability under $q_\phi(z_1 \mid u_1, s_1)$
.&lt;/li&gt;
&lt;li&gt;In practice, this expectation is approximated using a single sample $z_1^*$
 drawn from $q_\phi(z_1 \mid u_1, s_1)$
 (using the reparameterization trick). So, for each training step, you calculate $\text{KL}(q_\phi(\pi_{1g} \mid z_1^*) \| p(\pi_{1g}))$
 where $z_1^*$
 is the specific sample used in that forward pass. Summing this over many mini-batches and epochs effectively approximates the expectation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Penalizes deviation of state probabilities from a uniform prior&amp;rdquo;:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Similar to the $z_n$
 KL term, this term regularizes the inferred kinetic state probabilities.&lt;/li&gt;
&lt;li&gt;By pushing $q_\phi(\pi_{ng} \mid z_n)$
 towards $\text{Dirichlet}(0.25, \ldots, 0.25)$
, it reinforces the prior belief that each gene in each cell is highly likely to be predominantly in one specific kinetic state. This prevents the model from assigning fuzzy, evenly spread probabilities across all states unless the data strongly supports it. It encourages a more decisive assignment of kinetic states.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kl-divergence-between-dirichlet-distributions&#34;&gt;KL Divergence Between Dirichlet Distributions&lt;/h4&gt;
&lt;p&gt;The term $\text{KL}(q_\phi(\pi_{1g} \mid z_1) \| p(\pi_{1g}))]$
 above is specific case of the KL divergence between two Dirichlet distributions.&lt;/p&gt;
&lt;p&gt;Generally, the KL divergence between two Dirichlet distributions, $P \sim \text{Dir}(\alpha_1)$
 and $Q \sim \text{Dir}(\alpha_2)$
, both defined over $K$
 categories, has a known closed-form solution.&lt;/p&gt;
&lt;p&gt;Let:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P$
 be your approximate posterior distribution, $q_\phi(\pi_{1g} \mid z_1^*)$
, with concentration parameters $\alpha_q = (\alpha_{q,1}, \ldots, \alpha_{q,K})$
. These are the parameters output by your encoder network (or a part of it, conditioned on $z_1^*$
).&lt;/li&gt;
&lt;li&gt;$Q$
 be your prior distribution, $p(\pi_{1g})$
, with concentration parameters $\alpha_p = (\alpha_{p,1}, \ldots, \alpha_{p,K})$
. In your VeloVI example, this is $(0.25, 0.25, 0.25, 0.25)$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The KL divergence $\text{KL}(P \| Q)$
 is given by:&lt;/p&gt;

$$
\text{KL}(P \| Q) = \log \frac{\Gamma\left(\sum_{i=1}^K \alpha_{p,i}\right)}{\Gamma\left(\sum_{i=1}^K \alpha_{q,i}\right)} + \sum_{i=1}^K \left[\log\left(\frac{\Gamma(\alpha_{q,i})}{\Gamma(\alpha_{p,i})}\right) + (\alpha_{q,i} - \alpha_{p,i})\left(\psi(\alpha_{q,i}) - \psi\left(\sum_{j=1}^K \alpha_{q,j}\right)\right)\right] \quad (2)
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$K$
 is the number of categories (in your case, 4 kinetic states).&lt;/li&gt;
&lt;li&gt;$\Gamma(\cdot)$
 is the Gamma function. The Gamma function is a generalization of the factorial function to real and complex numbers. For positive integers $n$
, $\Gamma(n) = (n-1)!$
. Most numerical libraries (like NumPy, SciPy, or PyTorch&amp;rsquo;s &lt;code&gt;torch.lgamma&lt;/code&gt; which computes $\log(\Gamma(x))$
 for numerical stability) have implementations for this.&lt;/li&gt;
&lt;li&gt;$\psi(\cdot)$
 is the digamma function, which is the first derivative of the logarithm of the Gamma function: $\psi(x) = \frac{d}{dx}\log\Gamma(x) = \frac{\Gamma&#39;(x)}{\Gamma(x)}$
. This function is also commonly available in numerical libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;breaking-down-the-formula-terms&#34;&gt;Breaking Down the Formula Terms&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s break down the formula terms and why they are there:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$\log\left(\frac{\Gamma\left(\sum_{i=1}^K \alpha_{p,i}\right)}{\Gamma\left(\sum_{i=1}^K \alpha_{q,i}\right)}\right)$
:&lt;/strong&gt; This term relates to the normalization constants of the two Dirichlet distributions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$\sum_{i=1}^K \log\left(\frac{\Gamma(\alpha_{q,i})}{\Gamma(\alpha_{p,i})}\right)$
:&lt;/strong&gt; This part sums the differences in the logarithm of the Gamma functions for each individual concentration parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$\sum_{i=1}^K (\alpha_{q,i} - \alpha_{p,i})\left(\psi(\alpha_{q,i}) - \psi\left(\sum_{j=1}^K \alpha_{q,j}\right)\right)$
:&lt;/strong&gt; This is the most complex part and involves the digamma function. The term $\psi(\alpha_{q,i}) - \psi\left(\sum_{j=1}^K \alpha_{q,j}\right)$
 is the expected value of $\log(x_i)$
 when $x \sim \text{Dir}(\alpha_q)$
. This term essentially measures the difference in the expected log-probabilities of the categories between the two distributions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;practical-implementation-notes&#34;&gt;Practical Implementation Notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Log-Gamma Function:&lt;/strong&gt; When implementing this, it&amp;rsquo;s generally more numerically stable to work with the logarithm of the Gamma function (&lt;code&gt;torch.lgamma&lt;/code&gt; in PyTorch, &lt;code&gt;scipy.special.gammaln&lt;/code&gt; in SciPy) rather than the Gamma function itself, to avoid potential overflow/underflow issues with very large or very small numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Digamma Function:&lt;/strong&gt; Similarly, use the digamma function directly (&lt;code&gt;torch.digamma&lt;/code&gt; in PyTorch, &lt;code&gt;scipy.special.digamma&lt;/code&gt; in SciPy).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automatic Differentiation:&lt;/strong&gt; In deep learning frameworks like PyTorch or TensorFlow, you would define this formula using their tensor operations. The framework&amp;rsquo;s automatic differentiation engine would then handle the backward pass to compute gradients with respect to $\alpha_{q,i}$
 (which are outputs of your encoder network).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_posterior_predictive_distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_posterior_predictive_distribution/</guid>
      <description>&lt;h1 id=&#34;velovi-posterior-predictive-distribution-theory-and-numerical-example&#34;&gt;VeloVI Posterior Predictive Distribution: Theory and Numerical Example&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Equation (28) describes the concept of a posterior predictive distribution for the unspliced abundance ($u_n^*$
) of a cell $n$
 in the VeloVI model. It&amp;rsquo;s a powerful idea that allows us to understand what new, unobserved data would look like, given our current model and the observed data.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-components&#34;&gt;Understanding the Components&lt;/h2&gt;
&lt;h3 id=&#34;unobserved-random-variables&#34;&gt;Unobserved Random Variables&lt;/h3&gt;
&lt;p&gt;$u_n^*$
 and $s_n^*$
 are unobserved random variables representing posterior predictive values of unspliced and spliced abundances for cell $n$
.&lt;/p&gt;
&lt;p&gt;This means we&amp;rsquo;re not talking about the actual observed $u_n, s_n$
 that we fed into the model. Instead, we&amp;rsquo;re thinking about hypothetical, new (unseen) unspliced and spliced RNA counts for this same cell $n$
, assuming its underlying biological state (represented by $z_n$
 and $\pi_n$
) is consistent with what we observed.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Posterior predictive&amp;rdquo; means we&amp;rsquo;re predicting after having observed data ($u_n, s_n$
) and after having inferred the likely latent states ($z_n, \pi_n$
) for that data.&lt;/p&gt;
&lt;h3 id=&#34;the-posterior-predictive-distribution&#34;&gt;The Posterior Predictive Distribution&lt;/h3&gt;
&lt;p&gt;The main equation we want to calculate is:&lt;/p&gt;

$$
p(u_n^* \mid u_n, s_n) = \int p_\theta(u_n^* \mid z_n, \pi_n) q_\phi(z_n, \pi_n \mid u_n, s_n) d\pi_n dz_n \tag{28}
$$


&lt;p&gt;This is what we want to calculate. It&amp;rsquo;s the probability of observing a new unspliced count $u_n^*$
, given the original observed counts $u_n$
 and $s_n$
 for cell $n$
.&lt;/p&gt;
&lt;p&gt;It essentially answers: &amp;ldquo;If I were to measure cell $n$
 again, what kind of unspliced count would I expect to see, given what I already know about it?&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;the-integral-marginalization&#34;&gt;The Integral (Marginalization)&lt;/h3&gt;
&lt;p&gt;The integral sign $\int \ldots d\pi_n dz_n$
 means we are marginalizing out (summing over all possible values of) the latent variables $z_n$
 and $\pi_n$
.&lt;/p&gt;
&lt;p&gt;Why? Because $u_n^*$
 doesn&amp;rsquo;t directly depend on $u_n, s_n$
. Instead, $u_n^*$
 depends on the cell&amp;rsquo;s underlying biological state ($z_n, \pi_n$
), which we inferred from $u_n, s_n$
. To get the total probability of $u_n^*$
, we need to consider all possible values of $z_n$
 and $\pi_n$
 that could have led to the observed $u_n, s_n$
, weighted by how likely they are.&lt;/p&gt;
&lt;h3 id=&#34;the-generative-model--decoder&#34;&gt;The Generative Model / Decoder&lt;/h3&gt;
&lt;p&gt;$p_\theta(u_n^* \mid z_n, \pi_n)$
 (The Generative Model / Decoder):&lt;/p&gt;
&lt;p&gt;This term is part of the decoder or generative model of VeloVI. It describes the probability of generating an unspliced count $u_n^*$
, given specific values of the latent variable $z_n$
 and the kinetic state probabilities $\pi_n$
, and using the biophysical parameters $\theta$
 (like $\alpha, \beta, \gamma$
) that govern the RNA dynamics.&lt;/p&gt;
&lt;p&gt;In VeloVI, $z_n$
 helps determine the latent time, and $\pi_n$
 determines the kinetic state (e.g., induction, repression). These then feed into the kinetic equations (which use $\theta$
) to predict the mean expected abundance $\bar{u}^{(g)}$
. $p_\theta(u_n^* \mid z_n, \pi_n)$
 would then be a distribution (like a Normal distribution) centered around that predicted mean, with variance $\sigma_{gu}$
.&lt;/p&gt;
&lt;h3 id=&#34;the-approximate-posterior--encoder&#34;&gt;The Approximate Posterior / Encoder&lt;/h3&gt;
&lt;p&gt;$q_\phi(z_n, \pi_n \mid u_n, s_n)$
 (The Approximate Posterior / Encoder):&lt;/p&gt;
&lt;p&gt;This is the approximate posterior distribution provided by the encoder network. It represents VeloVI&amp;rsquo;s learned understanding of the probability of a cell having latent state ($z_n, \pi_n$
), given its observed unspliced and spliced counts ($u_n, s_n$
).&lt;/p&gt;
&lt;p&gt;This is the distribution from which we draw samples ($z_n^*, \pi_n^*$
) during training. It&amp;rsquo;s parameterized by the neural network parameters $\phi$
.&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together-the-intuition&#34;&gt;Putting it All Together: The Intuition&lt;/h2&gt;
&lt;p&gt;Equation (28) essentially says:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;To predict a new, unobserved unspliced count ($u_n^*$
) for a cell ($n$
) that we&amp;rsquo;ve already measured ($u_n, s_n$
):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Consider all possible underlying biological states ($z_n, \pi_n$
) that could explain the observed data ($u_n, s_n$
). The encoder ($q_\phi$
) tells us how likely each of these states is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each of these possible states, use the generative model ($p_\theta$
) to predict what unspliced count ($u_n^*$
) would be produced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sum up these predictions, weighted by how likely each underlying state is.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;why-is-this-important&#34;&gt;Why is this Important?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Model Evaluation&lt;/strong&gt;: It allows you to check if your model makes reasonable predictions for new data. If the predicted $u_n^*$
 looks very different from the original $u_n$
, it suggests a problem with your model&amp;rsquo;s fit or assumptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Missing Data Imputation (conceptual)&lt;/strong&gt;: While not explicitly used for imputation in VeloVI&amp;rsquo;s core, posterior predictive distributions are the foundation for imputing missing data or generating synthetic data that resembles the observed data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Uncertainty Quantification&lt;/strong&gt;: The posterior predictive distribution gives you not just a single predicted value, but a full distribution, allowing you to quantify the uncertainty in your predictions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;monte-carlo-approximation&#34;&gt;Monte Carlo Approximation&lt;/h2&gt;
&lt;p&gt;In practice, this integral is usually intractable (cannot be solved analytically). So, in VAEs, it&amp;rsquo;s often approximated using Monte Carlo sampling:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Draw many samples of ($z_n, \pi_n$
) from the approximate posterior $q_\phi(z_n, \pi_n \mid u_n, s_n)$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each sample, draw a new $u_n^*$
 from $p_\theta(u_n^* \mid z_n, \pi_n)$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The collection of these $u_n^*$
 samples forms an empirical approximation of the posterior predictive distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;numerical-example&#34;&gt;Numerical Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s calculate (or more accurately, approximate) Equation (28) using numeric examples. We&amp;rsquo;ll use our scenario of Cell 1 and Gene A for the numeric example.&lt;/p&gt;
&lt;h3 id=&#34;our-goal&#34;&gt;Our Goal&lt;/h3&gt;
&lt;p&gt;Generate samples of $u_{1A}^*$
 to approximate the distribution $p(u_{1A}^* \mid u_{1A}, s_{1A})$
.&lt;/p&gt;
&lt;h3 id=&#34;what-we-assume-we-have&#34;&gt;What We Assume We Have&lt;/h3&gt;
&lt;p&gt;After VeloVI has been trained and its parameters $\theta$
 and $\phi$
 have converged:&lt;/p&gt;
&lt;h4 id=&#34;observed-data-for-cell-1-gene-a&#34;&gt;Observed Data for Cell 1, Gene A:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;$u_{1A} = 0.8$
&lt;/li&gt;
&lt;li&gt;$s_{1A} = 0.2$
 (These are the inputs to our encoder)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;learned-biophysical-parameters-hahahugoshortcode269s67hbhb-for-gene-a&#34;&gt;Learned Biophysical Parameters ($\theta$
) for Gene A:&lt;/h4&gt;
&lt;p&gt;(These are fixed values after training)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transcription Rate ($\alpha_{A1}$
) = 1.2&lt;/li&gt;
&lt;li&gt;Splicing Rate ($\beta_A$
) = 0.2&lt;/li&gt;
&lt;li&gt;Degradation Rate ($\gamma_A$
) = 0.1&lt;/li&gt;
&lt;li&gt;Switching Time ($t_A^s$
) = 8.0&lt;/li&gt;
&lt;li&gt;Unspliced Std. Dev. ($\sigma_{Au}$
) = 0.15&lt;/li&gt;
&lt;li&gt;Spliced Std. Dev. ($\sigma_{As}$
) = 0.15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(For simplicity, let&amp;rsquo;s assume all state scaling factors $c_k = 1$
 for this example, though VeloVI uses a specific $c_4 = 0.1$
)&lt;/p&gt;
&lt;h4 id=&#34;learned-neural-network-parameters-hahahugoshortcode269s76hbhb-for-the-encoder-and-decoder&#34;&gt;Learned Neural Network Parameters ($\phi$
) for the Encoder and Decoder:&lt;/h4&gt;
&lt;p&gt;(These are the weights and biases of the networks. We don&amp;rsquo;t see the numbers directly, but we know their effect on the outputs.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoder&amp;rsquo;s Output for $z_1$
 (given $u_1, s_1$
)&lt;/strong&gt;: This defines the approximate posterior $q_\phi(z_1 \mid u_1, s_1)$
, which is a Gaussian.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mean ($\mu_{z_1}$
) = (0.5, -0.3)&lt;/li&gt;
&lt;li&gt;Log-Variance ($\log\Sigma_{z_1}$
) = (-0.5, -0.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This implies $\Sigma_{z_1} = \text{diag}(e^{-0.5}, e^{-0.5}) \approx \text{diag}(0.6065, 0.6065)$
 (Let&amp;rsquo;s assume $z_n$
 is 2-dimensional for this example)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoder&amp;rsquo;s Output for $\pi_{1A}$
 (given $z_1$
)&lt;/strong&gt;: This defines $q_\phi(\pi_{1A} \mid z_1)$
, which is a Dirichlet.&lt;/p&gt;
&lt;p&gt;Example concentration parameters (output for a specific $z_1$
): $\text{conc}_{1A} = (5.0, 0.1, 0.2, 0.1)$
 (This strongly favors State 1: Induction)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decoder&amp;rsquo;s Output for $\rho_{1A}^{(k)}$
 (given $z_1$
)&lt;/strong&gt;: These networks take $z_1$
 and output scaled latent times.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example output for a specific $z_1$
: $\rho_{1A}^{(1)} = 0.5$
 (for state 1)&lt;/li&gt;
&lt;li&gt;Example output for a specific $z_1$
: $\rho_{1A}^{(3)} = 0.8$
 (for state 3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-monte-carlo-approximation-process-step-by-step-numerical-example&#34;&gt;The Monte Carlo Approximation Process (Step-by-Step Numerical Example)&lt;/h3&gt;
&lt;p&gt;We will repeat the following steps many times (say, $M = 1000$
 times) to get enough samples of $u_{1A}^*$
. For this explanation, we&amp;rsquo;ll trace just one single sample to illustrate the process.&lt;/p&gt;
&lt;h4 id=&#34;iteration-1-of-m-sample-1&#34;&gt;Iteration 1 of M (Sample #1):&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Sample latent variables ($z_1^*, \pi_{1A}^*$
, and determine $k_{1A}$
) from the approximate posterior $q_\phi(z_1, \pi_{1A} \mid u_{1A}, s_{1A})$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1a. Sample $z_1^*$
 from $q_\phi(z_1 \mid u_{1A}, s_{1A})$
 using the reparameterization trick:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recall $q_\phi(z_1 \mid u_{1A}, s_{1A})$
 is $\mathcal{N}(\mu_{z_1}, \Sigma_{z_1})$
, where $\mu_{z_1} = (0.5, -0.3)$
 and $\Sigma_{z_1} = \text{diag}(0.6065, 0.6065)$
.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Draw a random standard normal noise vector $\epsilon_z$
: Let $\epsilon_z = (0.2, -0.1)$
.&lt;/li&gt;
&lt;li&gt;Calculate $z_1^* = \mu_{z_1} + \sqrt{\Sigma_{z_1}} \odot \epsilon_z$
 (where $\odot$
 is element-wise multiplication):&lt;/li&gt;
&lt;/ul&gt;

$$
z_1^* = (0.5, -0.3) + (\sqrt{0.6065}, \sqrt{0.6065}) \odot (0.2, -0.1) \tag{29}
$$



$$
z_1^* = (0.5, -0.3) + (0.7788, 0.7788) \odot (0.2, -0.1) \tag{30}
$$



$$
z_1^* = (0.5, -0.3) + (0.1558, -0.0779) \tag{31}
$$



$$
z_1^* = (0.6558, -0.3779) \tag{32}
$$


&lt;p&gt;&lt;strong&gt;1b. Given $z_1^*$
, sample $\pi_{1A}^*$
 from $q_\phi(\pi_{1A} \mid z_1^*)$
:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The encoder (a specific part of it) takes this sampled $z_1^* = (0.6558, -0.3779)$
 as input and outputs the concentration parameters for $\pi_{1A}$
.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s assume for $z_1^* = (0.6558, -0.3779)$
, the encoder outputs: $\text{conc}_{1A} = (5.0, 0.1, 0.2, 0.1)$
.&lt;/li&gt;
&lt;li&gt;Sample $\pi_{1A}^*$
 from $\text{Dirichlet}(5.0, 0.1, 0.2, 0.1)$
. This is a stochastic step.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s say we get the sample: $\pi_{1A}^* = (0.95, 0.02, 0.02, 0.01)$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1c. Determine the kinetic state $k_{1A}$
 from $\pi_{1A}^*$
:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We choose the state with the highest probability. Here, 0.95 is the highest, corresponding to the first state.&lt;/li&gt;
&lt;li&gt;So, $k_{1A} = 1$
 (Induction).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Generate a new unspliced abundance $u_{1A}^*$
 from the generative model $p_\theta(u_{1A}^* \mid z_1^*, \pi_{1A}^*)$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2a. Decode $z_1^*$
 to latent time ($t_{1A}^{(k)}$
):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The decoder network (specifically, $h_{\text{ind}}$
 for Induction states) takes $z_1^* = (0.6558, -0.3779)$
 and outputs a scaled time $\rho_{1A}^{(1)}$
.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s assume the decoder outputs $\rho_{1A}^{(1)} = 0.5$
.&lt;/li&gt;
&lt;li&gt;Calculate the actual latent time: $t_{1A}^{(1)} = \rho_{1A}^{(1)} \times t_A^s = 0.5 \times 8.0 = 4.0$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2b. Calculate the predicted mean unspliced abundance $\bar{u}^{(A)}$
 using the kinetic equations and $\theta$
:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since $k_{1A} = 1$
 (Induction), we use the kinetic equation for the induction phase.&lt;/p&gt;

$$
\bar{u}^{(A)}(t=4.0, k=1) = \frac{\alpha_{A1}}{\beta_A}(1 - e^{-\beta_A t}) \tag{33}
$$



$$
\bar{u}^{(A)}(4.0, 1) = \frac{1.2}{0.2}(1 - e^{-0.2 \times 4.0}) \tag{34}
$$



$$
\bar{u}^{(A)}(4.0, 1) = 6(1 - e^{-0.8}) \tag{35}
$$



$$
\bar{u}^{(A)}(4.0, 1) = 6(1 - 0.4493) \tag{36}
$$



$$
\bar{u}^{(A)}(4.0, 1) = 6 \times 0.5507 = 3.3042 \tag{37}
$$


&lt;p&gt;&lt;strong&gt;2c. Sample $u_{1A}^*$
 from $p_\theta(u_{1A}^* \mid z_1^*, \pi_{1A}^*)$
:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This distribution is a Normal distribution: $\mathcal{N}(\text{mean} = \bar{u}^{(A)}, \text{variance} = \sigma_{Au}^2)$
.&lt;/li&gt;
&lt;li&gt;So, $u_{1A}^* \sim \mathcal{N}(3.3042, 0.15^2)$
.&lt;/li&gt;
&lt;li&gt;Draw one sample from this Normal distribution (this is again a stochastic step).&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s say we sample: $u_{1A}^* = 3.25$
. This is our first sample for the posterior predictive distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repeat-for-m-samples-conceptual&#34;&gt;Repeat for M Samples (Conceptual)&lt;/h3&gt;
&lt;p&gt;You would repeat these two main steps (Step 1 and Step 2) many times (e.g., $M = 1000$
). Each repetition would involve new random draws for $\epsilon_z$
, new Dirichlet samples for $\pi_{1A}^*$
, and new Normal samples for $u_{1A}^*$
.&lt;/p&gt;
&lt;p&gt;For instance, if we ran a second iteration, we might get:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sample #2&lt;/strong&gt;: $\epsilon_z = (-0.5, 0.3) \rightarrow z_1^* = (0.0106, -0.0663) \rightarrow \text{conc}_{1A} = (4.0, 0.3, 0.1, 0.1) \rightarrow \pi_{1A}^* = (0.90, 0.07, 0.02, 0.01) \rightarrow k_{1A} = 1 \rightarrow \rho_{1A}^{(1)} = 0.4 \rightarrow t_{1A}^{(1)} = 3.2 \rightarrow \bar{u}^{(A)} = 2.75 \rightarrow u_{1A}^* = 2.80$
&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;After $M$
 iterations, you would have a collection of $M$
 sampled $u_{1A}^*$
 values: $\{u_{1A}^{*(1)}, u_{1A}^{*(2)}, \ldots, u_{1A}^{*(M)}\}$
.&lt;/p&gt;
&lt;p&gt;This collection of samples empirically approximates the posterior predictive distribution $p(u_{1A}^* \mid u_{1A}, s_{1A})$
. You can then:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plot a histogram of these samples to visualize the distribution.&lt;/li&gt;
&lt;li&gt;Calculate the mean of these samples (e.g., $(3.25 + 2.80 + \ldots)/M$
) as your model&amp;rsquo;s best prediction for a new unspliced measurement.&lt;/li&gt;
&lt;li&gt;Calculate the standard deviation or percentiles to understand the uncertainty in the prediction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This entire process allows VeloVI to &amp;ldquo;imagine&amp;rdquo; what the unspliced counts should be, given its understanding of the cell&amp;rsquo;s underlying biological state and the learned kinetic parameters, thereby providing a powerful way to interpret its learned representations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_reparameterization_trick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_reparameterization_trick/</guid>
      <description>&lt;h1 id=&#34;the-reparameterization-trick&#34;&gt;The Reparameterization Trick&lt;/h1&gt;
&lt;p&gt;The &amp;ldquo;reparameterization trick&amp;rdquo; is fundamental to how Variational Autoencoders (VAEs) and models like VeloVI (which uses VAE principles) can be trained using gradient-based optimization methods like backpropagation.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Sampling is not differentiable&lt;/strong&gt;: If you have a random variable  $z$ 
 drawn directly from a distribution  $q(z|\mu,\Sigma)$ 
, you cannot calculate  $\frac{\partial z}{\partial \mu}$ 
 or  $\frac{\partial z}{\partial \Sigma}$ 
 in a meaningful way for backpropagation. The sampling operation itself is stochastic and doesn&amp;rsquo;t have a well-defined gradient in the traditional sense. This would break the computational graph.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Need for gradient flow&lt;/strong&gt;: However, the loss function (ELBO) depends on the sampled  $z^*$ 
, and we need to update  $\mu$ 
 and  $\Sigma$ 
 (which are outputs of the encoder neural network) to minimize this loss.&lt;/p&gt;
&lt;p&gt;The reparameterization trick solves this by separating the stochasticity from the parameters.&lt;/p&gt;
&lt;h2 id=&#34;how-the-reparameterization-trick-works-for-a-gaussian-distribution&#34;&gt;How the Reparameterization Trick Works for a Gaussian Distribution&lt;/h2&gt;
&lt;p&gt;For a Gaussian distribution  $z \sim \mathcal{N}(\mu, \Sigma)$ 
, we can reparameterize the sampling process as follows:&lt;/p&gt;
&lt;h3 id=&#34;1-sample-from-a-fixed-simple-base-distribution&#34;&gt;1. Sample from a fixed, simple base distribution&lt;/h3&gt;
&lt;p&gt;First, we sample a &amp;ldquo;noise&amp;rdquo; variable  $\epsilon$ 
 from a simple, fixed distribution, usually a standard normal distribution:&lt;/p&gt;
 $$\epsilon \sim \mathcal{N}(0, I_d)$$ 

&lt;p&gt;where  $I_d$ 
 is the identity matrix (meaning  $\epsilon$ 
 is a vector of independent standard normal random variables). This step is random, but crucially, it does not depend on any model parameters.&lt;/p&gt;
&lt;h3 id=&#34;2-deterministic-transformation&#34;&gt;2. Deterministic Transformation&lt;/h3&gt;
&lt;p&gt;Then, we deterministically transform this noise variable  $\epsilon$ 
 using the parameters  $\mu$ 
 and  $\Sigma$ 
 (or often, the standard deviation  $\sigma = \sqrt{\Sigma}$ 
, or  $\exp(0.5 \log \Sigma)$ 
 for element-wise operation) that are output by the encoder:&lt;/p&gt;
 $$z^* = \mu + \sigma \odot \epsilon$$ 

&lt;p&gt;(where  $\odot$ 
 denotes element-wise multiplication if  $z$, $\mu$, $\sigma$, and $\epsilon$ 
 are vectors).&lt;/p&gt;
&lt;h2 id=&#34;why-this-allows-gradient-flow&#34;&gt;Why this allows gradient flow&lt;/h2&gt;
&lt;p&gt;Now, let&amp;rsquo;s trace the flow for backpropagation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loss dependence on  $z^*$ 
&lt;/strong&gt;: The downstream parts of the model (decoder, kinetic equations, likelihood calculation) compute a loss based on  $z^*$ 
. So, we can compute  $\frac{\partial L}{\partial z^*}$ 
 using standard backpropagation rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chain Rule to  $\mu$ 
 and  $\sigma$ 
&lt;/strong&gt;: Since  $z^*$ 
 is now a deterministic function of  $\mu$, $\sigma$, and $\epsilon$ 
:&lt;/p&gt;
&lt;p&gt;For  $\mu$ 
: We can apply the chain rule:
 $$\frac{\partial L}{\partial \mu} = \frac{\partial L}{\partial z^*} \times \frac{\partial z^*}{\partial \mu} = \frac{\partial L}{\partial z^*} \times 1$$ 
&lt;/p&gt;
&lt;p&gt;(Since  $z^* = \mu + \sigma \odot \epsilon$ 
, the derivative of  $z^*$ 
 with respect to  $\mu$ 
 is simply 1).&lt;/p&gt;
&lt;p&gt;For  $\sigma$ 
: Similarly:
 $$\frac{\partial L}{\partial \sigma} = \frac{\partial L}{\partial z^*} \times \frac{\partial z^*}{\partial \sigma} = \frac{\partial L}{\partial z^*} \times \epsilon$$ 
&lt;/p&gt;
&lt;p&gt;(Since  $z^* = \mu + \sigma \odot \epsilon$ 
, the derivative of  $z^*$ 
 with respect to  $\sigma$ 
 is  $\epsilon$ 
).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the encoder outputs  $\log \Sigma$ 
 (log-variance) instead of  $\sigma$ 
, the chain rule would be applied one more step:
 $$\frac{\partial L}{\partial \log \Sigma} = \frac{\partial L}{\partial \sigma} \times \frac{\partial \sigma}{\partial \log \Sigma} = \frac{\partial L}{\partial \sigma} \times \frac{1}{2} \exp(0.5 \log \Sigma) = \frac{\partial L}{\partial \sigma} \times \frac{1}{2} \sigma$$ 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No Gradient to  $\epsilon$ 
&lt;/strong&gt;: Notice that  $\epsilon$ 
 is a random variable, but we do not need to compute gradients with respect to  $\epsilon$ 
 itself.  $\epsilon$ 
 is fixed once sampled, and it contributes to the gradient flow in a deterministic way (as a multiplier for  $\frac{\partial L}{\partial \sigma}$ 
).&lt;/p&gt;
&lt;h2 id=&#34;numerical-example&#34;&gt;Numerical Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use a very simplified numeric example to illustrate the gradient flow from  $z_1^*$ 
 back to  $\mu_{z_1}$ 
 and  $\Sigma_{z_1}$ 
 using the reparameterization trick.&lt;/p&gt;
&lt;p&gt;Imagine a highly simplified scenario for a single dimension of  $z_1$ 
:&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re focusing on just one dimension of  $z_1$ 
, say  $z_{1,\text{dim1}}$ 
.&lt;/p&gt;
&lt;p&gt;The encoder network for Cell 1, given its  $(u_1, s_1)$ 
 data, outputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mean&lt;/strong&gt;:  $\mu_{z_{1,\text{dim1}}} = 0.5$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Log-variance&lt;/strong&gt;:  $\log \Sigma_{z_{1,\text{dim1}}} = -1.0$ 
 (This implies  $\Sigma_{z_{1,\text{dim1}}} = e^{-1.0} \approx 0.3679$ 
)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standard deviation&lt;/strong&gt;:  $\sigma_{z_{1,\text{dim1}}} = \sqrt{e^{-1.0}} = e^{-0.5} \approx 0.6065$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We sample a noise value from a standard normal distribution:  $\epsilon_{1,\text{dim1}} = 0.8$ 
 (a single random draw).&lt;/p&gt;
&lt;h3 id=&#34;forward-pass-calculating-hahahugoshortcode270s58hbhb-and-its-contribution-to-loss&#34;&gt;Forward Pass (Calculating  $z_1^*$ 
 and its contribution to Loss)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Calculate  $z_1^*$ 
 using reparameterization&lt;/strong&gt;:
 $$z_{1,\text{dim1}}^* = \mu_{z_{1,\text{dim1}}} + \sigma_{z_{1,\text{dim1}}} \times \epsilon_{1,\text{dim1}}$$ 

 $$z_{1,\text{dim1}}^* = 0.5 + 0.6065 \times 0.8$$ 

 $$z_{1,\text{dim1}}^* = 0.5 + 0.4852 = 0.9852$$ 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downstream Computation &amp;amp; Loss&lt;/strong&gt;: This  $z_{1,\text{dim1}}^*$ 
 value (along with other dimensions of  $z_1$ 
 and other factors) goes into the decoder, kinetic equations, and ultimately contributes to the overall loss  $L_{\text{velo}}$ 
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assume we have the gradient of the loss with respect to  $z_1^*$ 
&lt;/strong&gt;: After the forward pass and computing the total loss  $L_{\text{velo}}$ 
, backpropagation would compute the gradient of the loss with respect to this sampled latent variable.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume, for simplicity, that:
 $$\frac{\partial L_{\text{velo}}}{\partial z_{1,\text{dim1}}^*} = 2.0$$ 
&lt;/p&gt;
&lt;p&gt;(This means if  $z_{1,\text{dim1}}^*$ 
 were to increase by 1 unit, the loss would increase by 2.0 units, implying we want to decrease  $z_{1,\text{dim1}}^*$ 
 to reduce loss).&lt;/p&gt;
&lt;h3 id=&#34;backward-pass-gradient-flow-to-hahahugoshortcode270s71hbhb-and-hahahugoshortcode270s72hbhb-parameters&#34;&gt;Backward Pass (Gradient Flow to  $\mu_{z_1}$ 
 and  $\Sigma_{z_1}$ 
 parameters)&lt;/h3&gt;
&lt;p&gt;Now, we use the chain rule to propagate this gradient back to  $\mu_{z_{1,\text{dim1}}}$ 
 and  $\log \Sigma_{z_{1,\text{dim1}}}$ 
.&lt;/p&gt;
&lt;h4 id=&#34;1-gradient-for-hahahugoshortcode270s75hbhb&#34;&gt;1. Gradient for  $\mu_{z_{1,\text{dim1}}}$ 
&lt;/h4&gt;
&lt;p&gt;We know  $z_{1,\text{dim1}}^* = \mu_{z_{1,\text{dim1}}} + \sigma_{z_{1,\text{dim1}}} \times \epsilon_{1,\text{dim1}}$ 
.&lt;/p&gt;
&lt;p&gt;The partial derivative of  $z_{1,\text{dim1}}^*$ 
 with respect to  $\mu_{z_{1,\text{dim1}}}$ 
 is:
 $$\frac{\partial z_{1,\text{dim1}}^*}{\partial \mu_{z_{1,\text{dim1}}}} = 1$$ 
&lt;/p&gt;
&lt;p&gt;Now, applying the chain rule:
 $$\frac{\partial L_{\text{velo}}}{\partial \mu_{z_{1,\text{dim1}}}} = \frac{\partial L_{\text{velo}}}{\partial z_{1,\text{dim1}}^*} \times \frac{\partial z_{1,\text{dim1}}^*}{\partial \mu_{z_{1,\text{dim1}}}}$$ 

 $$\frac{\partial L_{\text{velo}}}{\partial \mu_{z_{1,\text{dim1}}}} = 2.0 \times 1 = 2.0$$ 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: A positive gradient of 2.0 for  $\mu_{z_{1,\text{dim1}}}$ 
 means that increasing  $\mu_{z_{1,\text{dim1}}}$ 
 would increase the loss. Therefore, the optimizer will decrease  $\mu_{z_{1,\text{dim1}}}$ 
 in the update step.&lt;/p&gt;
&lt;h4 id=&#34;2-gradient-for-hahahugoshortcode270s85hbhb&#34;&gt;2. Gradient for  $\sigma_{z_{1,\text{dim1}}}$ 
&lt;/h4&gt;
&lt;p&gt;The partial derivative of  $z_{1,\text{dim1}}^*$ 
 with respect to  $\sigma_{z_{1,\text{dim1}}}$ 
 is:
 $$\frac{\partial z_{1,\text{dim1}}^*}{\partial \sigma_{z_{1,\text{dim1}}}} = \epsilon_{1,\text{dim1}}$$ 

 $$\frac{\partial z_{1,\text{dim1}}^*}{\partial \sigma_{z_{1,\text{dim1}}}} = 0.8$$ 
&lt;/p&gt;
&lt;p&gt;Applying the chain rule:
 $$\frac{\partial L_{\text{velo}}}{\partial \sigma_{z_{1,\text{dim1}}}} = \frac{\partial L_{\text{velo}}}{\partial z_{1,\text{dim1}}^*} \times \frac{\partial z_{1,\text{dim1}}^*}{\partial \sigma_{z_{1,\text{dim1}}}}$$ 

 $$\frac{\partial L_{\text{velo}}}{\partial \sigma_{z_{1,\text{dim1}}}} = 2.0 \times 0.8 = 1.6$$ 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: A positive gradient of 1.6 for  $\sigma_{z_{1,\text{dim1}}}$ 
 means increasing  $\sigma_{z_{1,\text{dim1}}}$ 
 would increase the loss. So, the optimizer will decrease  $\sigma_{z_{1,\text{dim1}}}$ 
.&lt;/p&gt;
&lt;h4 id=&#34;3-gradient-for-hahahugoshortcode270s95hbhb-if-encoder-outputs-log-variance&#34;&gt;3. Gradient for  $\log \Sigma_{z_{1,\text{dim1}}}$ 
 (if encoder outputs log-variance)&lt;/h4&gt;
&lt;p&gt;Often, neural networks output  $\log \Sigma$ 
 for numerical stability and to ensure the variance is positive. We need one more chain rule step:&lt;/p&gt;
&lt;p&gt;We know  $\sigma_{z_{1,\text{dim1}}} = e^{0.5 \times \log \Sigma_{z_{1,\text{dim1}}}}$ 
.&lt;/p&gt;
&lt;p&gt;The partial derivative of  $\sigma_{z_{1,\text{dim1}}}$ 
 with respect to  $\log \Sigma_{z_{1,\text{dim1}}}$ 
 is:
 $$\frac{\partial \sigma_{z_{1,\text{dim1}}}}{\partial \log \Sigma_{z_{1,\text{dim1}}}} = 0.5 \times e^{0.5 \times \log \Sigma_{z_{1,\text{dim1}}}} = 0.5 \times \sigma_{z_{1,\text{dim1}}}$$ 

 $$\frac{\partial \sigma_{z_{1,\text{dim1}}}}{\partial \log \Sigma_{z_{1,\text{dim1}}}} = 0.5 \times 0.6065 = 0.30325$$ 
&lt;/p&gt;
&lt;p&gt;Applying the chain rule:
 $$\frac{\partial L_{\text{velo}}}{\partial \log \Sigma_{z_{1,\text{dim1}}}} = \frac{\partial L_{\text{velo}}}{\partial \sigma_{z_{1,\text{dim1}}}} \times \frac{\partial \sigma_{z_{1,\text{dim1}}}}{\partial \log \Sigma_{z_{1,\text{dim1}}}}$$ 

 $$\frac{\partial L_{\text{velo}}}{\partial \log \Sigma_{z_{1,\text{dim1}}}} = 1.6 \times 0.30325 = 0.4852$$ 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: A positive gradient of 0.4852 for  $\log \Sigma_{z_{1,\text{dim1}}}$ 
 means increasing  $\log \Sigma_{z_{1,\text{dim1}}}$ 
 (and thus  $\Sigma_{z_{1,\text{dim1}}}$ 
) would increase the loss. So, the optimizer will decrease  $\log \Sigma_{z_{1,\text{dim1}}}$ 
.&lt;/p&gt;
&lt;h3 id=&#34;parameter-update-conceptual&#34;&gt;Parameter Update (Conceptual)&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s assume a learning_rate of 0.01.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;New  $\mu_{z_{1,\text{dim1}}}$ 
&lt;/strong&gt;:  $0.5 - 0.01 \times 2.0 = 0.5 - 0.02 = 0.48$ 
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New  $\log \Sigma_{z_{1,\text{dim1}}}$ 
&lt;/strong&gt;:  $-1.0 - 0.01 \times 0.4852 = -1.0 - 0.004852 = -1.004852$ 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next iteration, the encoder network&amp;rsquo;s weights and biases would be updated based on these gradients (and the gradients from all other parts of the network and all other samples in the mini-batch). When Cell 1&amp;rsquo;s data is fed through the encoder again, it will produce a new mean of 0.48 and a new log-variance of -1.004852 for this dimension of  $z_1$ 
, which should ideally lead to a lower overall loss.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/11b.velocity_velovi/velovi_uncertainty_calculation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/11b.velocity_velovi/velovi_uncertainty_calculation/</guid>
      <description>&lt;h1 id=&#34;velovi-intrinsic-uncertainty-quantification&#34;&gt;VeloVI Intrinsic Uncertainty Quantification&lt;/h1&gt;
&lt;p&gt;This document explains how VeloVI quantifies the intrinsic uncertainty in the predicted velocity for a given cell. This uncertainty reflects how consistent the model&amp;rsquo;s velocity predictions are for a cell, given the inherent variability captured by the variational posterior.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break down the concepts and the formula step-by-step:&lt;/p&gt;
&lt;h2 id=&#34;1-posterior-predictive-velocity-mean-hahahugoshortcode271s0hbhb&#34;&gt;1. Posterior Predictive Velocity Mean ($\bar{v}_n$
)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What it is:&lt;/strong&gt; $\bar{v}_n$
 is the average or mean velocity vector for cell n, taking into account the model&amp;rsquo;s uncertainty in the underlying latent variables ($z_n$
).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it&amp;rsquo;s computed (conceptual):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We repeatedly sample $z_n$
 from its approximate posterior $q_\phi(z_n | u_n, s_n)$
. Let&amp;rsquo;s say we draw L such samples: $\{z_n^{(1)}, z_n^{(2)}, \ldots, z_n^{(L)}\}$
.&lt;/p&gt;
&lt;p&gt;For each sampled $z_n^{(l)}$
:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We compute the expected velocity for every gene g in that cell, given $z_n^{(l)}$
. This involves calculating $E_{q_\phi(\pi_{ng} | z_n^{(l)})}[v^{(g)}(t(k_{ng})_{ng}, k_{ng})]$
 for each gene g. (As explained in our previous discussion, this results in a scalar for each gene g).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we put these expected gene velocities together for all G genes, we get a velocity vector sample for cell n: $v_n^{(l)} = (E_{q_\phi(\pi_{n1} | z_n^{(l)})}[v^{(1)}(\ldots)], \ldots, E_{q_\phi(\pi_{nG} | z_n^{(l)})}[v^{(G)}(\ldots)])$
.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After obtaining L such velocity vector samples, $\{v_n^{(1)}, v_n^{(2)}, \ldots, v_n^{(L)}\}$
, the posterior predictive velocity mean $\bar{v}_n$
 is simply their average:&lt;/p&gt;

$$\bar{v}_n = \frac{1}{L} \sum_{l=1}^{L} v_n^{(l)} \quad (1)$$


&lt;p&gt;This $\bar{v}_n$
 is the model&amp;rsquo;s best guess for the overall velocity vector of cell n.&lt;/p&gt;
&lt;h2 id=&#34;2-intrinsic-uncertainty-the-variance-of-cosine-similarity&#34;&gt;2. Intrinsic Uncertainty: The Variance of Cosine Similarity&lt;/h2&gt;
&lt;p&gt;The goal is to quantify how much the individual velocity samples $v_n^{(l)}$
 vary around this mean $\bar{v}_n$
. However, simply calculating the variance of the vectors themselves might be misleading, as magnitude differences could dominate. VeloVI is often interested in the direction of cellular change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cosine Similarity&lt;/strong&gt; $c(v_1, v_2)$
: This measures the angular similarity between two vectors, ranging from -1 (opposite directions) to 1 (same direction). It&amp;rsquo;s defined as:&lt;/p&gt;

$$c(v_1, v_2) = \frac{v_1 \cdot v_2}{\|v_1\| \|v_2\|} \quad (2)$$


&lt;p&gt;where $\cdot$
 is the dot product and $\|\cdot\|$
 is the Euclidean norm (magnitude) of the vector.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why Cosine Similarity for Uncertainty?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It focuses on the direction of the velocity, which is often biologically more interpretable than its exact magnitude for trajectories.&lt;/li&gt;
&lt;li&gt;It helps quantify how consistently the model predicts the direction of differentiation or change for a cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Concept:&lt;/strong&gt; The intrinsic uncertainty for cell n is computed as the variance of the cosine similarity between each velocity vector sample $v_n^{(l)}$
 and the overall mean velocity vector $\bar{v}_n$
.&lt;/p&gt;

$$\text{Intrinsic Uncertainty} = \text{Var}_{q_\phi(v_n | u_n, s_n)}[c(v_n, \bar{v}_n)] \quad (3)$$


&lt;p&gt;This means we&amp;rsquo;re looking at how spread out the cosine similarity values are. If all $v_n^{(l)}$
 point in roughly the same direction as $\bar{v}_n$
, the cosine similarities will be close to 1, and their variance will be low. If they point in wildly different directions, the cosine similarities will vary a lot, leading to high variance.&lt;/p&gt;
&lt;h2 id=&#34;3-the-formula-for-hahahugoshortcode271s25hbhb-sample-variance&#34;&gt;3. The Formula for $\hat{\sigma}_n^2$
 (Sample Variance)&lt;/h2&gt;
&lt;p&gt;The provided formula $\hat{\sigma}_n^2$
 is the standard sample variance applied to the set of scalar cosine similarity values.&lt;/p&gt;
&lt;p&gt;Let $C_l = c(v_n^{(l)}, \bar{v}_n) = \frac{v_n^{(l)} \cdot \bar{v}_n}{\|v_n^{(l)}\| \|\bar{v}_n\|}$
 be the cosine similarity for the l-th velocity sample.&lt;/p&gt;
&lt;p&gt;The formula for $\hat{\sigma}_n^2$
 is:&lt;/p&gt;

$$\hat{\sigma}_n^2 = \frac{1}{L-1} \sum_{l=1}^{L} \left(C_l - \left(\frac{1}{L} \sum_{j=1}^{L} C_j\right)\right)^2 \quad (4)$$


&lt;p&gt;Let&amp;rsquo;s break down each part of the formula:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$C_l = \frac{v_n^{(l)} \cdot \bar{v}_n}{\|v_n^{(l)}\| \|\bar{v}_n\|}$
: This is the cosine similarity between the l-th sampled velocity vector ($v_n^{(l)}$
) and the overall mean velocity vector ($\bar{v}_n$
). This value is a scalar between -1 and 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\frac{1}{L} \sum_{j=1}^{L} C_j$
: This is the mean of all L cosine similarity values. It represents the average directional alignment of the samples with the mean. Let&amp;rsquo;s call this $\bar{C}$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$(C_l - \bar{C})^2$
: This calculates the squared difference between each individual cosine similarity value ($C_l$
) and the overall mean cosine similarity ($\bar{C}$
). This measures how much each sample&amp;rsquo;s direction deviates from the average predicted direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sum_{l=1}^{L} (\ldots)^2$
: This sums up all these squared deviations across all L samples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\frac{1}{L-1}$
: This is the scaling factor for sample variance (using L-1 instead of L to provide an unbiased estimate of the population variance).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interpretation-of-hahahugoshortcode271s40hbhb&#34;&gt;Interpretation of $\hat{\sigma}_n^2$
:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;High $\hat{\sigma}_n^2$
:&lt;/strong&gt; Indicates high intrinsic uncertainty. The individual velocity samples $v_n^{(l)}$
 (derived from different $z_n$
 samples) are pointing in significantly different directions relative to their average direction ($\bar{v}_n$
). This means the model is &amp;ldquo;unsure&amp;rdquo; about the precise direction of velocity for cell n, even after averaging over gene-specific kinetic states. This might indicate that the cell is at a branching point in its trajectory or that its latent representation is ambiguous.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Low $\hat{\sigma}_n^2$
:&lt;/strong&gt; Indicates low intrinsic uncertainty. The individual velocity samples $v_n^{(l)}$
 are tightly clustered around the mean direction. This means the model is confident and consistent in its prediction of the velocity direction for cell n.&lt;/p&gt;
&lt;h1 id=&#34;velovi-future-cell-state-prediction-and-uncertainty-quantification&#34;&gt;VeloVI Future Cell State Prediction and Uncertainty Quantification&lt;/h1&gt;
&lt;p&gt;This document explains how VeloVI uses the predicted velocities to predict future cell states and, crucially, how it quantifies the uncertainty in these future state predictions. This moves beyond just the uncertainty of a single cell&amp;rsquo;s velocity to the uncertainty of where a cell might move to in the future.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break down the explanation:&lt;/p&gt;
&lt;h2 id=&#34;1-the-cell-cell-transition-matrix-hahahugoshortcode271s47hbhb&#34;&gt;1. The Cell-Cell Transition Matrix $T(v_{1:N}, s_{1:N})$
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; This matrix describes the likelihood of a cell transitioning from one state to another (or from cell i to cell j). It&amp;rsquo;s a core component of RNA velocity analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inputs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$v_{1:N}$
: The velocity vectors for all N cells in the dataset. Each $v_i$
 is the velocity vector for cell i.&lt;/li&gt;
&lt;li&gt;$s_{1:N}$
: The spliced RNA abundance matrix for all N cells. Each $s_i$
 is the spliced abundance vector for cell i.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How it&amp;rsquo;s computed (Conceptual, &amp;ldquo;as described previously¬π¬π&amp;rdquo;):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For each cell i, VeloVI identifies its nearest neighbors in the spliced abundance space (using $s_{1:N}$
). Let&amp;rsquo;s say $s_j$
 is a neighbor of $s_i$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Displacement Vector&lt;/strong&gt; ($\delta_{ij}$
): This vector represents the difference in spliced RNA abundance between cell j and cell i:&lt;/p&gt;

$$\delta_{ij} = s_j - s_i \quad (5)$$


&lt;p&gt;It points from cell i to cell j in the gene expression space.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cosine Similarity&lt;/strong&gt;: The key idea is to compare the direction of cell i&amp;rsquo;s velocity ($v_i$
) with the direction of the displacement to its neighbor j ($\delta_{ij}$
):&lt;/p&gt;

$$\cos(\delta_{ij}, v_i) = \frac{\delta_{ij}^T v_i}{\|\delta_{ij}\| \|v_i\|} \quad (6)$$


&lt;ul&gt;
&lt;li&gt;A high positive cosine similarity means that cell i&amp;rsquo;s velocity is pointing towards cell j.&lt;/li&gt;
&lt;li&gt;A low or negative cosine similarity means cell i&amp;rsquo;s velocity is pointing away from cell j (or in a very different direction).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Transition Probabilities:&lt;/strong&gt; These cosine similarities are then typically transformed into non-negative, normalized probabilities. A common approach is to use an exponential kernel (e.g., softmax-like) on positive cosine similarities to determine the probability that cell i will transition towards cell j. This forms the entries of the transition matrix T.&lt;/p&gt;
&lt;p&gt;The matrix T will have dimensions N√óN, where $T_{ij}$
 represents the probability of transitioning from cell i to cell j. (Or sometimes $T_{ji}$
 depending on convention).&lt;/p&gt;
&lt;h2 id=&#34;2-predicted-future-cell-state-hahahugoshortcode271s62hbhb&#34;&gt;2. Predicted Future Cell State: $T(v_{1:N}, s_{1:N})S$
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Concept:&lt;/strong&gt; Once we have the transition matrix T, we can use it to predict the future state of the entire cellular population.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation:&lt;/strong&gt; The matrix multiplication $T(v_{1:N}, s_{1:N})S$
 works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S is the N√óG matrix of spliced RNA abundances (cells by genes).&lt;/li&gt;
&lt;li&gt;The product TS (where T is N√óN) will result in a new N√óG matrix.&lt;/li&gt;
&lt;li&gt;The i-th row of this new matrix will represent the predicted future spliced RNA abundance vector for cell i. This is essentially a weighted average of the current spliced abundances of other cells, with the weights determined by the transition probabilities from cell i (i.e., the i-th row of T). If cell i is predicted to move towards cell j, its future state will be influenced more by $s_j$
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt; This operation gives us a set of predicted future cell state vectors, one for each cell.&lt;/p&gt;
&lt;h2 id=&#34;3-quantifying-uncertainty-in-predicted-future-cell-states&#34;&gt;3. Quantifying Uncertainty in Predicted Future Cell States&lt;/h2&gt;
&lt;p&gt;The crucial part here is that the velocities $v_{1:N}$
 that go into computing T are themselves samples from a posterior predictive velocity distribution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One &amp;ldquo;sample of velocity&amp;rdquo;:&lt;/strong&gt; The first step in the overall procedure (from the previous explanation) is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sample $z_n$
 from $q_\phi(z_n|u_n,s_n)$
. If we do this for all N cells, we get a specific set of $z_n$
 values $\{z_1^{(l)}, \ldots, z_N^{(l)}\}$
.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;One set of velocity vectors:&lt;/strong&gt; Using these $z_n^{(l)}$
 values, and then applying the second step:
2. Compute $E_{q_\phi(\pi_{ng}|z_n)}[v^{(g)}(t(k_{ng})_{ng}, k_{ng})]$
 for each gene, we obtain a single set of velocity vectors $v^{(l)} = \{v_1^{(l)}, \ldots, v_N^{(l)}\}$
 for the entire dataset. (Each $v_i^{(l)}$
 is the expected velocity vector for cell i given that specific sampled $z_i^{(l)}$
).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One transition matrix and one predicted future state:&lt;/strong&gt; This single set of velocity vectors $v^{(l)}$
 (along with $s_{1:N}$
) allows us to compute one sample of the transition matrix, $T(v^{(l)}, s_{1:N})$
. Multiplying this by S gives one sample of the predicted future cell state matrix, let&amp;rsquo;s call it:&lt;/p&gt;

$$S_{\text{future}}^{(l)} = T(v^{(l)}, s_{1:N})S \quad (7)$$


&lt;p&gt;&lt;strong&gt;Repeating the Process:&lt;/strong&gt; To understand the uncertainty, we repeat this entire procedure L times:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sample $z_n$
 for all cells to get $v^{(l)} = \{v_1^{(l)}, \ldots, v_N^{(l)}\}$
.&lt;/li&gt;
&lt;li&gt;Compute $T^{(l)} = T(v^{(l)}, s_{1:N})$
.&lt;/li&gt;
&lt;li&gt;Compute $S_{\text{future}}^{(l)} = T^{(l)}S$
.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This results in a set of L predicted future cell state matrices: $\{S_{\text{future}}^{(1)}, \ldots, S_{\text{future}}^{(L)}\}$
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variance Computation:&lt;/strong&gt; For each cell i, we now have L predicted future cell state vectors: $\{S_{\text{future},i}^{(1)}, S_{\text{future},i}^{(2)}, \ldots, S_{\text{future},i}^{(L)}\}$
.&lt;/p&gt;
&lt;p&gt;Let $\bar{S}_{\text{future},i}$
 be the mean of these L predicted future cell state vectors for cell i:&lt;/p&gt;

$$\bar{S}_{\text{future},i} = \frac{1}{L} \sum_{l=1}^{L} S_{\text{future},i}^{(l)} \quad (8)$$


&lt;p&gt;The uncertainty in the predicted future cell state for cell i is then computed using the same variance computation procedure as described for the intrinsic uncertainty (variance of the cosine similarity).&lt;/p&gt;
&lt;p&gt;Specifically, for cell i, you would compute:&lt;/p&gt;

$$\text{Uncertainty}(S_{\text{future},i}) = \frac{1}{L-1} \sum_{l=1}^{L} \left(\cos(S_{\text{future},i}^{(l)}, \bar{S}_{\text{future},i}) - \left(\frac{1}{L} \sum_{j=1}^{L} \cos(S_{\text{future},i}^{(j)}, \bar{S}_{\text{future},i})\right)\right)^2 \quad (9)$$


&lt;p&gt;This means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Calculate the mean predicted future state vector for cell i: $\bar{S}_{\text{future},i} = \frac{1}{L} \sum_{l=1}^{L} S_{\text{future},i}^{(l)}$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each sample l, compute the cosine similarity between the l-th predicted future state vector $S_{\text{future},i}^{(l)}$
 and the mean predicted future state vector $\bar{S}_{\text{future},i}$
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the variance of these L cosine similarity values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;in-essence&#34;&gt;In Essence:&lt;/h2&gt;
&lt;p&gt;This process allows VeloVI to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Predict where cells are likely to go&lt;/strong&gt; in gene expression space, using the learned velocities and current gene expression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quantify the confidence&lt;/strong&gt; (or lack thereof) in these predictions. A high variance in cosine similarity for the predicted future states of a cell indicates that the model&amp;rsquo;s different &amp;ldquo;stochastic runs&amp;rdquo; (due to sampling $z_n$
) lead to future state predictions that point in significantly different directions. This could highlight branching points, unstable states, or regions of high biological variability that the model captures as uncertainty.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
